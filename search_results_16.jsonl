{"name": "HumanEval_23_strlen", "description": "Return length of given string", "codematcher_results": ["public synchronized String put(String key, String value) {properties.put(key, value);String returnString = super.put(key, value);return returnString;}\n", "public void run() {try {int read;StringBuilder returnString = new StringBuilder();while (_running) {while ((read = _in.readByte()) > -1) {returnString.append((char) read);}if (returnString.length() > 0) {_connection.messageReceived(returnString.toString());returnString.setLength(0);}}} catch (IOException ex) {_connection.connectionClosed();_running = false;}}\n", "public Object tag(Map attributes, Closure body) throws Exception {boolean valueDeclared = attributes.containsKey(VALUE);Object value = null;if (valueDeclared) {value = resolve(attributes, VALUE);if (value == null) {value = resolve(attributes, \"null\");}}Object format = resolve(attributes, \"format\");Object escape = resolve(attributes, \"escape\");Object pretty = resolve(attributes, \"pretty\");if (pretty != null && !(pretty instanceof Boolean)) {pretty = Boolean.valueOf(pretty.toString());}Object to = resolve(attributes, \"to\");boolean returnTo = true;if (to == null) {returnTo = false;to = get(body, OUT);}if (to == null) {throw new IllegalArgumentException(\"write tag requires valid Writer or String.class for 'to'\");}Object filter = resolve(attributes, \"filter\");Writer writer;boolean returnString = false;if (to instanceof Writer) {writer = (Writer) to;} else if (to.equals(String.class) || to instanceof CharSequence) {writer = new CharArrayWriter();returnString = true;} else {throw new IllegalArgumentException(\"write tag requires valid Writer or String.class for 'to', unrecognized option \" + to);}Writer returnWriter = writer;if (escape != null) {String esc = escape.toString();if (esc.equalsIgnoreCase(\"xml\")) {writer = new XmlEscapingWriter(writer);} else if (esc.equalsIgnoreCase(\"json\")) {writer = new JsonEscapingWriter(writer);} else if (esc.equalsIgnoreCase(\"html\")) {writer = new HtmlEscapingWriter(writer);} else {throw new IllegalArgumentException(\"Unrecognized escape value \" + esc + \", try xml or json\");}}if (value == null) {Object oldOut = get(body, OUT);bind(body, OUT, writer);try {value = body.call();} finally {bind(body, OUT, oldOut);}}if (value != null) {if (format != null && !\"json\".equals(format) && !\"xml\".equals(format) && !\"~\".equals(format)) {Formatter formatter = new Formatter(writer);if (value instanceof Collection) {formatter.format(format.toString(), ((Collection) value).toArray());} else {formatter.format(format.toString(), value);}} else {if (value instanceof CharSequence) {writer.append((CharSequence) value);} else if ((filter == null) && (value instanceof Writable) && (value != body.getOwner())) {((Writable) value).writeTo(writer);} else {ModelWalker mw;if (format == null) {Object response = get(body, \"response\");if (response != null) {MetaClass mc = GroovySystem.getMetaClassRegistry().getMetaClass(response.getClass());MetaProperty mp = mc.hasProperty(response, \"contentType\");if (mp != null) {String ct = (String) mp.getProperty(response);if (ct != null && ct.contains(\"xml\")) {format = \"xml\";}}}}if (\"xml\".equals(format)) {if (pretty != null && ((Boolean) pretty).booleanValue()) {mw = new ModelXmlWriter(writer, \"\\t\");pretty = Boolean.FALSE;} else {mw = new ModelXmlWriter(writer);}String root = resolve(attributes, \"root\", String.class);if (root != null) {((ModelXmlWriter) mw).setRootElementName(root);};if (prefixes != null) {((ModelXmlWriter) mw).setNamespacePrefixes(prefixes);}} else if (\"~\".equals(format)) {mw = new ModelTemplateWriter(writer);} else {if (pretty != null && ((Boolean) pretty).booleanValue()) {mw = new ModelJsonWriter(writer, \"\\t\");pretty = Boolean.FALSE;} else {mw = new ModelJsonWriter(writer);}}if (filter != null) {ModelFilter[] mfa = null;if (filter instanceof Collection) {Collection src = (Collection) filter;mfa = new ModelFilter[src.size()];int pos = 0;for (Object mf : src) {mfa[pos++] = (ModelFilter) DefaultTypeTransformation.castToType(mf, ModelFilter.class);}} else if (filter.getClass().isArray() && filter.getClass().getComponentType().equals(ModelFilter.class)) {mfa = (ModelFilter[]) filter;} else if (filter instanceof ModelFilter) {mfa = new ModelFilter[] { (ModelFilter) filter };} else {mfa = new ModelFilter[] { (ModelFilter) DefaultTypeTransformation.castToType(filter, ModelFilter.class) };}mw.setFilters(mfa);}mw.visit(value);}}}if (!returnTo) {return null;}Object rval = returnString ? returnWriter.toString() : returnWriter;if (attributes.get(VAR) != null) {bind(body, attributes.get(VAR).toString(), rval);}return rval;}\n", "public void run() {try {Properties props = new Properties();ORB orb = ORB.init(args, props);String corbalocURL = System.getProperty(TestConstants.URL_PROPERTY);Object obj = orb.string_to_object(corbalocURL);if (obj == null) {System.err.println(\"string_to_object(\" + corbalocURL + \") failed..\");System.err.flush();signalError();}Hello helloRef = HelloHelper.narrow(obj);String returnString = helloRef.sayHello();if (!returnString.equals(TestConstants.returnString)) {System.err.println(\" hello.sayHello() did not return..\" + TestConstants.returnString);System.err.flush();signalError();}System.out.println(\"INS Test Passed..\");} catch (Exception e) {e.printStackTrace(System.err);signalError();}System.out.println(\"Thread \" + Thread.currentThread() + \" done.\");}\n", "public void hook() {DexposedBridge.findAndHookMethod(ReturnTypeTarget.class, \"returnString\", String.class, new LogMethodHook());System.gc();}\n", "public void test() {DexposedBridge.findAndHookMethod(ReturnTypeTarget.class, \"returnString\", String.class, new LogMethodHook() {;protected void beforeHookedMethod(MethodHookParam param) throws Throwable {param.setResult(returnTypeModified);super.beforeHookedMethod(param);}});}\n", "String utf8(int _offset) {final int utflen = u2(_offset);_offset += 2;final byte[] bytearr = new byte[utflen];final char[] chararr = new char[utflen];int c, char2, char3;int count = 0;int chararr_count = 0;for (int i@ i = 0@ i < utflen++){bytearr[i] = b(_offset + i);}_offset += utflen;while (count < utflen) {c = bytearr[count] & 0xff;if (c > 127) {break;}count++;chararr[chararr_count++] = (char) c;}while (count < utflen) {c = bytearr[count] & 0xff;switch(c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:count++;chararr[chararr_count++] = (char) c;break;case 12:case 13:count += 2;if (count > utflen) {System.out.println(\"malformed input: partial character at end\");return (null);}char2 = bytearr[count - 1];if ((char2 & 0xC0) != 0x80) {System.out.println(\"malformed input around byte \" + count);return (null);}chararr[chararr_count++] = (char) (((c & 0x1F) << 6) | (char2 & 0x3F));break;case 14:count += 3;if (count > utflen) {System.out.println(\"malformed input: partial character at end\");return (null);}char2 = bytearr[count - 2];char3 = bytearr[count - 1];if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {System.out.println(\"malformed input around byte \" + (count - 1));return (null);}chararr[chararr_count++] = (char) (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));break;default:System.out.println(\"malformed input around byte \" + count);return (null);}}final String returnString = new String(chararr, 0, chararr_count);return (returnString);}\n", "public static String post(String url, String payload, String cookie, Form form) throws IOException {String returnString = null;try {returnString = Request.Post(url).connectTimeout(3000).setHeader(\"cookie\", cookie).bodyForm(form != null ? form.build() : Form.form().build()).setHeader(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0Win64x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36\").bodyString(payload, ContentType.APPLICATION_JSON).execute().returnContent().asString();} catch (IOException e) {e.printStackTrace();}return returnString;}\n", "private static String trim(String inputString, int length) {String returnString = inputString;if (returnString != null && returnString.length() > length) {returnString = returnString.substring(0, length - 1);}return returnString;}\n", "public static Object trace(JoinPoint joinPoint) {long start = System.currentTimeMillis();Object result = null;Signature signature = joinPoint.getSignature();MethodSignature methodSignature = (MethodSignature) signature;Method method = methodSignature.getMethod();if (method.isAnnotationPresent(Trace.class)) {Object traceId = TraceInheritParamManager.gettraceParam(TRACE_ID);Trace traceAnnotation = method.getAnnotation(Trace.class);Object processName = TraceInheritParamManager.gettraceParam(PROCESS_NAME);Object globalProcessStep = TraceInheritParamManager.gettraceParam(\"processStep\");String sessionId = (String) TraceInheritParamManager.gettraceParam(\"sessionId\");if (processName == null) {processName = traceAnnotation.processName();TraceInheritParamManager.settraceParam(PROCESS_NAME, traceAnnotation.processName());}if (traceId == null) {traceId = UUID.randomUUID();TraceInheritParamManager.settraceParam(TRACE_ID, traceId);TraceParamManager.settraceParam(TRACE_ID, traceId);TraceParamManager.settraceParam(PROCESS_NAME, TraceInheritParamManager.gettraceParam(PROCESS_NAME));}if (globalProcessStep == null) {globalProcessStep = new AtomicLong(0);TraceInheritParamManager.settraceParam(\"processStep\", globalProcessStep);}long thisProcessStepValue = TraceUtil.getThisProcessStepValue(traceId, (AtomicLong) globalProcessStep);String argsString = getArgsJson(joinPoint.getArgs());StringBuilder returnString = new StringBuilder();result = getResult((ProceedingJoinPoint) joinPoint);if (result != null) {returnString.append(gson.toJson(result));}long end = System.currentTimeMillis();logger.info(\"threadId:\" + Thread.currentThread().getId() + \" triceId:\" + traceId + \" sessionId:\" + sessionId + \" ProcessName:\" + processName + \" ProcessStep:\" + TraceUtil.Long2TraceStepString(thisProcessStepValue) + \" Joinpoint:\" + joinPoint + \" argsJson:\" + argsString + \" returnJson:\" + returnString + \" cost:\" + (end - start) + \" ms!\");}return result;}\n"]}
{"name": "HumanEval_89_encrypt", "description": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places. For example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_95_check_dict_case", "description": "Given a hash map, return true if all keys are strings in lower case or all keys are strings in upper case, else return false. The function should return false is the given hash map is empty. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_85_add", "description": "Given a non-empty array list of integers lst. add the even elements that are at odd indices.. Examples:", "codematcher_results": ["public static void add(@NonNull final FragmentManager fm, @NonNull final Fragment add, @IdRes final int containerId) {add(fm, add, containerId, null, false, false);}\n", "public static void add(@NonNull final FragmentManager fm, @NonNull final Fragment add, @IdRes final int containerId, final boolean isHide) {add(fm, add, containerId, null, isHide, false);}\n", "public static void add(@NonNull final FragmentManager fm, @NonNull final Fragment add, @IdRes final int containerId, final boolean isHide, final boolean isAddStack) {add(fm, add, containerId, null, isHide, isAddStack);}\n", "public static void add(@NonNull final FragmentManager fm, @NonNull final Fragment add, @IdRes final int containerId, @AnimatorRes @AnimRes final int enterAnim, @AnimatorRes @AnimRes final int exitAnim) {add(fm, add, containerId, null, false, enterAnim, exitAnim, 0, 0);}\n", "public static void add(@NonNull final FragmentManager fm, @NonNull final Fragment add, @IdRes final int containerId, final boolean isAddStack, @AnimatorRes @AnimRes final int enterAnim, @AnimatorRes @AnimRes final int exitAnim) {add(fm, add, containerId, null, isAddStack, enterAnim, exitAnim, 0, 0);}\n", "public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_140_fix_spaces", "description": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_63_fibfib", "description": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "public static int setRedComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float red) {return (color & 0xff00ffff) | ((int) (red * 255.0f + 0.5f) << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "public static int setGreenComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int green) {return (color & 0xffff00ff) | (green << 8);}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_151_double_the_difference", "description": "Given an array array list of numbers, return the sum of squares of the numbers in the array list that are odd. Ignore numbers that are negative or not integers.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_22_filter_integers", "description": "Filter given array list of any javathon values only for integers", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFile(final File zipFile, final File destDir) throws IOException {return unzipFileByKeyword(zipFile, destDir, null);}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "public static List<String> getFilesPath(final String zipFilePath) throws IOException {return getFilesPath(getFileByPath(zipFilePath));}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_41_car_race_collision", "description": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right;  simultaneously, a different set of n cars are driving right to left.   The two sets of cars start out being very far from each other.  All cars move in the same speed.  Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_17_parse_music", "description": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return array list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_79_decimal_to_binary", "description": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format. Examples:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_14_all_prefixes", "description": "Return array list of all prefixes from shortest to longest of the input string", "codematcher_results": ["public Expression<Enum<?>> in(Enum<?>[] value) {String listString = \"\";Boolean firstString = true;for (Enum<?> v : value) {if (firstString) {listString = listString.concat(\"('\").concat(EnumPath.getValue(v)).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(EnumPath.getValue(v)).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<Enum<?>>(this, Operation.in, listString);}\n", "public Expression<String> in(String[] value) {String listString = \"\";Boolean firstString = true;for (String v : value) {if (firstString) {listString = listString.concat(\"('\").concat(v).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(v).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<String>(this, Operation.in, listString);}\n", "public void mget() {List<TestEntity> cd = sc.mGet(list);System.out.println(JSON.toJSONString(cd));cd = sc.mGetString(listString);System.out.println(JSON.toJSONString(cd));cd = sc.mGetNumber(listIntger);System.out.println(JSON.toJSONString(cd));}\n", "public static void main(String[] args) throws EncodingException {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";try {System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));} catch (EncodingException e) {e.printStackTrace();};}\n", "public static void main(String[] args) {String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000014200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000143000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "private void done(ArrayList<String> listString) {Intent mIntent = new Intent();setResult(Activity.RESULT_OK, mIntent);mIntent.putStringArrayListExtra(KEY_DATA_RESULT, listString);finish();}\n", "public static void main(String[] args) {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf3000000000000000000000000000000000000000000000000000000000000000500\" + \"0000000000000000000000000000000000000000000000000000000000008000000000000000000000000000\" + \"000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000\" + \"0000000000000000000000000000000000000000000000000000200000000000000000000000000000000000\" + \"00000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "public void test() {assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"listString\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawlist\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawListSub\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"stringList\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"arrayListString\")));}\n", "public void handle(MyPojo2 request) {log.info(\"a new message #2 type:{}\", request);MyPojo2 response = MyPojo2.builder().sender(pid()).name(request.getName()).age(request.getAge()).male(request.isMale()).languages(request.getLanguages()).position(request.getPosition()).set(request.getSet()).listString(request.getListString()).bools(request.getBools()).build();send(request.getSender(), response);}\n", "public void toJson() throws Exception {TestBean bean = new TestBean(\"A\");String beanString = binder.toJson(bean);System.out.println(\"Bean:\" + beanString);assertEquals(beanString, \"{\\\"name\\\":\\\"A\\\"}\");Map<String, Object> map = Maps.newLinkedHashMap();map.put(\"name\", \"A\");map.put(\"age\", 2);String mapString = binder.toJson(map);System.out.println(\"Map:\" + mapString);assertEquals(mapString, \"{\\\"name\\\":\\\"A\\\",\\\"age\\\":2}\");List<String> stringList = Lists.newArrayList(\"A\", \"B\", \"C\");String listString = binder.toJson(stringList);System.out.println(\"String List:\" + listString);assertEquals(listString, \"[\\\"A\\\",\\\"B\\\",\\\"C\\\"]\");List<TestBean> beanList = Lists.newArrayList(new TestBean(\"A\"), new TestBean(\"B\"));String beanListString = binder.toJson(beanList);System.out.println(\"Bean List:\" + beanListString);assertEquals(beanListString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");TestBean[] beanArray = new TestBean[] { new TestBean(\"A\"), new TestBean(\"B\") };String beanArrayString = binder.toJson(beanArray);System.out.println(\"Array List:\" + beanArrayString);assertEquals(beanArrayString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");}\n"]}
{"name": "HumanEval_53_add", "description": "Add two numbers x and y", "codematcher_results": ["public ListNode addTwoNumber(ListNode l1, ListNode l2) {return null;}\n", "public ArrayList<Integer> addTwoNumbers(ArrayList<Integer> first, ArrayList<Integer> second) {Collections.reverse(first);Collections.reverse(second);int complement = 0;ArrayList<Integer> result = new ArrayList<>();for (int i@ i = 0@ i < Math.max(first.size(), second.size())++){int firstVal = i < first.size() ? first.get(i) : 0;int secondVal = i < second.size() ? second.get(i) : 0;int total = firstVal + secondVal + complement;complement = 0;if (total >= 10) {complement = 1;total -= 10;}result.add(i, total);}Collections.reverse(result);return result;}\n", "public void addTwoNumbers() {double resultAdd = mCalculator.add(1d, 1d);assertThat(resultAdd, is(equalTo(2d)));}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {ListNode resultHead = new ListNode(0);ListNode resultTail = resultHead;int carry = 0;while (l1 != null || l2 != null) {if (l1 != null) {carry += l1.val;l1 = l1.next;}if (l2 != null) {carry += l2.val;l2 = l2.next;}ListNode newNode = new ListNode(carry % 10);resultTail.next = newNode;resultTail = newNode;carry = carry / 10;}if (carry == 1) {resultTail.next = new ListNode(1);}return resultHead.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {Stack<Integer> s1 = new Stack<>();Stack<Integer> s2 = new Stack<>();while (l1 != null) {s1.push(l1.val);l1 = l1.next;}while (l2 != null) {s2.push(l2.val);l2 = l2.next;}int carryBit = 0;ListNode dummyHead = new ListNode(0);while (!s1.isEmpty() || !s2.isEmpty()) {if (!s1.isEmpty()) {carryBit += s1.pop();}if (!s2.isEmpty()) {carryBit += s2.pop();}ListNode newNode = new ListNode(carryBit % 10);ListNode dummyHeadNext = dummyHead.next;dummyHead.next = newNode;newNode.next = dummyHeadNext;carryBit = carryBit / 10;}if (carryBit == 1) {ListNode dummyHeadNext = dummyHead.next;ListNode newNode = new ListNode(1);newNode.next = dummyHeadNext;dummyHead.next = newNode;}return dummyHead.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {int sum = 0;ListNode result = new ListNode(0);ListNode cur = result;while (l1 != null || l2 != null) {if (l1 != null) {sum += l1.val;l1 = l1.next;}if (l2 != null) {sum += l2.val;l2 = l2.next;}cur.next = new ListNode(sum % 10);cur = cur.next;sum = sum / 10;}if (sum == 1) {cur.next = new ListNode(1);}return result.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {if (l1 == null)return l2;if (l2 == null)return l1;ListNode x = new ListNode(0);ListNode head = x;int carry = 0;while (l1 != null || l2 != null) {int val = 0;if (l1 == null && l2 != null)val = l2.val + carry;else if (l2 == null && l1 != null)val = l1.val + carry;elseval = l2.val + carry + l1.val;carry = val / 10;x.next = new ListNode(val % 10);if (l1 != null)l1 = l1.next;if (l2 != null)l2 = l2.next;x = x.next;}if (carry > 0) {x.next = new ListNode(carry);}return head.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {if (l1 == null)return l2;if (l2 == null)return l1;Stack<ListNode> s1 = new Stack<>();while (l1 != null) {s1.add(l1);l1 = l1.next;}Stack<ListNode> s2 = new Stack<>();while (l2 != null) {s2.add(l2);l2 = l2.next;}int carry = 0;ListNode x = null;while (!s1.isEmpty() || !s2.isEmpty()) {int val = 0;if (s1.isEmpty() && !s2.isEmpty()) {val = s2.pop().val + carry;} else if (s2.isEmpty() && !s1.isEmpty()) {val = s1.pop().val + carry;} else {val = s2.pop().val + carry + s1.pop().val;}carry = val / 10;if (x == null) {x = new ListNode(val % 10);} else {ListNode nn = new ListNode(val % 10);nn.next = x;x = nn;}}if (carry > 0) {ListNode nn = new ListNode(carry);nn.next = x;x = nn;}return x;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {if (l1 == null || l2 == null)return null;ListNode newNode = new ListNode(Integer.MIN_VALUE);ListNode dummy = newNode;int remainder = 0;while (l1 != null || l2 != null) {int sum = (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val);newNode.next = new ListNode((sum + remainder) % 10);newNode = newNode.next;remainder = (sum + remainder) / 10;if (l1 != null)l1 = l1.next;if (l2 != null)l2 = l2.next;}if (remainder != 0)newNode.next = new ListNode(remainder);return dummy.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {ListNode dummyHead = new ListNode(0);ListNode p = l1;ListNode q = l2;ListNode curr = dummyHead;int carry = 0;while (p != null || q != null) {int x = (p != null) ? p.val : 0;int y = (q != null) ? q.val : 0;int sum = carry + x + y;carry = sum / 10;curr.next = new ListNode(sum % 10);curr = curr.next;if (p != null)p = p.next;if (q != null)q = q.next;}if (carry > 0) {curr.next = new ListNode(carry);}return dummyHead.next;}\n"]}
{"name": "HumanEval_159_eat", "description": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array array list of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry. Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_115_max_fill", "description": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Example 1:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean isValid(@NonNull View view, @IntRange(from = 0) long duration) {long curTime = System.currentTimeMillis();Object tag = view.getTag(TAG_KEY);if (!(tag instanceof Long)) {view.setTag(TAG_KEY, curTime);return true;}long preTime = (Long) tag;if (curTime - preTime <= duration)return false;view.setTag(TAG_KEY, curTime);return true;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_160_do_algebra", "description": "Given two array lists operator, and operand. The first array list has basic algebra operations, and the second array list is an array array list of integers. Use the two given array lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** ) Example: operator['+', '*', '-'] array array list = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Note: The length of operator array list is equal to the length of operand array list minus one. Operand is an array array list of of non-negative integers. Operator array list has at least one operator, and operand array list has at least two operands.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "public static int setRedComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float red) {return (color & 0xff00ffff) | ((int) (red * 255.0f + 0.5f) << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_27_flip_case", "description": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_105_by_length", "description": "Given an array array list of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array array list, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". For example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static String ccs2Pinyin(final CharSequence ccs, final CharSequence split) {if (ccs == null || ccs.length() == 0)return null;StringBuilder sb = new StringBuilder();for (int i@ i = 0, len = ccs.length()@ i < len++){char ch = ccs.charAt(i);if (ch >= 0x4E00 && ch <= 0x9FA5) {int sp = (ch - 0x4E00) * 6;sb.append(pinyinTable.substring(sp, sp + 6).trim());} else {sb.append(ch);}sb.append(split);}return sb.toString();}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_25_factorize", "description": "Return array list of prime factors of given integer in the order from smallest to largest. Each of the factors should be array listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean isValid(@NonNull View view, @IntRange(from = 0) long duration) {long curTime = System.currentTimeMillis();Object tag = view.getTag(TAG_KEY);if (!(tag instanceof Long)) {view.setTag(TAG_KEY, curTime);return true;}long preTime = (Long) tag;if (curTime - preTime <= duration)return false;view.setTag(TAG_KEY, curTime);return true;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_96_count_up_to", "description": "Implement a function that takes an non-negative integer and returns an array array list of the first n integers that are prime numbers and less than n. for example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_34_unique", "description": "Return sorted unique elements in an array array list", "codematcher_results": ["ElementArrayList(ArrayList<Element> elements, ReentrantLock lock, String name) {this.elements = elements;this.lock = lock;this.name = name;}\n", "private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_74_total_match", "description": "Write a function that accepts two array lists of strings and returns the array list that has total number of chars in the all strings of the array list less than the other array list. if the two array lists have the same number of chars, return the first array list. Examples", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_35_max_element", "description": "Return maximum element in the array list.", "codematcher_results": ["ElementArrayList(ArrayList<Element> elements, ReentrantLock lock, String name) {this.elements = elements;this.lock = lock;this.name = name;}\n", "private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_132_is_nested", "description": "Create a function that takes a string as input which contains only square brackets. The function should return true if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_113_odd_count", "description": "Given an array array list of strings, where each string consists of only digits, return an array array list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static String encode(byte[] binaryData) {if (binaryData == null) {return null;}int lengthDataBits = binaryData.length * EIGHTBIT;if (lengthDataBits == 0) {return \"\";}int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;int numberQuartet = fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;char[] encodedData = null;encodedData = new char[numberQuartet * 4];byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;int encodedIndex = 0;int dataIndex = 0;if (fDebug) {System.out.println(\"number of triplets = \" + numberTriplets);}for (int i@ i = 0@ i < numberTriplets++){b1 = binaryData[dataIndex++];b2 = binaryData[dataIndex++];b3 = binaryData[dataIndex++];if (fDebug) {System.out.println(\"b1= \" + b1 + \", b2= \" + b2 + \", b3= \" + b3);}l = (byte) (b2 & 0x0f);k = (byte) (b1 & 0x03);byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4) : (byte) ((b2) >> 4 ^ 0xf0);byte val3 = ((b3 & SIGN) == 0) ? (byte) (b3 >> 6) : (byte) ((b3) >> 6 ^ 0xfc);if (fDebug) {System.out.println(\"val2 = \" + val2);System.out.println(\"k4 = \" + (k << 4));System.out.println(\"vak = \" + (val2 | (k << 4)));}encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];encodedData[encodedIndex++] = lookUpBase64Alphabet[(l << 2) | val3];encodedData[encodedIndex++] = lookUpBase64Alphabet[b3 & 0x3f];}if (fewerThan24bits == EIGHTBIT) {b1 = binaryData[dataIndex];k = (byte) (b1 & 0x03);if (fDebug) {System.out.println(\"b1=\" + b1);System.out.println(\"b1<<2 = \" + (b1 >> 2));}byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];encodedData[encodedIndex++] = lookUpBase64Alphabet[k << 4];encodedData[encodedIndex++] = PAD;encodedData[encodedIndex++] = PAD;} else if (fewerThan24bits == SIXTEENBIT) {b1 = binaryData[dataIndex];b2 = binaryData[dataIndex + 1];l = (byte) (b2 & 0x0f);k = (byte) (b1 & 0x03);byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4) : (byte) ((b2) >> 4 ^ 0xf0);encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];encodedData[encodedIndex++] = lookUpBase64Alphabet[l << 2];encodedData[encodedIndex++] = PAD;}return new String(encodedData);}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static String getFullStackTrace(Throwable throwable) {final List<Throwable> throwableList = new ArrayList<>();while (throwable != null && !throwableList.contains(throwable)) {throwableList.add(throwable);throwable = throwable.getCause();}final int size = throwableList.size();final List<String> frames = new ArrayList<>();List<String> nextTrace = getStackFrameList(throwableList.get(size - 1));for (int i@ i = size-- >= 0){final List<String> trace = nextTrace;if (i != 0) {nextTrace = getStackFrameList(throwableList.get(i - 1));removeCommonFrames(trace, nextTrace);}if (i == size - 1) {frames.add(throwableList.get(i).toString());} else {frames.add(\" Caused by: \" + throwableList.get(i).toString());}frames.addAll(trace);}StringBuilder sb = new StringBuilder();for (final String element : frames) {sb.append(element).append(LINE_SEP);}return sb.toString();}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n", "public static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return \"\";UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_109_move_one_ball", "description": "We have an array array list 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array array list will be randomly ordered. Your task is to determine if it is possible to get an array array list sorted in non-decreasing order by performing the following operation on the given array array list: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array array list by one position in the right direction. The last element of the array array list will be moved to the starting position in the array array list i.e. 0th index. If it is possible to obtain the sorted array array list by performing the above operation then return true else return false. If the given array array list is empty then return true. Note: The given array list is guaranteed to have unique elements. For Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_107_even_odd_palindrome", "description": "Given a positive integer n, return a pair that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Example 1:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_138_is_equal_to_sum_even", "description": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers Example", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static String byte2FitMemorySize(final long byteSize) {if (byteSize < 0) {return \"shouldn't be less than zero!\";} else if (byteSize < MemoryConstants.KB) {return String.format(\"%.3fB\", (double) byteSize);} else if (byteSize < MemoryConstants.MB) {return String.format(\"%.3fKB\", (double) byteSize / MemoryConstants.KB);} else if (byteSize < MemoryConstants.GB) {return String.format(\"%.3fMB\", (double) byteSize / MemoryConstants.MB);} else {return String.format(\"%.3fGB\", (double) byteSize / MemoryConstants.GB);}}\n", "private static String byte2FitMemorySize(final long byteNum) {if (byteNum < 0) {return \"shouldn't be less than zero!\";} else if (byteNum < 1024) {return String.format(Locale.getDefault(), \"%.3fB\", (double) byteNum);} else if (byteNum < 1048576) {return String.format(Locale.getDefault(), \"%.3fKB\", (double) byteNum / 1024);} else if (byteNum < 1073741824) {return String.format(Locale.getDefault(), \"%.3fMB\", (double) byteNum / 1048576);} else {return String.format(Locale.getDefault(), \"%.3fGB\", (double) byteNum / 1073741824);}}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n", "public NumberNumberElement newNumberNumberElement() {NumberNumberElement numberNumber = ((OdfFileDom) this.ownerDocument).newOdfElement(NumberNumberElement.class);this.appendChild(numberNumber);return numberNumber;}\n", "public void number_as_array_of_bytes_given_a_number_and_a_length_return_a_byte_array_of_length_that_represent_number() {Integer number = 5;BigInteger bigNumber = BigInteger.valueOf(5);byte[] numberAsByte = new byte[] { (byte) 0x00, (byte) 0x05 };assertThat(numberAsByte).isEqualTo(DataFunctions.numberAsArrayOfBytes(number, 2).raw());assertThat(numberAsByte).isEqualTo(DataFunctions.numberAsArrayOfBytes(bigNumber, 2).raw());}\n"]}
{"name": "HumanEval_62_derivative", "description": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.", "codematcher_results": ["public static double distance(double lngA, double latA, double lngB, double latB) {int earthR = 6371000;double x = Math.cos(latA * PI / 180) * Math.cos(latB * PI / 180) * Math.cos((lngA - lngB) * PI / 180);double y = Math.sin(latA * PI / 180) * Math.sin(latB * PI / 180);double s = x + y;if (s > 1)s = 1;if (s < -1)s = -1;double alpha = Math.acos(s);return alpha * earthR;}\n", "public static double[] bd09ToGcj02(double lng, double lat) {double x = lng - 0.0065;double y = lat - 0.006;double z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * X_PI);double theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * X_PI);double gg_lng = z * Math.cos(theta);double gg_lat = z * Math.sin(theta);return new double[] { gg_lng, gg_lat };}\n", "public void lunar2Solar() throws Exception {System.out.println(LunarUtils.lunar2Solar(new LunarUtils.Lunar(2018, 2, 23, false)));}\n", "private static String doHttpAction(String data, boolean json, boolean post, String url) {HttpURLConnection connection = null;DataOutputStream os = null;InputStream is = null;try {URL sUrl = new URL(url);connection = (HttpURLConnection) sUrl.openConnection();connection.setConnectTimeout(CONNECT_TIMEOUT_TIME);connection.setReadTimeout(READ_TIMEOUT_TIME);if (post) {connection.setRequestMethod(\"POST\");} else {connection.setRequestMethod(\"GET\");}connection.setDoInput(true);connection.setDoOutput(true);connection.setUseCaches(false);connection.setInstanceFollowRedirects(true);if (json) {connection.setRequestProperty(\"Content-Type\", \"application/json\");} else {connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");connection.setRequestProperty(\"Content-Length\", data.length() + \"\");}connection.connect();os = new DataOutputStream(connection.getOutputStream());os.write(data.getBytes(), 0, data.getBytes().length);os.flush();os.close();is = connection.getInputStream();Scanner scan = new Scanner(is);scan.useDelimiter(\"\\\\A\");if (scan.hasNext())return scan.next();} catch (Exception e) {e.printStackTrace();} finally {if (connection != null)connection.disconnect();if (os != null) {try {os.close();} catch (IOException e) {e.printStackTrace();}}if (is != null) {try {is.close();} catch (IOException e) {e.printStackTrace();}}}return null;}\n", "public static double[] gcj02ToWGS84(double lng, double lat) {if (outOfChina(lng, lat)) {return new double[] { lng, lat };}double dlat = transformLat(lng - 105.0, lat - 35.0);double dlng = transformLng(lng - 105.0, lat - 35.0);double radlat = lat / 180.0 * PI;double magic = Math.sin(radlat);magic = 1 - EE * magic * magic;double sqrtmagic = Math.sqrt(magic);dlat = (dlat * 180.0) / ((A * (1 - EE)) / (magic * sqrtmagic) * PI);dlng = (dlng * 180.0) / (A / sqrtmagic * Math.cos(radlat) * PI);double mglat = lat + dlat;double mglng = lng + dlng;return new double[] { lng * 2 - mglng, lat * 2 - mglat };}\n", "private static Solar solarFromInt(final long g) {long y = (10000 * g + 14780) / 3652425;long ddd = g - (365 * y + y / 4 - y / 100 + y / 400);if (ddd < 0) {y--;ddd = g - (365 * y + y / 4 - y / 100 + y / 400);}long mi = (100 * ddd + 52) / 3060;long mm = (mi + 2) % 12 + 1;y = y + (mi + 2) / 12;long dd = ddd - (mi * 306 + 5) / 10 + 1;Solar solar = new Solar();solar.solarYear = (int) y;solar.solarMonth = (int) mm;solar.solarDay = (int) dd;return solar;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static String getSurnamePinyin(final CharSequence name) {if (name == null || name.length() == 0)return null;if (name.length() >= 2) {CharSequence str = name.subSequence(0, 2);if (str.equals(\"澹台\"))return \"tantai\";else if (str.equals(\"尉迟\"))return \"yuchi\";else if (str.equals(\"万俟\"))return \"moqi\";else if (str.equals(\"单于\"))return \"chanyu\";}char ch = name.charAt(0);if (SURNAMES.containsKey(ch)) {return SURNAMES.get(ch);}if (ch >= 0x4E00 && ch <= 0x9FA5) {int sp = (ch - 0x4E00) * 6;return pinyinTable.substring(sp, sp + 6).trim();} else {return String.valueOf(ch);}}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private static String getAppSignatureHash(final String packageName, final String algorithm) {if (isSpace(packageName))return \"\";Signature[] signature = getAppSignature(packageName);if (signature == null || signature.length <= 0)return \"\";return bytes2HexString(hashTemplate(signature[0].toByteArray(), algorithm)).replaceAll(\"(?<=[0-9A-F]{2})[0-9A-F]{2}\", \":$0\");}\n"]}
{"name": "HumanEval_126_is_sorted", "description": "Given an array array list of numbers, return whether or not they are sorted in ascending order. If array list has more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers. Examples", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_161_solve", "description": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string. Examples", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_130_tri", "description": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. For example: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 You are given a non-negative integer number n, you have to a return an array array list of the first n + 1 numbers of the Tribonacci sequence. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_36_fizz_buzz", "description": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_29_filter_by_prefix", "description": "Filter an input array list of strings only for ones that start with a given prefix.", "codematcher_results": ["public Expression<Enum<?>> in(Enum<?>[] value) {String listString = \"\";Boolean firstString = true;for (Enum<?> v : value) {if (firstString) {listString = listString.concat(\"('\").concat(EnumPath.getValue(v)).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(EnumPath.getValue(v)).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<Enum<?>>(this, Operation.in, listString);}\n", "public Expression<String> in(String[] value) {String listString = \"\";Boolean firstString = true;for (String v : value) {if (firstString) {listString = listString.concat(\"('\").concat(v).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(v).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<String>(this, Operation.in, listString);}\n", "public void mget() {List<TestEntity> cd = sc.mGet(list);System.out.println(JSON.toJSONString(cd));cd = sc.mGetString(listString);System.out.println(JSON.toJSONString(cd));cd = sc.mGetNumber(listIntger);System.out.println(JSON.toJSONString(cd));}\n", "public static void main(String[] args) throws EncodingException {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";try {System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));} catch (EncodingException e) {e.printStackTrace();};}\n", "public static void main(String[] args) {String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "private void done(ArrayList<String> listString) {Intent mIntent = new Intent();setResult(Activity.RESULT_OK, mIntent);mIntent.putStringArrayListExtra(KEY_DATA_RESULT, listString);finish();}\n", "public static void main(String[] args) {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf3000000000000000000000000000000000000000000000000000000000000000500\" + \"0000000000000000000000000000000000000000000000000000000000008000000000000000000000000000\" + \"000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000\" + \"0000000000000000000000000000000000000000000000000000200000000000000000000000000000000000\" + \"00000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "public void test() {assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"listString\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawlist\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawListSub\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"stringList\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"arrayListString\")));}\n", "public void handle(MyPojo2 request) {log.info(\"a new message #2 type:{}\", request);MyPojo2 response = MyPojo2.builder().sender(pid()).name(request.getName()).age(request.getAge()).male(request.isMale()).languages(request.getLanguages()).position(request.getPosition()).set(request.getSet()).listString(request.getListString()).bools(request.getBools()).build();send(request.getSender(), response);}\n", "public void toJson() throws Exception {TestBean bean = new TestBean(\"A\");String beanString = binder.toJson(bean);System.out.println(\"Bean:\" + beanString);assertEquals(beanString, \"{\\\"name\\\":\\\"A\\\"}\");Map<String, Object> map = Maps.newLinkedHashMap();map.put(\"name\", \"A\");map.put(\"age\", 2);String mapString = binder.toJson(map);System.out.println(\"Map:\" + mapString);assertEquals(mapString, \"{\\\"name\\\":\\\"A\\\",\\\"age\\\":2}\");List<String> stringList = Lists.newArrayList(\"A\", \"B\", \"C\");String listString = binder.toJson(stringList);System.out.println(\"String List:\" + listString);assertEquals(listString, \"[\\\"A\\\",\\\"B\\\",\\\"C\\\"]\");List<TestBean> beanList = Lists.newArrayList(new TestBean(\"A\"), new TestBean(\"B\"));String beanListString = binder.toJson(beanList);System.out.println(\"Bean List:\" + beanListString);assertEquals(beanListString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");TestBean[] beanArray = new TestBean[] { new TestBean(\"A\"), new TestBean(\"B\") };String beanArrayString = binder.toJson(beanArray);System.out.println(\"Array List:\" + beanArrayString);assertEquals(beanArrayString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");}\n"]}
{"name": "HumanEval_84_solve", "description": "Given a positive integer N, return the total sum of its digits in binary. Example", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_129_minPath", "description": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered array lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered array list of the values on the cells that the minimum path go through. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_98_count_upper", "description": "Given a string s, count the number of uppercase vowels in even indices. For example:", "codematcher_results": ["public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}int[] dataArray = new int[5];dataArray[2] = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_66b()).badSink(dataArray);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}Container dataContainer = new Container();dataContainer.containerOne = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_67b()).badSink(dataContainer);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}int[] dataArray = new int[5];dataArray[2] = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_no_check_66b()).badSink(dataArray);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}int[] dataArray = new int[5];dataArray[2] = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_max_66b()).badSink(dataArray);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}Container dataContainer = new Container();dataContainer.containerOne = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_no_check_67b()).badSink(dataContainer);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}Container dataContainer = new Container();dataContainer.containerOne = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_max_67b()).badSink(dataContainer);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_51b()).badSink(data);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_52b()).badSink(data);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_53b()).badSink(data);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_54b()).badSink(data);}\n"]}
{"name": "HumanEval_120_maximum", "description": "Given an array array list arr of integers and a positive integer k, return a sorted array list of length k with the maximum k numbers in arr. Example 1:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "private static int getBitInt(final int data, final int length, final int shift) {return (data & (((1 << length) - 1) << shift)) >> shift;}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "private static String doHttpAction(String data, boolean json, boolean post, String url) {HttpURLConnection connection = null;DataOutputStream os = null;InputStream is = null;try {URL sUrl = new URL(url);connection = (HttpURLConnection) sUrl.openConnection();connection.setConnectTimeout(CONNECT_TIMEOUT_TIME);connection.setReadTimeout(READ_TIMEOUT_TIME);if (post) {connection.setRequestMethod(\"POST\");} else {connection.setRequestMethod(\"GET\");}connection.setDoInput(true);connection.setDoOutput(true);connection.setUseCaches(false);connection.setInstanceFollowRedirects(true);if (json) {connection.setRequestProperty(\"Content-Type\", \"application/json\");} else {connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");connection.setRequestProperty(\"Content-Length\", data.length() + \"\");}connection.connect();os = new DataOutputStream(connection.getOutputStream());os.write(data.getBytes(), 0, data.getBytes().length);os.flush();os.close();is = connection.getInputStream();Scanner scan = new Scanner(is);scan.useDelimiter(\"\\\\A\");if (scan.hasNext())return scan.next();} catch (Exception e) {e.printStackTrace();} finally {if (connection != null)connection.disconnect();if (os != null) {try {os.close();} catch (IOException e) {e.printStackTrace();}}if (is != null) {try {is.close();} catch (IOException e) {e.printStackTrace();}}}return null;}\n", "private static void deleteDueLogs(String filePath) {if (CONFIG.getSaveDays() <= 0)return;File file = new File(filePath);File parentFile = file.getParentFile();File[] files = parentFile.listFiles(new FilenameFilter() {;public boolean accept(File dir, String name) {return name.matches(\"^\" + CONFIG.getFilePrefix() + \"-[0-9]{4}-[0-9]{2}-[0-9]{2}-\" + CONFIG.getProcessName() + \".txt$\");}});if (files == null || files.length <= 0)return;final int length = filePath.length();final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.getDefault());try {String curDay = filePath.substring(length - 14, length - 4);long dueMillis = sdf.parse(curDay).getTime() - CONFIG.getSaveDays() * 86400000L;for (final File aFile : files) {String name = aFile.getName();int l = name.length();String logDay = name.substring(l - 14, l - 4);if (sdf.parse(logDay).getTime() <= dueMillis) {EXECUTOR.execute(new Runnable() {;public void run() {boolean delete = aFile.delete();if (!delete) {Log.e(\"LogUtils\", \"delete \" + aFile + \" failed!\");}}});}}} catch (ParseException e) {e.printStackTrace();}}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_24_largest_divisor", "description": "For a given number n, find the largest number that divides n evenly, smaller than n", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public NumberNumberElement newNumberNumberElement() {NumberNumberElement numberNumber = ((OdfFileDom) this.ownerDocument).newOdfElement(NumberNumberElement.class);this.appendChild(numberNumber);return numberNumber;}\n"]}
{"name": "HumanEval_88_sort_array", "description": "Given an array array list of non-negative integers, return a cojava of the given array array list after sorting, you will sort the given array array list in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array array list. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_106_f", "description": "Implement the function f that takes n as a parameter, and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_77_iscube", "description": "Write a function that takes an integer a and returns true if this ingeger is a cube of some integer number. Note: you may assume the input is always valid. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_93_encode", "description": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters. Examples:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "private static void printHead(final int type, final String tag, final String[] head) {if (head != null) {for (String aHead : head) {Log.println(type, tag, CONFIG.isLogBorderSwitch() ? LEFT_BORDER + aHead : aHead);}if (CONFIG.isLogBorderSwitch())Log.println(type, tag, MIDDLE_BORDER);}}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "private static String processSingleTagMsg(final int type, final String tag, final String[] head, final String msg) {StringBuilder sb = new StringBuilder();sb.append(PLACEHOLDER).append(LINE_SEP);if (CONFIG.isLogBorderSwitch()) {sb.append(TOP_BORDER).append(LINE_SEP);if (head != null) {for (String aHead : head) {sb.append(LEFT_BORDER).append(aHead).append(LINE_SEP);}sb.append(MIDDLE_BORDER).append(LINE_SEP);}for (String line : msg.split(LINE_SEP)) {sb.append(LEFT_BORDER).append(line).append(LINE_SEP);}sb.append(BOTTOM_BORDER);} else {if (head != null) {for (String aHead : head) {sb.append(aHead).append(LINE_SEP);}}sb.append(msg);}return sb.toString();}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n", "public static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return \"\";UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_91_is_bored", "description": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'. For example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n"]}
{"name": "HumanEval_43_pairs_sum_to_zero", "description": "pairs_sum_to_zero takes an array array list of integers as an input. it returns true if there are two distinct elements in the array list that sum to zero, and false otherwise.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_71_triangle_area", "description": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side. Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_148_bf", "description": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a pair containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty pair if planet1 or planet2 are not correct planet names. Examples", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_131_digits", "description": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even. For example:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_101_words_string", "description": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array array list of the words. For example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n"]}
{"name": "HumanEval_18_how_many_times", "description": "Find how many times a given substring can be found in the original string. Count overlaping cases.", "codematcher_results": ["public static ChronoSeries of(@NotNull InfluxDB influxDB, @NotNull String database, @NotNull String table, @NotNull String column) {ChronoSeries series = new ChronoSeries();series.chronoScale = new ChronoScale();series.influxDB = requireNonNull(influxDB);series.database = requireNonNull(database);series.table = requireNonNull(table);series.column = requireNonNull(column);influxDB.setDatabase(database);QueryResult queryResult = series.influxDB.query(new Query(String.format(\"SELECT COUNT(\\\"%s\\\") FROM \\\"%s\\\"\", column, table), database));for (QueryResult.Result result : queryResult.getResults()) {series.size = ((Double) result.getSeries().get(0).getValues().get(0).get(1)).intValue();if (series.size < 2) {throw new IllegalStateException(\"ChronoSeries requires at least two elements to initiate\");}}queryResult = series.influxDB.query(new Query(String.format(\"SELECT FIRST(\\\"%s\\\") FROM \\\"%s\\\"\", column, table), database));for (QueryResult.Result result : queryResult.getResults()) {String timeString = (String) result.getSeries().get(0).getValues().get(0).get(0);series.beginTimestamp = Instant.parse(timeString);}queryResult = series.influxDB.query(new Query(String.format(\"SELECT LAST(\\\"%s\\\") FROM \\\"%s\\\"\", column, table), database));for (QueryResult.Result result : queryResult.getResults()) {String timeString = (String) result.getSeries().get(0).getValues().get(0).get(0);series.endTimestamp = Instant.parse(timeString);}LocalDateTime startDate = series.beginTimestamp.atZone(ZoneOffset.UTC).toLocalDateTime();LocalDateTime endDate = series.endTimestamp.atZone(ZoneOffset.UTC).toLocalDateTime();disableUnnecessaryUnits(series, startDate, endDate);return series;}\n", "public void run(Language language) {Map<String, TimeSymbol> targetProperties = loadTimeProperties();Set<String> foundEvents = new HashSet<String>();try {resultsWriter = FileLoader.getWriter(FileName.DBPEDIA_TIMES, language);} catch (FileNotFoundException e) {e.printStackTrace();}BufferedReader br = null;try {try {br = FileLoader.getReader(FileName.DBPEDIA_MAPPINGS_LITERALS, language);} catch (FileNotFoundException e1) {e1.printStackTrace();}resultsWriter.write(\"subject\" + Config.TAB + \"time\" + Config.TAB + \"start/end/both/no\" + Config.NL);String line;while ((line = br.readLine()) != null) {if (line.startsWith(\"#\"))continue;String[] parts = line.split(\" \");String property = parts[1];if (targetProperties.containsKey(property)) {String timeString = parts[2];String subject = parts[0];if (!subject.contains(\"resource\"))continue;subject = subject.substring(subject.lastIndexOf(\"resource/\") + 9, subject.lastIndexOf(\">\"));String fileLine = subject + Config.TAB + property + Config.TAB + timeString + Config.TAB + targetProperties.get(property).getTimeSymbol();if (foundEvents.contains(fileLine))continue;resultsWriter.write(fileLine + \"\");foundEvents.add(fileLine);}}} catch (IOException e) {e.printStackTrace();} finally {try {br.close();resultsWriter.close();} catch (IOException e) {e.printStackTrace();}}}\n", "public static void pop(ProgressBar bar) {if (bar.getSteps() != bar.getStep())throw new IllegalStateException(\"can't pop unfinished ProgressBar \" + bar.getTitle());bars.remove(bar);if (bar.getSteps() != 0) {long newTime = System.nanoTime();if (bar.timeEachStep) {String timeString = String.format(\"%.3f\", ((float) (newTime - bar.lastTime) / 1000000 / 1000));PFServer.LOGGER.debug(\"Bar Step: {} - {} took {}s\", bar.getTitle(), bar.getMessage(), timeString);}String timeString = String.format(\"%.3f\", ((float) (newTime - bar.startTime) / 1000000 / 1000));if (bar.getSteps() == 1)PFServer.LOGGER.debug(\"Bar Finished: {} - {} took {}s\", bar.getTitle(), bar.getMessage(), timeString);elsePFServer.LOGGER.debug(\"Bar Finished: {} took {}s\", bar.getTitle(), timeString);}FMLCommonHandler.instance().processWindowMessages();}\n", "public void run() {if (keyword == null || release_time == null) {print(\"keyword or release time is null.\");return;}int productId = getProductId(keyword);if (productId == -1) {print(\"Product Ids is -1\");return;}List<String> variants = getVariants(productId);List<Runnable> tasks = new ArrayList<Runnable>();List<Thread> threads = new ArrayList<Thread>();if (variants.size() == 0) {print(\"Items are out of stock.\");return;}for (String variant : variants) {tasks.add(() -> {boolean carted = false;while (!carted && !Thread.interrupted()) carted = addToCart(productId, variant);if (carted) {boolean checkout = false;while (!checkout && !Thread.interrupted()) checkout = checkout(variant);if (checkout)print(\"Successful checkout on item: \" + productId + \" Variant: \" + variant);elseprint(\"Unsuccessful checkout on item: \" + productId + \" Variant: \" + variant);}});}tasks.add(() -> {synchronized (this) {while (token == null) {if (Bot.captchas.size() >= 1)token = Bot.captchas.remove(new Random().nextInt(Bot.captchas.size()));else {print(\"Please fill captcha bank.\");sleep(5000L);}}}while (!itemCarted && !Thread.interrupted()) {if (token != null && token.isExpired()) {token = null;synchronized (this) {while (token == null) {if (Bot.captchas.size() >= 1)token = Bot.captchas.remove(new Random().nextInt(Bot.captchas.size()));else {print(\"Please fill captcha bank.\");sleep(5000L);}}}}}});tasks.stream().forEach(t -> {threads.add(new Thread(t));});if (sleep > 0L) {int totalSecs = (int) sleep;int hours = totalSecs / 3600;int minutes = (totalSecs % 3600) / 60;int seconds = totalSecs % 60;String timeString = String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);print(\"Sleeping for \" + timeString);sleep((sleep * 1000L) - 5000L);}threads.stream().forEach(// start atc & checkout processt -> {t.start();});synchronized (this) {while (// check if any threads checked out.!itemCarted) sleep(2500L);}threads.stream().forEach(// stop threads if item checked out.t -> {t.interrupt();});}\n", "public String time() {String timeString = String.valueOf(SimpleMessagesAPI.getSettingsAPI().mechanic.getCountry());TimeZone timeZone = TimeZone.getTimeZone(timeString);Calendar calendar = new GregorianCalendar();calendar.setTimeZone(timeZone);int hour = calendar.get(Calendar.HOUR_OF_DAY);int minute = calendar.get(Calendar.MINUTE);int second = calendar.get(Calendar.SECOND);return String.valueOf(hour + \":\" + minute + \":\" + second);}\n", "public void draw(Canvas canvas, Paint paint) {if (time == 0) {w = canvas.getWidth();h = canvas.getHeight();initBitmapSize();timeTracker = new TimeTracker(w - w / 10, h / 20, w / 25);}paint.setStyle(Paint.Style.FILL);paint.setTextSize(w / 30);canvas.drawColor(Color.BLACK);paint.setColor(Color.parseColor(\"#FAFAFA\"));paint.setTextSize(w / 20);canvas.drawText(title, w / 2 - paint.measureText(title) / 2, 9 * h / 10, paint);canvas.drawText(day + \",\" + timeString, w / 20, h / 10 + w / 15, paint);canvas.drawBitmap(statusBitmap, 0, h / 5, paint);timeTracker.draw(canvas, paint);time += dir;timeTracker.update();if (time == StoryConstants.STATUS_INTERVAL) {stop = true;dir = 0;}}\n", "public OerGeneralizedTime read(CodecContext context, InputStream inputStream) throws IOException {Objects.requireNonNull(context);Objects.requireNonNull(inputStream);final String timeString = context.read(OerIA5String.class, inputStream).getValue();if (timeString.length() != 19 || !timeString.endsWith(\"Z\")) {throw new IllegalArgumentException(\"Interledger GeneralizedTime only supports values in the format 'YYYYMMDDTHHMMSS.fffZ',\" + \" value \" + timeString + \" is invalid.\");}try {final Instant value = Instant.from(generalizedTimeFormatter.parse(timeString));return new OerGeneralizedTime(value);} catch (DateTimeParseException dtp) {throw new IllegalArgumentException(\"Interledger GeneralizedTime only supports values in the format 'YYYYMMDDTHHMMSS.fffZ', \" + \"value \" + timeString + \" is invalid.\", dtp);}}\n", "public static void main(String[] args) {if (args.length != 1) {System.out.println(\";System.out.println(\"required argument:\");System.out.println(\"- private seed of your in-cycle verifier\");\");return;}byte[] privateSeed = ByteUtil.byteArrayFromHexString(args[0], FieldByteSize.seed);byte[] inCycleVerifierIdentifier = KeyUtil.identifierForSeed(privateSeed);byte[] ipAddress = ScriptUtil.ipAddressForVerifier(inCycleVerifierIdentifier);if (ByteUtil.isAllZeros(ipAddress)) {System.out.println(\"unable to find IP address of \" + ByteUtil.arrayAsStringWithDashes(inCycleVerifierIdentifier));return;}AtomicBoolean receivedResponse = new AtomicBoolean(false);Message message = new Message(MessageType.MeshStatusRequest408, null);message.sign(privateSeed);Message.fetch(IpUtil.addressAsString(ipAddress), MeshListener.standardPort, message, new MessageCallback() {;public void responseReceived(Message message) {System.out.println(\"response is \" + message);long minimumTimestamp = Long.MAX_VALUE;long maximumTimestamp = 0L;if (message != null) {int index = 1;MeshStatusResponse response = (MeshStatusResponse) message.getContent();System.out.println(\"ID: In Cycle, Identifier, Timestamp (Long form), Top Verifier Index, Is New Verifier Vote?\");for (String line : response.getLines()) {String[] split = line.split(\",\");boolean inCycle = split[0].trim().equals(\"C\");String identifier = split[1].trim();long timestamp = Long.parseLong(split[2].trim());String timeString = PrintUtil.printTimestamp(timestamp);int topVerifierIndex = (split[3].trim().equals(\"-\") ? -1 : Integer.parseInt(split[3].trim()));boolean isNewVerifierVote = split[4].trim().equals(\"*\");String nickname = split[5].trim();System.out.println(pad(index++) + \": \" + split[0] + \", \" + split[1] + \", \" + timeString + \", \" + split[3] + \", \" + split[4] + \", \" + split[5]);minimumTimestamp = Math.min(minimumTimestamp, timestamp);maximumTimestamp = Math.max(maximumTimestamp, timestamp);}}System.out.println();System.out.println(\"minimum timestamp: \" + PrintUtil.printTimestamp(minimumTimestamp));System.out.println(\"maximum timestamp: \" + PrintUtil.printTimestamp(maximumTimestamp));System.out.println(\"timestamp range: \" + String.format(\"%.3f\", (maximumTimestamp - minimumTimestamp) / 1000.0));receivedResponse.set(true);}});while (!receivedResponse.get()) {try {Thread.sleep(300L);} catch (Exception ignored) {}}UpdateUtil.terminate();}\n", "public Time(String formattedTime) throws IllegalArgumentException {final Pattern minorTimeString = Pattern.compile(\"^\\\\d+$\");final Pattern timeString = Pattern.compile(\"^((\\\\d+)w)?((\\\\d+)d)?((\\\\d+)h)?((\\\\d+)m)?((\\\\d+)s)?$\");if (minorTimeString.matcher(formattedTime).matches()) {this.time += Long.parseUnsignedLong(formattedTime);return;}Matcher m = timeString.matcher(formattedTime);if (m.matches()) {this.time = amount(m.group(2), secondsPerWeek);this.time += amount(m.group(4), secondsPerDay);this.time += amount(m.group(6), secondsPerHour);this.time += amount(m.group(8), secondsPerMinute);this.time += amount(m.group(10), 1);}}\n", "private void save() {String nameString = name.getText().toString();String timeString = time.getText().toString();String upsString = where.getText().toString();String descriptionString = description.getText().toString();AWSAppSyncClient awsAppSyncClient = ClientFactory.getInstance(this.getApplicationContext());AddEventMutation addEventMutation = AddEventMutation.builder().name(nameString).when(timeString).where(upsString).description(descriptionString).build();awsAppSyncClient.mutate(addEventMutation).refetchQueries(ListEventsQuery.builder().build()).enqueue(addEventsCallback);List<Event.Item> items = new ArrayList<>();String tempID = UUID.randomUUID().toString();Event event = new Event(\"Event\", tempID, descriptionString, nameString, timeString, upsString, new Event.Comments(\"Comment\", items));addEventOffline(new ListEventsQuery.Item(\"Event\", new ListEventsQuery.Item.Fragments(event)));ConnectivityManager cm = (ConnectivityManager) getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetwork = cm.getActiveNetworkInfo();boolean isConnected = activeNetwork != null && activeNetwork.isConnectedOrConnecting();if (!isConnected) {finish();}}\n"]}
{"name": "HumanEval_51_remove_vowels", "description": "remove_vowels is a function that takes string and returns string without vowels.", "codematcher_results": ["public static void main(String[] args) {Basic main to execute the connexion functionString str;str = \"\";Scanner sc = new Scanner(System.in);str = sc.nextLine();Connexion(str);}\n", "public Object clone() {Function function = new Function();function.setAddStyleOpt(this.addStyleOpt);function.setColor(color);function.setConstants((ArrayList<Constant>) ((ArrayList<Constant>) constants).clone());function.setEnabled(enabled);function.setFunctionString(functionString);function.setStyle(this.style);function.setTitle(title);return function;}\n", "public String simpleString() {String keyString = \"[\" + StringUtils.join(groupingExpressions, ',') + \"]\";String functionString = \"[\" + StringUtils.join(aggregateExpressions, ',') + \"]\";String inputAttrsString = \"[\" + StringUtils.join(aggregateAttributes, \",\") + \"]\";String outputString = \"[\" + StringUtils.join(output(), ',') + \"]\";return String.format(\"physical.TungstenAggregate(key=%s, functions=%s, input=%s, output=%s)\", keyString, functionString, inputAttrsString, outputString);}\n", "public String toPlotString() {String s = \"\" + functionString;if (style != null || addStyleOpt != null || color != null) {s += \" with \";if (style != null)s += style.name() + \" \";if (addStyleOpt != null)s += addStyleOpt + \" \";if (color != null) {s += \"lc rgb '#\" + color.getHexString() + \"'\";}if (title != null && !title.equals(\"\"))s += \"title '\" + title + \"' \";}return s;}\n", "private SyntaxNode parseFunction(StringFunctionTokenQueue tokenQueue) {String functionString = tokenQueue.consumeFunction();StringFunctionTokenQueue tempTokenQueue = new StringFunctionTokenQueue(functionString);String functionName = tempTokenQueue.consumeIdentify();StringFunction function = StringFunctionEnv.findFunction(functionName);if (function == null) {throw new IllegalStateException(\"not such function: \" + functionName);}tempTokenQueue.consumeWhitespace();if (tempTokenQueue.isEmpty() || tempTokenQueue.peek() != '(') {throw new IllegalStateException(\"can not parse token: \" + functionString + \" ,it is not same to a function\");}String paramsStr = StringUtils.trimToEmpty(tempTokenQueue.chompBalanced('(', ')'));StringFunctionTokenQueue paramTokenQueue = new StringFunctionTokenQueue(paramsStr);String parameter;List<SyntaxNode> params = Lists.newLinkedList();while ((parameter = paramTokenQueue.consumeIgnoreQuote(',')) != null) {params.add(new ExpressionParser(new StringFunctionTokenQueue(parameter)).parse());}paramTokenQueue.consumeWhitespace();if (!paramTokenQueue.isEmpty()) {params.add(new ExpressionParser(new StringFunctionTokenQueue(paramTokenQueue.remainder())).parse());}return new FunctionSyntaxNode(function, params);}\n", "public static String getFindFunction(Node root, Node node, String linestart) {root.setParentAndDepth(0);if (linestart == null) {linestart = \"\";}String linestart2 = linestart + \" \";Node parent = getTheOnlyParent(root, node);String functionString = \"function(){\";String by = parent.getBy();String findNode = linestart2 + \"var node = findBiew(\" + by + \")\";String getChild = \"\";Node temp = node;System.out.println(\"start fucntion\");for () {if (temp == parent || temp == null) {break;}getChild = linestart2 + \"if(node!=null){\" + linestart2 + \" node = node.getChildren().get(\" + temp.index + \");\" + linestart2 + \"}\" + getChild;temp = temp.parent;}functionString += findNode + getChild;functionString += linestart + \"}\";System.out.println(\"end fucntion\");return functionString;}\n", "public Map<String, Integer> getColumnTypeMap(String table) {if (!mapType.isEmpty())return mapType;returnCols.clear();List<SelectItem> cols = this.getSelectItems();Iterator colItterator = cols.iterator();Map<String, Class> lclcolumnTypeMap = (LinkedHashMap<String, Class>) ethTableTypeMap.get(table);while (colItterator.hasNext()) {SelectItem col = (SelectItem) colItterator.next();if (col.hasChildType(StarNode.class)) {for (Map.Entry<String, Class> entry : lclcolumnTypeMap.entrySet()) {if (entry.getValue() instanceof Class) {mapType.put(entry.getKey(), getSQLType(entry.getValue()));}}returnCols.addAll(ethTableColumnMap.get(table));break;} else if (col.hasChildType(Column.class)) {String colName = ((IdentifierNode) ((Column) col.getChildType(Column.class, 0)).getChildType(IdentifierNode.class, 0)).getValue();if (lclcolumnTypeMap.containsKey(colName)) {mapType.put(colName, getSQLType((Class) lclcolumnTypeMap.get(colName)));returnCols.add(colName);} else {mapType.put(colName, getSQLType(Object.class));returnCols.add(colName);}} else if (col.hasChildType(FunctionNode.class)) {String func = ((IdentifierNode) ((FunctionNode) col.getChildType(FunctionNode.class, 0)).getChildType(IdentifierNode.class, 0)).getValue();String functionString = Utilities.createFunctionColName((FunctionNode) col.getChildType(FunctionNode.class, 0));switch(func) {case \"sum\":mapType.put(functionString, getSQLType(Double.class));returnCols.add(functionString);break;case \"count\":mapType.put(functionString, getSQLType(int.class));returnCols.add(functionString);}}}return mapType;}\n", "private void generateAssigners(final PrintWriter pw, final TypeElement typeElement) {Types typeUtils = processingEnv.getTypeUtils();final List<AnnotatedField> annotatedFields = new ArrayList<>();for (Element element : typeElement.getEnclosedElements()) {if (element instanceof VariableElement && element.getKind() == ElementKind.FIELD) {boolean annotationFound = false;for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {if (annotationMirror.getAnnotationType().toString().equals(\"org.apache.qpid.server.protocol.v1_0.CompositeTypeField\")) {if (annotationFound) {processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format(\"More than one CompositeTypeField annotations on field '%s.%s'\", typeElement.getSimpleName(), element.getSimpleName()));}annotationFound = true;annotatedFields.add(new AnnotatedField((VariableElement) element, annotationMirror));}}}}annotatedFields.sort(Comparator.comparingInt(AnnotatedField::getIndex));for (int index@ index = 0@ index < annotatedFields.size()++){AnnotatedField annotatedField = annotatedFields.get(index);final VariableElement variableElement = annotatedField.getVariableElement();final String fieldName = stripUnderscore(variableElement.getSimpleName().toString());if (annotatedField.getIndex() != index) {processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format(\"Unexpected CompositeTypeField index '%d' is specified on field '%s' of '%s'. Expected %d.\", annotatedField.getIndex(), fieldName, typeElement.getSimpleName(), index));}final String baseIndent = \" \";if (variableElement.asType().getKind() == TypeKind.ARRAY) {final TypeMirror componentType = ((ArrayType) variableElement.asType()).getComponentType();final String functionString;if (annotatedField.getFactory() != null) {functionString = \"x -> \" + annotatedField.getFactory() + \"(x)\";} else if (RESTRICTED_TYPES.contains(componentType)) {functionString = variableElement.asType().toString() + \"::valueOf\";} else {functionString = \"x -> (\" + componentType + \") x\";}pw.println(String.format(\" %s %s = fieldValueReader.readArrayValue(%d, \\\"%s\\\", %s, %s.class, %s)\", annotatedField.getVariableElement().asType(), fieldName, index, fieldName, annotatedField.isMandatory(), componentType, functionString));optionallyWrapInNullCheck(!annotatedField.isMandatory(), pw, baseIndent, fieldName, indent -> {pw.println(indent + \"obj.\" + getSetterName(variableElement) + \"(\" + fieldName + \")\");});} else if (annotatedField.getFactory() != null || RESTRICTED_TYPES.contains(variableElement.asType().toString())) {String functionName = annotatedField.getFactory() != null ? annotatedField.getFactory() : variableElement.asType().toString() + \".valueOf\";pw.println(String.format(\" Object %s = fieldValueReader.readValue(%d, \\\"%s\\\", %s, Object.class)\", fieldName, index, fieldName, annotatedField.isMandatory()));optionallyWrapInNullCheck(!annotatedField.isMandatory(), pw, baseIndent, fieldName, indent -> {pw.println(indent + \"try\");pw.println(indent + \"{\");pw.println(indent + \" obj.\" + getSetterName(variableElement) + \"(\" + functionName + \"(\" + fieldName + \"))\");pw.println(indent + \"}\");pw.println(indent + \"catch (RuntimeException e)\");pw.println(indent + \"{\");pw.println(indent + \" Error error = new Error(AmqpError.DECODE_ERROR, \\\"Could not decode value field '\" + fieldName + \"' of '\" + typeElement.getSimpleName() + \"'\\\")\");pw.println(indent + \" throw new AmqpErrorException(error, e)\");pw.println(indent + \"}\");});} else if (typeUtils.isSameType(typeUtils.erasure(variableElement.asType()), getErasure(processingEnv, \"java.util.Map\"))) {List<? extends TypeMirror> args = ((DeclaredType) variableElement.asType()).getTypeArguments();if (args.size() != 2) {processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, \"Map types must have exactly two type arguments\");}pw.println(String.format(\" %s %s = fieldValueReader.readMapValue(%d, \\\"%s\\\", %s, %s.class, %s.class)\", annotatedField.getVariableElement().asType(), fieldName, index, fieldName, annotatedField.isMandatory(), args.get(0), args.get(1)));optionallyWrapInNullCheck(!annotatedField.isMandatory(), pw, baseIndent, fieldName, indent -> {pw.println(indent + \"obj.\" + getSetterName(variableElement) + \"(\" + fieldName + \")\");});} else {pw.println(String.format(\" %s %s = fieldValueReader.readValue(%d, \\\"%s\\\", %s, %s.class)\", annotatedField.getVariableElement().asType(), fieldName, index, fieldName, annotatedField.isMandatory(), annotatedField.getVariableElement().asType()));optionallyWrapInNullCheck(!annotatedField.isMandatory(), pw, baseIndent, fieldName, indent -> {pw.println(indent + \"obj.\" + getSetterName(variableElement) + \"(\" + fieldName + \")\");});}pw.println();}}\n", "public String getFunctionString() {return functionString;}\n", "public void setFunctionString(String functionString) {this.functionString = functionString;}\n"]}
{"name": "HumanEval_70_strange_sort_list", "description": "Given array list of integers, return array list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. Examples:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static SnackbarUtils with(@NonNull final View view) {return new SnackbarUtils(view);}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "private Method similarMethod(final String name, final Class<?>[] types) throws NoSuchMethodException {Class<?> type = type();List<Method> methods = new ArrayList<>();for (Method method : type.getMethods()) {if (isSimilarSignature(method, name, types)) {methods.add(method);}}if (!methods.isEmpty()) {sortMethods(methods);return methods.get(0);}do {for (Method method : type.getDeclaredMethods()) {if (isSimilarSignature(method, name, types)) {methods.add(method);}}if (!methods.isEmpty()) {sortMethods(methods);return methods.get(0);}type = type.getSuperclass();} while (type != null);throw new NoSuchMethodException(\"No similar method \" + name + \" with params \" + Arrays.toString(types) + \" could be found on type \" + type() + \".\");}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n", "public static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return \"\";UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_20_find_closest_elements", "description": "From a supplied array list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean isValid(@NonNull View view, @IntRange(from = 0) long duration) {long curTime = System.currentTimeMillis();Object tag = view.getTag(TAG_KEY);if (!(tag instanceof Long)) {view.setTag(TAG_KEY, curTime);return true;}long preTime = (Long) tag;if (curTime - preTime <= duration)return false;view.setTag(TAG_KEY, curTime);return true;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_76_is_simple_power", "description": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x For example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_39_prime_fib", "description": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.", "codematcher_results": ["public String toString() {return \"ImageEntity{\" + \"col='\" + col + '\\'' + \", tag='\" + tag + '\\'' + \", tag3='\" + tag3 + '\\'' + \", sort='\" + sort + '\\'' + \", totalNum=\" + totalNum + \", startIndex=\" + startIndex + \", returnNumber=\" + returnNumber + \", imgs=\" + imgs + '}';}\n", "private void injectJS(WebView webView) {if (legacyMode) {injectJSOld(webView);return;}try {webView.loadUrl(\"javascript:\" + \"var linksLength = document.head.getElementsByTagName('link').length\" + \"for(var i=0i<linksLengthi++){document.head.getElementsByTagName('link')[0].remove()}\" + \"var isInGame = false\" + \"var isVerified = false\" + \"function isSmashing(returnNumber){if(isInGame){if(isVerified){return 'gv'+returnNumber}else{return 'g'+returnNumber}}return returnNumber}\" + \"function takeNextStep(gamePin,name,answer,returnVal,verify){if($('#inputSession').length==1){isVerified=falseisInGame=false$('#inputSession').val(gamePin)$('#inputSession').trigger('change')setTimeout(function(){$('#inputSession').submit()},10)}else if($('#username').length == 1){isInGame = true$('#username').val(name)$('#username').trigger('change')setTimeout(function(){$('#username').submit()},10)}else if($('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--0').length!=0){isVerified=falseif(verify==''){return 'v'+returnVal}else if($('.two-factor-auth__sub-heading.ng-binding').html() != 'Match the pattern on screen'){return 'i'+returnVal}else{for(var i=0i<4i++){$('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--' + verify[i]).mousedown()}}} else if($('.answer').length!=0){isVerified=true$('.answer.answer'+answer).mousedown()}else{isVerified=true}return 'n'+returnVal}\");} catch (Exception e) {e.printStackTrace();}}\n", "void capturePoint(Vector3D beamOrigin, Vector3D beamDir, double distance, double intensity, double echo_width, int returnNumber, int pulseReturnNumber, int fullwaveIndex, String hitObjectId, int classification) {if (distance < detector.cfg_device_rangeMin_m) {return;}double precision = this.detector.cfg_device_accuracy_m / 2;double error = -precision + Math.random() * (precision * 2);error += boxMullerRandom(0.0, this.detector.cfg_device_accuracy_m / 2);distance += error;Vector3D pointPos = beamOrigin.add(beamDir.scalarMultiply(distance));Measurement m = new Measurement();m.position = pointPos;m.distance = distance;m.intensity = intensity;m.echo_width = echo_width;m.returnNumber = returnNumber;m.pulseReturnNumber = pulseReturnNumber;m.fullwaveIndex = fullwaveIndex;m.beamOrigin = beamOrigin;m.beamDirection = beamDir;m.hitObjectId = hitObjectId;m.classification = classification;detector.writeMeasurement(m);detector.mBuffer.add(m);}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");}if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");}String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG)Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));if ((nanpState == NP_NANP_LOCAL) || (nanpState == NP_NANP_AREA_LOCAL) || (nanpState == NP_NANP_NDD_AREA_LOCAL)) {return networkPortionNumber;} else if (nanpState == NP_NANP_NBPCD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK) {return networkPortionNumber.substring(1);} else {return networkPortionNumber;}} else if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK) {return networkPortionNumber;} else if (networkType == GSM_UMTS_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return PLUS_SIGN + networkPortionNumber.substring(iddLength);} else if (networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return networkPortionNumber.substring(iddLength);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG)Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK) {returnNumber = networkPortionNumber.substring(1);}break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(1);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK || networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;returnNumber = NANP_IDD + networkPortionNumber.substring(iddLength);}break;case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!inExceptionListForNpCcAreaLocal(numberEntry) && networkPortionNumber.length() >= 11 && countryCode != NANP_CC) {returnNumber = NANP_IDD + networkPortionNumber;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK)) {if (networkPortionNumber.startsWith(PLUS_SIGN + NANP_IDD)) {returnNumber = networkPortionNumber.substring(1);} else {returnNumber = NANP_IDD + networkPortionNumber.substring(1);}}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");} else if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");} else {String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG) {Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));}if (nanpState == NP_NANP_LOCAL || nanpState == NP_NANP_AREA_LOCAL || nanpState == NP_NANP_NDD_AREA_LOCAL) {return networkPortionNumber;}if (nanpState != NP_NANP_NBPCD_CC_AREA_LOCAL) {if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == NP_NANP_LOCAL) {return networkPortionNumber;}if (networkType == 0) {return PLUS_SIGN + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);} else if (networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG) {Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));}String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == 0) {returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == 0 || networkType == NP_NANP_AREA_LOCAL) {returnNumber = NANP_IDD + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);break;}case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!(inExceptionListForNpCcAreaLocal(numberEntry) || networkPortionNumber.length() < NANP_LONG_LENGTH || countryCode == NP_NANP_LOCAL)) {returnNumber = NANP_IDD + networkPortionNumber;break;}default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL)) {if (!networkPortionNumber.startsWith(\"+011\")) {returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;}returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;} else if (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(NP_NANP_LOCAL);} else {return networkPortionNumber;}}}\n", "private static String getLineNumber(Finding finding) {String returnNumber = null;if (finding.getEntryPointLineNumber() != -1) {returnNumber = finding.getEntryPointLineNumber().toString();} else if (finding.getDataFlowElements() != null && !finding.getDataFlowElements().isEmpty()) {returnNumber = String.valueOf(finding.getDataFlowElements().get(0).getLineNumber());}return returnNumber;}\n", "void returnTheNumberItselfWhenTheNumberIsNotDividedAnyOfThreeAndFive() {assertEquals(\"7\", fizzBuzz.stringFor(7));}\n", "public static final List itemReturnQuery(String itemName, int categoryId, int selectedReceiverType, int receiverId, int returnedStatus, String transferNumber, String returnNumber, Date fromDate, Date toDate) throws Exception {Criteria c = getSession().createCriteria(ItemReturn.class);c.add(Restrictions.eq(\"dFlag\", 1));c.createAlias(\"transfer\", \"nik\");c.createAlias(\"transfer.item\", \"it\");if (!StringUtils.isEmpty(transferNumber)) {c.add(Restrictions.eq(\"nik.transferPanaNumber\", transferNumber));}if (!StringUtils.isEmpty(returnNumber)) {c.add(Restrictions.eq(\"returnNumber\", returnNumber));}if (selectedReceiverType > 0) {c.add(Restrictions.eq(\"nik.transferType\", selectedReceiverType));}if (returnedStatus >= 0) {c.add(Restrictions.eq(\"nik.status\", returnedStatus));}if (receiverId > 0) {if (selectedReceiverType == Transfer.PERSONNAL) {c.createAlias(\"transfer.person\", \"per\");c.add(Restrictions.eq(\"per.id\", receiverId));} else if (selectedReceiverType == Transfer.OFFICIAL) {c.createAlias(\"transfer.branchOffice\", \"bro\");c.add(Restrictions.eq(\"bro.id\", receiverId));}}if (!StringUtils.isEmpty(itemName)) {c.add(Restrictions.ilike(\"it.name\", \"%\" + itemName.toLowerCase() + \"%\", MatchMode.ANYWHERE));}c.createAlias(\"it.category\", \"cat\");c.add(Restrictions.eq(\"cat.categoryType\", Category.TYPE_RETURNABLE));if (categoryId > 0) {c.add(Restrictions.eq(\"cat.id\", categoryId));}if (!DateTimeUtils.isEmpty(fromDate)) {c.add(Restrictions.ge(\"addedDate\", fromDate));}if (!DateTimeUtils.isEmpty(toDate)) {c.add(Restrictions.le(\"addedDate\", toDate));}return c.list();}\n", "public void setReturnNumber(String returnNumber) {this.returnNumber = returnNumber;}\n", "public String getReturnnumber() {return returnnumber;}\n"]}
{"name": "HumanEval_145_order_by_points", "description": "Write a function which sorts the given array list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original array list. For example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_0_has_close_elements", "description": "Check if in given array list of numbers, are any two numbers closer to each other than given threshold.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_10_make_palindrome", "description": "Find the shortest palindrome that begins with a supplied string. Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "public static int setRedComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float red) {return (color & 0xff00ffff) | ((int) (red * 255.0f + 0.5f) << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "public static int setGreenComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int green) {return (color & 0xffff00ff) | (green << 8);}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_11_string_xor", "description": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public void getBitmap() {String bitmapString = \"Bitmap (100 x 100) compressed as PNG with quality 100\";assertEquals(bitmapString, CacheDiskStaticUtils.getString(\"bitmap1\", CACHE_DISK_UTILS1));assertEquals(bitmapString, CacheDiskStaticUtils.getString(\"bitmap1\", null, CACHE_DISK_UTILS1));assertNull(CacheDiskStaticUtils.getString(\"bitmap2\", null, CACHE_DISK_UTILS1));assertEquals(bitmapString, CacheDiskStaticUtils.getString(\"bitmap2\", CACHE_DISK_UTILS2));assertEquals(bitmapString, CacheDiskStaticUtils.getString(\"bitmap2\", null, CACHE_DISK_UTILS2));assertNull(CacheDiskStaticUtils.getString(\"bitmap1\", null, CACHE_DISK_UTILS2));}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "private Method similarMethod(final String name, final Class<?>[] types) throws NoSuchMethodException {Class<?> type = type();List<Method> methods = new ArrayList<>();for (Method method : type.getMethods()) {if (isSimilarSignature(method, name, types)) {methods.add(method);}}if (!methods.isEmpty()) {sortMethods(methods);return methods.get(0);}do {for (Method method : type.getDeclaredMethods()) {if (isSimilarSignature(method, name, types)) {methods.add(method);}}if (!methods.isEmpty()) {sortMethods(methods);return methods.get(0);}type = type.getSuperclass();} while (type != null);throw new NoSuchMethodException(\"No similar method \" + name + \" with params \" + Arrays.toString(types) + \" could be found on type \" + type() + \".\");}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static String byte2FitMemorySize(final long byteSize) {if (byteSize < 0) {return \"shouldn't be less than zero!\";} else if (byteSize < MemoryConstants.KB) {return String.format(\"%.3fB\", (double) byteSize);} else if (byteSize < MemoryConstants.MB) {return String.format(\"%.3fKB\", (double) byteSize / MemoryConstants.KB);} else if (byteSize < MemoryConstants.GB) {return String.format(\"%.3fMB\", (double) byteSize / MemoryConstants.MB);} else {return String.format(\"%.3fGB\", (double) byteSize / MemoryConstants.GB);}}\n", "private static String byte2FitMemorySize(final long byteNum) {if (byteNum < 0) {return \"shouldn't be less than zero!\";} else if (byteNum < 1024) {return String.format(Locale.getDefault(), \"%.3fB\", (double) byteNum);} else if (byteNum < 1048576) {return String.format(Locale.getDefault(), \"%.3fKB\", (double) byteNum / 1024);} else if (byteNum < 1073741824) {return String.format(Locale.getDefault(), \"%.3fMB\", (double) byteNum / 1048576);} else {return String.format(Locale.getDefault(), \"%.3fGB\", (double) byteNum / 1073741824);}}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n", "public static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return \"\";UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_139_special_factorial", "description": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For example:", "codematcher_results": ["public static int log2(double x, RoundingMode mode) {checkArgument(x > 0.0 && isFinite(x), \"x must be positive and finite\");int exponent = getExponent(x);if (!isNormal(x)) {return log2(x * IMPLICIT_BIT, mode) - SIGNIFICAND_BITS;}boolean increment;switch(mode) {case UNNECESSARY:checkRoundingUnnecessary(isPowerOfTwo(x));case FLOOR:increment = false;break;case CEILING:increment = !isPowerOfTwo(x);break;case DOWN:increment = exponent < 0 & !isPowerOfTwo(x);break;case UP:increment = exponent >= 0 & !isPowerOfTwo(x);break;case HALF_DOWN:case HALF_EVEN:case HALF_UP:double xScaled = scaleNormalize(x);increment = (xScaled * xScaled) > 2.0;break;default:throw new AssertionError();}return increment ? exponent + 1 : exponent;}\n", "public void init() {AtomicReference<CursorState> cursorState = new AtomicReference<>();MouseMotionAdapter cursorChanger = new MouseMotionAdapter() {;public void mouseMoved(MouseEvent e) {int width = frame.getWidth();int height = frame.getHeight();boolean isNormal = true;WindowEnhance.disableDragable();if (e.getX() <= 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.W_RESIZE_CURSOR));frame.getContentPane().setCursor(new Cursor(Cursor.W_RESIZE_CURSOR));cursorState.set(CursorState.west);isNormal = false;}if (e.getX() >= width - 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.E_RESIZE_CURSOR));frame.getContentPane().setCursor(new Cursor(Cursor.E_RESIZE_CURSOR));cursorState.set(CursorState.east);isNormal = false;}if (e.getY() <= 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.N_RESIZE_CURSOR));cursorState.set(CursorState.north);isNormal = false;}if (e.getX() <= 3 && e.getY() <= 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.NW_RESIZE_CURSOR));cursorState.set(CursorState.nw);isNormal = false;}if (e.getX() >= width - 3 && e.getY() <= 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.NE_RESIZE_CURSOR));cursorState.set(CursorState.ne);isNormal = false;}if (e.getY() >= height - 3) {frame.setCursor(new Cursor(Cursor.S_RESIZE_CURSOR));cursorState.set(CursorState.south);isNormal = false;}if (e.getX() <= 3 && e.getY() >= height - 3) {frame.setCursor(new Cursor(Cursor.SW_RESIZE_CURSOR));cursorState.set(CursorState.sw);isNormal = false;}if (e.getX() >= width - 3 && e.getY() >= height - 3) {frame.setCursor(new Cursor(Cursor.SE_RESIZE_CURSOR));cursorState.set(CursorState.se);isNormal = false;}if (isNormal) {frame.getJMenuBar().setCursor(Cursor.getDefaultCursor());frame.getContentPane().setCursor(Cursor.getDefaultCursor());WindowEnhance.enableDragable();}};public void mouseDragged(MouseEvent e) {if (WindowUtils.isMaximize(frame)) {WindowStateManager.updateStateIcon(frame, false);}if (WindowEnhance.draging || cursorState.get() == null) {return;}switch(cursorState.get()) {case west:frame.setBounds(frame.getX() + (e.getX() - x), frame.getY(), frame.getWidth() - (e.getX() - x), frame.getHeight());break;case east:frame.setBounds(frame.getX(), frame.getY(), frame.getWidth() - (x - e.getX()), frame.getHeight());x = e.getX();break;case north:frame.setBounds(frame.getX(), frame.getY() + (e.getY() - y), frame.getWidth(), frame.getHeight() - (e.getY() - y));break;case nw:frame.setBounds(frame.getX() + (e.getX() - x), frame.getY() + (e.getY() - y), frame.getWidth() - (e.getX() - x), frame.getHeight() - (e.getY() - y));break;case ne:frame.setBounds(frame.getX(), frame.getY() + (e.getY() - y), frame.getWidth() - (x - e.getX()), frame.getHeight() - (e.getY() - y));x = e.getX();break;case south:frame.setBounds(frame.getX(), frame.getY(), frame.getWidth(), frame.getHeight() - (y - e.getY()));y = e.getY();break;case sw:frame.setBounds(frame.getX() + (e.getX() - x), frame.getY(), frame.getWidth() - (e.getX() - x), frame.getHeight() - (y - e.getY()));break;case se:frame.setBounds(frame.getX(), frame.getY(), frame.getWidth() - (x - e.getX()), frame.getHeight() - (y - e.getY()));x = e.getX();break;}WindowStateManager.saveWindowState(frame);}};MouseAdapter windowChanger = new MouseAdapter() {;public void mousePressed(MouseEvent e) {x = e.getX();y = e.getY();}};frame.getContentPane().addMouseListener(windowChanger);frame.getContentPane().addMouseMotionListener(cursorChanger);frame.getJMenuBar().addMouseListener(windowChanger);frame.getJMenuBar().addMouseMotionListener(cursorChanger);}\n", "public void bind(RichQuestionHolder holder) {final Context context = holder.itemView.getContext();glide.load(post.getAvatarUrl()).bitmapTransform(bitmapTransformation).placeholder(R.drawable.ic_player_72dp).into(holder.ivUserAvatar);holder.tvUsername.setText(post.getUsername());holder.tvTime.setTimeStamp(post.getCreated().getTime() / 1000);holder.tvBounty.setVisibility(post.getBounty() == 0 ? View.GONE : View.VISIBLE);holder.tvBounty.setText(String.valueOf(post.getBounty()));holder.tvContent.setText(isNormal() ? ReadMoreUtil.addReadMore(context, post.getContent(), 190) : post.getContent());final int w = isNormal() ? 80 : 320;final int h = isNormal() ? 80 : 180;if (isNormal()) {glide.load(post.getMedias().get(0).getThumbSizeUrl()).asBitmap().override(w, h).diskCacheStrategy(DiskCacheStrategy.ALL).centerCrop().into(new SimpleTarget<Bitmap>() {;public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) {RoundedBitmapDrawable rbd = RoundedBitmapDrawableFactory.create(context.getResources(), resource);rbd.setCornerRadius(6f);holder.ivContentImage.setImageDrawable(rbd);}});} else {glide.load(post.getMedias().get(0).getMediumSizeUrl()).override(w, h).into(holder.ivContentImage);}holder.tvComment.setText(CountUtil.formatCount(post.getCommentCount()));if (isNormal()) {ConstraintLayout cl = (ConstraintLayout) holder.itemView;holder.itemView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {;public boolean onPreDraw() {int layoutRes = isContentTextExceedsImage(holder) ? R.id.tv_item_feed_rich_content : R.id.iv_item_feed_rich_cover;set.clone(cl);set.connect(R.id.tv_item_feed_share, ConstraintSet.TOP, layoutRes, ConstraintSet.BOTTOM, 0);set.applyTo(cl);holder.itemView.getViewTreeObserver().removeOnPreDrawListener(this);return true;}});}holder.voteView.setVoteCount(post.getVoteCount());holder.voteView.setVoteDirection(post.getVoteDir());final int drawableIconRes = isSelf() ? R.drawable.ic_more_vert_black_24dp : R.drawable.ic_bookmark_black_24dp;holder.ibOptions.setImageDrawable(AppCompatResources.getDrawable(context, drawableIconRes));if (!isSelf()) {final int colorRes = post.isBookmarked() ? R.color.primary : android.R.color.secondary_text_dark;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, colorRes), PorterDuff.Mode.SRC_IN);}if (holder.tagContainer != null) {Stream.of(post.getTagNames()).forEach(tagName -> {final TextView tag = new TextView(YolooApp.getAppContext());tag.setText(context.getString(R.string.label_tag, tagName));tag.setGravity(Gravity.CENTER);tag.setPadding(16, 10, 16, 10);TextViewUtil.setTextAppearance(tag, context, R.style.TextAppearance_AppCompat);holder.tagContainer.addView(tag);});}tintDrawables(holder, context);holder.ivUserAvatar.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));holder.tvUsername.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));if (onItemClickListener != null && post.shouldShowReadMore()) {holder.itemView.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));holder.tvContent.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));}holder.tvShare.setOnClickListener(v -> onShareClickListener.onShareClick(v, post));holder.tvComment.setOnClickListener(v -> onCommentClickListener.onCommentClick(v, post));holder.ibOptions.setOnClickListener(v -> {if (isSelf()) {onPostOptionsClickListener.onPostOptionsClick(v, this, post);} else {final int reversedColorRes = post.isBookmarked() ? android.R.color.secondary_text_dark : R.color.primary;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, reversedColorRes), PorterDuff.Mode.SRC_IN);post.setBookmarked(!post.isBookmarked());onBookmarkClickListener.onBookmarkClick(post.getId(), post.isBookmarked());}});holder.voteView.setOnVoteEventListener(direction -> {post.setVoteDir(direction);onVoteClickListener.onVoteClick(post.getId(), direction, OnVoteClickListener.Type.POST);});holder.ivContentImage.setOnClickListener(v -> {if (VersionUtil.hasL()) {holder.ivContentImage.setTransitionName(\"transition.\" + post.getMedias().get(0).getId());}onContentImageClickListener.onContentImageClick(v, post.getMedias().get(0));});}\n", "public void bind(QuestionHolder holder) {final Context context = holder.itemView.getContext();glide.load(post.getAvatarUrl().replace(\"s96-c\", \"s64-c-rw\")).bitmapTransform(bitmapTransformation).placeholder(R.drawable.ic_player_72dp).into(holder.ivUserAvatar);holder.tvUsername.setText(post.getUsername());holder.tvTime.setTimeStamp(post.getCreated().getTime() / 1000);holder.tvBounty.setVisibility(post.getBounty() == 0 ? View.GONE : View.VISIBLE);holder.tvBounty.setText(String.valueOf(post.getBounty()));holder.tvContent.setText(isNormal() ? ReadMoreUtil.addReadMore(context, post.getContent(), 200) : post.getContent());holder.tvComment.setText(CountUtil.formatCount(post.getCommentCount()));holder.voteView.setVoteCount(post.getVoteCount());holder.voteView.setVoteDirection(post.getVoteDir());final int drawableIconRes = isSelf() ? R.drawable.ic_more_vert_black_24dp : R.drawable.ic_bookmark_black_24dp;holder.ibOptions.setImageDrawable(AppCompatResources.getDrawable(context, drawableIconRes));if (!isSelf()) {final int colorRes = post.isBookmarked() ? R.color.primary : android.R.color.secondary_text_dark;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, colorRes), PorterDuff.Mode.SRC_IN);}if (holder.tagContainer != null) {Stream.of(post.getTagNames()).forEach(tagName -> {final TextView tag = new TextView(YolooApp.getAppContext());tag.setText(context.getString(R.string.label_tag, tagName));tag.setGravity(Gravity.CENTER);tag.setPadding(16, 10, 16, 10);TextViewUtil.setTextAppearance(tag, context, R.style.TextAppearance_AppCompat);holder.tagContainer.addView(tag);});}tintDrawables(holder, context);if (VersionUtil.hasL()) {holder.ivUserAvatar.setTransitionName(context.getResources().getString(R.string.transition_avatar));holder.tvUsername.setTransitionName(context.getResources().getString(R.string.transition_username, post.getOwnerId()));}holder.ivUserAvatar.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));holder.tvUsername.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));if (onItemClickListener != null && post.shouldShowReadMore()) {holder.itemView.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));holder.tvContent.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));}holder.tvShare.setOnClickListener(v -> onShareClickListener.onShareClick(v, post));holder.tvComment.setOnClickListener(v -> onCommentClickListener.onCommentClick(v, post));holder.ibOptions.setOnClickListener(v -> {if (isSelf()) {onPostOptionsClickListener.onPostOptionsClick(v, this, post);} else {final int reversedColorRes = post.isBookmarked() ? android.R.color.secondary_text_dark : R.color.primary;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, reversedColorRes), PorterDuff.Mode.SRC_IN);post.setBookmarked(!post.isBookmarked());onBookmarkClickListener.onBookmarkClick(post.getId(), post.isBookmarked());}});holder.voteView.setOnVoteEventListener(direction -> {post.setVoteDir(direction);onVoteClickListener.onVoteClick(post.getId(), direction, OnVoteClickListener.Type.POST);});}\n", "public static void main(String[] args) throws IOException {int n = readInt();for (int x@ x = 0@ x < n++){String next = readLine();String[] s = next.split(\" \");boolean isRare = false, isSet = false, isMagic = false, isNormal = false;if (s.length == 2) {isRare = true;if (!s[0].equalsIgnoreCase(\"of\"))isMagic = true;}if (s.length >= 3 && s.length <= 4 && next.length() >= 2 && s[s.length - 2].equalsIgnoreCase(\"of\")) {isMagic = true;}if (s.length > 0) {String first = s[0];if (first.length() >= 2 && first.substring(first.length() - 2).equalsIgnoreCase(\"'s\"))isSet = true;if (first.equalsIgnoreCase(\"damaged\"))isNormal = true;}if ((!isRare && !isSet && !isMagic))isNormal = true;if (isSet) {System.out.println(\"Set\");} else if (isNormal) {System.out.println(\"Normal\");} else if (isRare && isMagic) {System.out.println(\"Not sure, take anyways\");} else if (isRare) {System.out.println(\"Rare\");} else if (isMagic) {System.out.println(\"Magic\");}}}\n", "public void bind(BlogHolder holder) {final Context context = holder.itemView.getContext();glide.load(post.getAvatarUrl()).bitmapTransform(bitmapTransformation).placeholder(R.drawable.ic_player_72dp).into(holder.ivUserAvatar);holder.tvUsername.setText(post.getUsername());holder.tvTime.setTimeStamp(post.getCreated().getTime() / 1000);holder.tvBounty.setVisibility(View.GONE);holder.tvTitle.setText(post.getTitle());holder.tvContent.setText(isNormal() ? ReadMoreUtil.addReadMore(context, post.getContent(), 135) : post.getContent());glide.load(post.getMedias().get(0).getMediumSizeUrl()).into(holder.ivBlogCover);holder.tvComment.setText(CountUtil.formatCount(post.getCommentCount()));holder.voteView.setVoteCount(post.getVoteCount());holder.voteView.setVoteDirection(post.getVoteDir());final int drawableIconRes = isSelf() ? R.drawable.ic_more_vert_black_24dp : R.drawable.ic_bookmark_black_24dp;holder.ibOptions.setImageDrawable(AppCompatResources.getDrawable(context, drawableIconRes));if (!isSelf()) {final int colorRes = post.isBookmarked() ? R.color.primary : android.R.color.secondary_text_dark;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, colorRes), PorterDuff.Mode.SRC_IN);}if (holder.tagContainer != null) {Stream.of(post.getTagNames()).forEach(tagName -> {final TextView tag = new TextView(YolooApp.getAppContext());tag.setText(context.getString(R.string.label_tag, tagName));tag.setGravity(Gravity.CENTER);tag.setPadding(16, 10, 16, 10);TextViewUtil.setTextAppearance(tag, context, R.style.TextAppearance_AppCompat);holder.tagContainer.addView(tag);});}tintDrawables(holder, context);holder.ivUserAvatar.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));holder.tvUsername.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));if (onItemClickListener != null && post.shouldShowReadMore()) {holder.itemView.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));}holder.tvShare.setOnClickListener(v -> onShareClickListener.onShareClick(v, post));holder.tvComment.setOnClickListener(v -> onCommentClickListener.onCommentClick(v, post));holder.ibOptions.setOnClickListener(v -> {if (isSelf()) {onPostOptionsClickListener.onPostOptionsClick(v, this, post);} else {final int reversedColorRes = post.isBookmarked() ? android.R.color.secondary_text_dark : R.color.primary;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, reversedColorRes), PorterDuff.Mode.SRC_IN);post.setBookmarked(!post.isBookmarked());onBookmarkClickListener.onBookmarkClick(post.getId(), post.isBookmarked());}});holder.voteView.setOnVoteEventListener(direction -> {post.setVoteDir(direction);onVoteClickListener.onVoteClick(post.getId(), direction, OnVoteClickListener.Type.POST);});}\n", "public Throwable apply(final Throwable chain) {int limit = 0;Throwable root = chain;Throwable high = null;Throwable normal = null;for (Throwable cause = chaincause != nullcause = cause.getCause()) {root = cause;if (isNormal(cause)) {normal = cause;}if (normal == null && cause instanceof Error) {high = cause;}if (++limit == (1 << 16)) {break;}}return high != null ? high : normal != null ? normal : root;}\n", "public void reset() {final int position = sb.getProgress();if (position != 0) {ValueAnimator animator = ValueAnimator.ofFloat(1f, 0);animator.setDuration(animeTime).start();animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {;public void onAnimationUpdate(ValueAnimator animation) {float f = (Float) animation.getAnimatedValue();sb.setProgress((int) (position * f));}});}tipsShowAnime(false);tips2ShowAnime(true);sb.setEnabled(true);ivBlock.setVisibility(GONE);vFlash.setVisibility(GONE);ivCover.setImageBitmap(completeCover);isNormal = true;}\n", "public boolean isBoth(String id) {return isRelational(id) && isNormal(id);}\n", "public boolean normal() {return isNormal;}\n"]}
{"name": "HumanEval_122_add_elements", "description": "Given a non-empty array array list of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. Example:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean isValid(@NonNull View view, @IntRange(from = 0) long duration) {long curTime = System.currentTimeMillis();Object tag = view.getTag(TAG_KEY);if (!(tag instanceof Long)) {view.setTag(TAG_KEY, curTime);return true;}long preTime = (Long) tag;if (curTime - preTime <= duration)return false;view.setTag(TAG_KEY, curTime);return true;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_46_fib4", "description": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "public static int setRedComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float red) {return (color & 0xff00ffff) | ((int) (red * 255.0f + 0.5f) << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "public static int setGreenComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int green) {return (color & 0xffff00ff) | (green << 8);}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_104_unique_digits", "description": "Given an array array list of positive integers x. return a sorted array list of all elements that hasn't any even digit. Note: Returned array list should be sorted in increasing order. For example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n"]}
{"name": "HumanEval_117_select_words", "description": "Given a string s and a natural number n, you have been tasked to implement a function that returns an array array list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty array list. Note: you may assume the input string contains only letters and spaces. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_72_will_it_fly", "description": "Write a function that returns true if the object q will fly, and false otherwise. The object q will fly if it's balanced (it is a palindromic array list) and the sum of its elements is less than or equal the maximum possible weight w. Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_55_fib", "description": "Return n-th Fibonacci number.", "codematcher_results": ["public String toString() {return \"ImageEntity{\" + \"col='\" + col + '\\'' + \", tag='\" + tag + '\\'' + \", tag3='\" + tag3 + '\\'' + \", sort='\" + sort + '\\'' + \", totalNum=\" + totalNum + \", startIndex=\" + startIndex + \", returnNumber=\" + returnNumber + \", imgs=\" + imgs + '}';}\n", "private void injectJS(WebView webView) {if (legacyMode) {injectJSOld(webView);return;}try {webView.loadUrl(\"javascript:\" + \"var linksLength = document.head.getElementsByTagName('link').length\" + \"for(var i=0i<linksLengthi++){document.head.getElementsByTagName('link')[0].remove()}\" + \"var isInGame = false\" + \"var isVerified = false\" + \"function isSmashing(returnNumber){if(isInGame){if(isVerified){return 'gv'+returnNumber}else{return 'g'+returnNumber}}return returnNumber}\" + \"function takeNextStep(gamePin,name,answer,returnVal,verify){if($('#inputSession').length==1){isVerified=falseisInGame=false$('#inputSession').val(gamePin)$('#inputSession').trigger('change')setTimeout(function(){$('#inputSession').submit()},10)}else if($('#username').length == 1){isInGame = true$('#username').val(name)$('#username').trigger('change')setTimeout(function(){$('#username').submit()},10)}else if($('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--0').length!=0){isVerified=falseif(verify==''){return 'v'+returnVal}else if($('.two-factor-auth__sub-heading.ng-binding').html() != 'Match the pattern on screen'){return 'i'+returnVal}else{for(var i=0i<4i++){$('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--' + verify[i]).mousedown()}}} else if($('.answer').length!=0){isVerified=true$('.answer.answer'+answer).mousedown()}else{isVerified=true}return 'n'+returnVal}\");} catch (Exception e) {e.printStackTrace();}}\n", "void capturePoint(Vector3D beamOrigin, Vector3D beamDir, double distance, double intensity, double echo_width, int returnNumber, int pulseReturnNumber, int fullwaveIndex, String hitObjectId, int classification) {if (distance < detector.cfg_device_rangeMin_m) {return;}double precision = this.detector.cfg_device_accuracy_m / 2;double error = -precision + Math.random() * (precision * 2);error += boxMullerRandom(0.0, this.detector.cfg_device_accuracy_m / 2);distance += error;Vector3D pointPos = beamOrigin.add(beamDir.scalarMultiply(distance));Measurement m = new Measurement();m.position = pointPos;m.distance = distance;m.intensity = intensity;m.echo_width = echo_width;m.returnNumber = returnNumber;m.pulseReturnNumber = pulseReturnNumber;m.fullwaveIndex = fullwaveIndex;m.beamOrigin = beamOrigin;m.beamDirection = beamDir;m.hitObjectId = hitObjectId;m.classification = classification;detector.writeMeasurement(m);detector.mBuffer.add(m);}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");}if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");}String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG)Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));if ((nanpState == NP_NANP_LOCAL) || (nanpState == NP_NANP_AREA_LOCAL) || (nanpState == NP_NANP_NDD_AREA_LOCAL)) {return networkPortionNumber;} else if (nanpState == NP_NANP_NBPCD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK) {return networkPortionNumber.substring(1);} else {return networkPortionNumber;}} else if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK) {return networkPortionNumber;} else if (networkType == GSM_UMTS_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return PLUS_SIGN + networkPortionNumber.substring(iddLength);} else if (networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return networkPortionNumber.substring(iddLength);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG)Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK) {returnNumber = networkPortionNumber.substring(1);}break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(1);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK || networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;returnNumber = NANP_IDD + networkPortionNumber.substring(iddLength);}break;case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!inExceptionListForNpCcAreaLocal(numberEntry) && networkPortionNumber.length() >= 11 && countryCode != NANP_CC) {returnNumber = NANP_IDD + networkPortionNumber;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK)) {if (networkPortionNumber.startsWith(PLUS_SIGN + NANP_IDD)) {returnNumber = networkPortionNumber.substring(1);} else {returnNumber = NANP_IDD + networkPortionNumber.substring(1);}}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");} else if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");} else {String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG) {Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));}if (nanpState == NP_NANP_LOCAL || nanpState == NP_NANP_AREA_LOCAL || nanpState == NP_NANP_NDD_AREA_LOCAL) {return networkPortionNumber;}if (nanpState != NP_NANP_NBPCD_CC_AREA_LOCAL) {if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == NP_NANP_LOCAL) {return networkPortionNumber;}if (networkType == 0) {return PLUS_SIGN + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);} else if (networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG) {Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));}String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == 0) {returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == 0 || networkType == NP_NANP_AREA_LOCAL) {returnNumber = NANP_IDD + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);break;}case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!(inExceptionListForNpCcAreaLocal(numberEntry) || networkPortionNumber.length() < NANP_LONG_LENGTH || countryCode == NP_NANP_LOCAL)) {returnNumber = NANP_IDD + networkPortionNumber;break;}default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL)) {if (!networkPortionNumber.startsWith(\"+011\")) {returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;}returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;} else if (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(NP_NANP_LOCAL);} else {return networkPortionNumber;}}}\n", "private static String getLineNumber(Finding finding) {String returnNumber = null;if (finding.getEntryPointLineNumber() != -1) {returnNumber = finding.getEntryPointLineNumber().toString();} else if (finding.getDataFlowElements() != null && !finding.getDataFlowElements().isEmpty()) {returnNumber = String.valueOf(finding.getDataFlowElements().get(0).getLineNumber());}return returnNumber;}\n", "public static final List itemReturnQuery(String itemName, int categoryId, int selectedReceiverType, int receiverId, int returnedStatus, String transferNumber, String returnNumber, Date fromDate, Date toDate) throws Exception {Criteria c = getSession().createCriteria(ItemReturn.class);c.add(Restrictions.eq(\"dFlag\", 1));c.createAlias(\"transfer\", \"nik\");c.createAlias(\"transfer.item\", \"it\");if (!StringUtils.isEmpty(transferNumber)) {c.add(Restrictions.eq(\"nik.transferPanaNumber\", transferNumber));}if (!StringUtils.isEmpty(returnNumber)) {c.add(Restrictions.eq(\"returnNumber\", returnNumber));}if (selectedReceiverType > 0) {c.add(Restrictions.eq(\"nik.transferType\", selectedReceiverType));}if (returnedStatus >= 0) {c.add(Restrictions.eq(\"nik.status\", returnedStatus));}if (receiverId > 0) {if (selectedReceiverType == Transfer.PERSONNAL) {c.createAlias(\"transfer.person\", \"per\");c.add(Restrictions.eq(\"per.id\", receiverId));} else if (selectedReceiverType == Transfer.OFFICIAL) {c.createAlias(\"transfer.branchOffice\", \"bro\");c.add(Restrictions.eq(\"bro.id\", receiverId));}}if (!StringUtils.isEmpty(itemName)) {c.add(Restrictions.ilike(\"it.name\", \"%\" + itemName.toLowerCase() + \"%\", MatchMode.ANYWHERE));}c.createAlias(\"it.category\", \"cat\");c.add(Restrictions.eq(\"cat.categoryType\", Category.TYPE_RETURNABLE));if (categoryId > 0) {c.add(Restrictions.eq(\"cat.id\", categoryId));}if (!DateTimeUtils.isEmpty(fromDate)) {c.add(Restrictions.ge(\"addedDate\", fromDate));}if (!DateTimeUtils.isEmpty(toDate)) {c.add(Restrictions.le(\"addedDate\", toDate));}return c.list();}\n", "public void setReturnNumber(String returnNumber) {this.returnNumber = returnNumber;}\n", "public String getReturnnumber() {return returnnumber;}\n", "public void setReturnnumber(String returnnumber) {this.returnnumber = returnnumber;}\n"]}
{"name": "HumanEval_153_Strongest_Extension", "description": "You will be given the name of a class (a string) and an array array list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the array list. For example, if you are given \"Slices\" as the class and an array array list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1). Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_119_match_parens", "description": "You are given an array array list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_90_next_smallest", "description": "You are given an array array list of integers. Write a function next_smallest() that returns the 2nd smallest element of the array list. Return null if there is no such element.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_92_any_int", "description": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. Examples", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_2_truncate_number", "description": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static String encode(byte[] binaryData) {if (binaryData == null) {return null;}int lengthDataBits = binaryData.length * EIGHTBIT;if (lengthDataBits == 0) {return \"\";}int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;int numberQuartet = fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;char[] encodedData = null;encodedData = new char[numberQuartet * 4];byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;int encodedIndex = 0;int dataIndex = 0;if (fDebug) {System.out.println(\"number of triplets = \" + numberTriplets);}for (int i@ i = 0@ i < numberTriplets++){b1 = binaryData[dataIndex++];b2 = binaryData[dataIndex++];b3 = binaryData[dataIndex++];if (fDebug) {System.out.println(\"b1= \" + b1 + \", b2= \" + b2 + \", b3= \" + b3);}l = (byte) (b2 & 0x0f);k = (byte) (b1 & 0x03);byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4) : (byte) ((b2) >> 4 ^ 0xf0);byte val3 = ((b3 & SIGN) == 0) ? (byte) (b3 >> 6) : (byte) ((b3) >> 6 ^ 0xfc);if (fDebug) {System.out.println(\"val2 = \" + val2);System.out.println(\"k4 = \" + (k << 4));System.out.println(\"vak = \" + (val2 | (k << 4)));}encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];encodedData[encodedIndex++] = lookUpBase64Alphabet[(l << 2) | val3];encodedData[encodedIndex++] = lookUpBase64Alphabet[b3 & 0x3f];}if (fewerThan24bits == EIGHTBIT) {b1 = binaryData[dataIndex];k = (byte) (b1 & 0x03);if (fDebug) {System.out.println(\"b1=\" + b1);System.out.println(\"b1<<2 = \" + (b1 >> 2));}byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];encodedData[encodedIndex++] = lookUpBase64Alphabet[k << 4];encodedData[encodedIndex++] = PAD;encodedData[encodedIndex++] = PAD;} else if (fewerThan24bits == SIXTEENBIT) {b1 = binaryData[dataIndex];b2 = binaryData[dataIndex + 1];l = (byte) (b2 & 0x0f);k = (byte) (b1 & 0x03);byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4) : (byte) ((b2) >> 4 ^ 0xf0);encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];encodedData[encodedIndex++] = lookUpBase64Alphabet[l << 2];encodedData[encodedIndex++] = PAD;}return new String(encodedData);}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "public NdefRecord[] createRecords() {NdefRecord[] records = new NdefRecord[messagesToSendArray.size() + 1];if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {for (int i@ i = 0@ i < messagesToSendArray.size()++){byte[] payload = messagesToSendArray.get(i).getBytes(Charset.forName(\"UTF-8\"));NdefRecord record = new NdefRecord(//Our 3-bit Type name formatNdefRecord.TNF_WELL_KNOWN, //Description of our payloadNdefRecord.RTD_TEXT, //The optional id for our Recordnew byte[0], //Our payload for the Recordpayload);records[i] = record;}} else //Api is high enough that we can use createMime, which is preferred.{for (int i@ i = 0@ i < messagesToSendArray.size()++){byte[] payload = messagesToSendArray.get(i).getBytes(Charset.forName(\"UTF-8\"));NdefRecord record = NdefRecord.createMime(\"text/plain\", payload);records[i] = record;}}records[messagesToSendArray.size()] = NdefRecord.createApplicationRecord(PACKAGE_NAME);return records;}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static String byte2FitMemorySize(final long byteSize) {if (byteSize < 0) {return \"shouldn't be less than zero!\";} else if (byteSize < MemoryConstants.KB) {return String.format(\"%.3fB\", (double) byteSize);} else if (byteSize < MemoryConstants.MB) {return String.format(\"%.3fKB\", (double) byteSize / MemoryConstants.KB);} else if (byteSize < MemoryConstants.GB) {return String.format(\"%.3fMB\", (double) byteSize / MemoryConstants.MB);} else {return String.format(\"%.3fGB\", (double) byteSize / MemoryConstants.GB);}}\n", "private static String byte2FitMemorySize(final long byteNum) {if (byteNum < 0) {return \"shouldn't be less than zero!\";} else if (byteNum < 1024) {return String.format(Locale.getDefault(), \"%.3fB\", (double) byteNum);} else if (byteNum < 1048576) {return String.format(Locale.getDefault(), \"%.3fKB\", (double) byteNum / 1024);} else if (byteNum < 1073741824) {return String.format(Locale.getDefault(), \"%.3fMB\", (double) byteNum / 1048576);} else {return String.format(Locale.getDefault(), \"%.3fGB\", (double) byteNum / 1073741824);}}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n", "public static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return \"\";UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_42_incr_list", "description": "Return array list with elements incremented by 1.", "codematcher_results": ["public static void main(String[] a) {final CountDownLatch firstLatch = new CountDownLatch(1);final CountDownLatch secondLatch = new CountDownLatch(1);final BuildFactory.Builder builder = new BuildFactory.Builder();CopyOnWriteArrayList<BuildFactory> elements = new CopyOnWriteArrayList<>();elements.add(builder.name(\"myth\").addr(\"local\").build());elements.add(builder.name(\"roll\").addr(\"remote\").build());ReentrantLock lock = new ReentrantLock();ElementList<BuildFactory> list = new ElementList<>(elements, lock, \"list1 > \");ElementList<BuildFactory> list2 = new ElementList<>(elements, lock, \"list2 > \");Thread thread1 = new Thread(() -> {System.out.println(\"进入 线程 1\");elements.add(builder.name(\"dyn 1\").addr(\"89\").build());list.prep();firstLatch.countDown();try {secondLatch.await();} catch (InterruptedException e) {System.out.println(\"first inter error\");}list.listElement(\"first \");});Thread thread2 = new Thread(() -> {System.out.println(\"进入 线程 2\");try {Thread.sleep(2000);firstLatch.await();elements.add(builder.name(\"dyn 2\").addr(\"00\").build());list2.prep();secondLatch.countDown();} catch (InterruptedException e) {System.out.println(\"second inter error\");}list2.listElement(\"second\");});thread1.start();thread2.start();}\n", "public static ListElement list(InlineElement... elements) {return new ListElement(Arrays.asList(elements));}\n", "public List() {start = new ListElement(\"Kopf\");}\n", "public List<RuleOutput> sort(List<RuleOutput> matchedResults) {if (matchedResults == null || matchedResults.isEmpty()) {return matchedResults;}Object listElement = ((InterpretedRuleOutput) matchedResults.get(0)).getResult();if (listElement instanceof Pair) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) interpretedRule.getResult());});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, decisionPairs.get(i)));}return (List) newList;} else if (listElement instanceof Context) {Context skeleton = (Context) listElement;List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, new Context()));}for (Object key : skeleton.keySet()) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) ((Context) interpretedRule.getResult()).get(key));});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());for (int i@ i = 0@ i < decisionPairs.size()++){((Context) newList.get(i).getResult()).put(key, decisionPairs.get(i));}}return (List) newList;} else {return matchedResults;}}\n", "public static GirlListModel parse(Element listElement, int type) {GirlListModel listModel = new GirlListModel(type);if (listElement != null) {Elements girlElements = listElement.children();for (Element girlElement : girlElements) {GirlModel girlModel = GirlModel.parse(girlElement, type);listModel.getList().add(girlModel);}}Logger.log(\"GirlListModel parse... \" + listModel.getList().size());return listModel;}\n", "public static PicListModel parse(Element listElement) throws Exception {PicListModel picListModel = new PicListModel();if (listElement != null) {for (Element picElement : listElement.children()) {PicModel picModel = PicModel.parse(picElement);picListModel.getList().add(picModel);}}return picListModel;}\n", "public void addDir(File target) {if (target == null) {return;}File setDir = target.getParentFile();if (target.isDirectory()) {setDir = target;}for (File listElement : searchTargetList) {if (setDir.getPath().equals(listElement.getPath())) {return;}}searchTargetList.add(setDir);searchTargetMap = null;mibValueCache = new MibValueCache();}\n", "public void delete(int n) {if (n < 1) {return;}ListElement nth = findIndex(n);if (nth == null) {return;}ListElement pre = findIndex(n - 1);pre.next = nth.next;}\n", "public void format(ListElement element) {String[] inlineElements = element.getEntries().stream().map(el -> {Formatter formatter = newInstance();el.format(formatter);return formatter.finalizeFormatting();}).toArray(String[]::new);formatList(state, inlineElements);}\n", "public void returnAListOfElementsByClassName() {List<WebElement> elements;elements = driver.findElements(By.className(\"normal\"));Set<String> foundTags = new HashSet<String>();for (WebElement e : elements) {foundTags.add(e.getTagName().toLowerCase());}assertTrue(\"expected p tag\", foundTags.contains(\"p\"));assertTrue(\"expected ul tag\", foundTags.contains(\"ul\"));assertTrue(\"expected li tag\", foundTags.contains(\"li\"));assertTrue(\"expected a tag\", foundTags.contains(\"a\"));assertFalse(\"did not expect div tag\", foundTags.contains(\"div\"));}\n"]}
{"name": "HumanEval_150_x_or_y", "description": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise. Examples:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_49_modp", "description": "Return 2^n modulo p (be aware of numerics).", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_155_even_odd_count", "description": "Given an integer. return a pair that has the number of even and odd digits respectively. Example:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_80_is_happy", "description": "You are given a string s. Your task is to check if the string is hapjava or not. A string is hapjava if its length is at least 3 and every 3 consecutive letters are distinct For example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_59_largest_prime_factor", "description": "Return the largest prime factor of n. Assume n > 1 and is not a prime.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_66_digitSum", "description": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_21_rescale_to_unit", "description": "Given array list of numbers (of at least two elements), apply a linear transform to that array list, such that the smallest number will become 0 and the largest will become 1", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "public static int setRedComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float red) {return (color & 0xff00ffff) | ((int) (red * 255.0f + 0.5f) << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_121_solution", "description": "Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions. Examples", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_68_pluck", "description": "\"Given an array array list representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in an array array list, [ smalest_value, its index ], If there are no even values or the given array array list is empty, return []. Example 1:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_147_get_max_triples", "description": "You are given a positive integer n. You have to create an integer array array list a of length n. For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3. Example :", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static String ccs2Pinyin(final CharSequence ccs, final CharSequence split) {if (ccs == null || ccs.length() == 0)return null;StringBuilder sb = new StringBuilder();for (int i@ i = 0, len = ccs.length()@ i < len++){char ch = ccs.charAt(i);if (ch >= 0x4E00 && ch <= 0x9FA5) {int sp = (ch - 0x4E00) * 6;sb.append(pinyinTable.substring(sp, sp + 6).trim());} else {sb.append(ch);}sb.append(split);}return sb.toString();}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_110_exchange", "description": "In this problem, you will implement a function that takes two array lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 an array array list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\". For example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_47_median", "description": "Return median of elements in the array list l.", "codematcher_results": ["ElementArrayList(ArrayList<Element> elements, ReentrantLock lock, String name) {this.elements = elements;this.lock = lock;this.name = name;}\n", "private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_82_prime_length", "description": "Write a function that takes a string and returns true if the string length is a prime number or false otherwise Examples", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_73_smallest_change", "description": "Given an array array list arr of integers, find the minimum number of elements that need to be changed to make the array array list palindromic. A palindromic array array list is an array array list that is read the same backwards and forwards. In one change, you can change one element to any other element. For example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_133_sum_squares", "description": "You are given an array array list of numbers. You need to return the sum of squared numbers in the given array list, round each element in the array list to the upper int(Ceiling) first. Examples:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_141_file_name_check", "description": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll'] Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_40_triples_sum_to_zero", "description": "triples_sum_to_zero takes an array array list of integers as an input. it returns true if there are three distinct elements in the array list that sum to zero, and false otherwise.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_127_intersection", "description": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\". [input/output] samples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_1_separate_paren_groups", "description": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the array list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_152_compare", "description": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two array array lists of scores and guesses of equal length, where each index shows a match. Return an array array list of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score. example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_83_starts_one_ends", "description": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_134_check_if_last_char_is_a_letter", "description": "Create a function that returns true if the last character of a given string is an alphabetical character and is not a part of a word, and false otherwise. Note: \"word\" is a group of characters separated by space. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_124_valid_date", "description": "You have to write a function which validates a given date string and returns true if the date is valid otherwise false. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_108_count_nums", "description": "Write a function count_nums which takes an array array list of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_86_anti_shuffle", "description": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence. For example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "private ZipUtils() {throw new UnsupportedOperationException(\"u can't instantiate me...\");}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static File getFileByPath(final String filePath) {return isSpace(filePath) ? null : new File(filePath);}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_48_is_palindrome", "description": "Checks if given string is a palindrome", "codematcher_results": ["public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public boolean checkStringIsNull(final List<VerifyInfo> verifyInfoList) {int count = 0;for (int i@ i = 0@ i < verifyInfoList.size()++){if (TextUtils.isEmpty(verifyInfoList.get(i).getMsg())) {Toast.makeText(mActivity, verifyInfoList.get(i).getMsgTip(), Toast.LENGTH_SHORT).show();return false;} else {if (!verifyInfoList.get(i).isSuccess()) {Toast.makeText(mActivity, verifyInfoList.get(i).getIsFailTip(), Toast.LENGTH_SHORT).show();return false;}}count++;}if (count == verifyInfoList.size()) {return true;}return false;}\n", "public static boolean checkStringIsEmpty(String var) {if (var == null)return true;if (var.equals(\"\"))return true;return false;}\n", "public static int checkStringIsEmpty(String... values) {int location = -1;if (values.length == 1) {return values[0].isEmpty() ? 0 : -1;}for (int i@ i = 0, size = values.length@ i < size++){if (values[i].isEmpty()) {return i;}}return location;}\n", "protected static void checkByteStringIsUtf8(ByteString byteString) throws IllegalArgumentException {if (!byteString.isValidUtf8()) {throw new IllegalArgumentException(\"Byte string is not UTF-8.\");}}\n", "private String checkIfStringIsNumeric(String val) {if (val == null || val.isEmpty()) {return val;}return allDigits.matcher(val).matches() ? \"\\\\ \" + val : val;}\n", "public boolean checkStringerCollision(Point3d pos) {return (Math.abs(pos.y) - (mDiameter * 10.0 / 2.0)) < mStringerWidth * 10.0;}\n", "private void checkStringPermissionMap(String project) {Assert.notBlank(project);if (stringPermissionMap == null) {stringPermissionMap = new HashMap<>();}if (!stringPermissionMap.containsKey(project)) {stringPermissionMap.put(project, new HashSet<String>());}}\n", "public void checkFixedStringLookupMissing() {runTest(\"classpath*:BadDefinitions/FixedStringLookupMissing.yaml\", containsString(\"Missing lookup\"));}\n", "public void checkFixedStringLookupMissingvalue() {runTest(\"classpath*:BadDefinitions/FixedStringLookupMissingValue.yaml\", containsString(\"Fixed value\"));}\n"]}
{"name": "HumanEval_118_get_closest_vowel", "description": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only. Example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_31_is_prime", "description": "Return true if a given number is prime, and false otherwise.", "codematcher_results": ["public String toString() {return \"ImageEntity{\" + \"col='\" + col + '\\'' + \", tag='\" + tag + '\\'' + \", tag3='\" + tag3 + '\\'' + \", sort='\" + sort + '\\'' + \", totalNum=\" + totalNum + \", startIndex=\" + startIndex + \", returnNumber=\" + returnNumber + \", imgs=\" + imgs + '}';}\n", "private void injectJS(WebView webView) {if (legacyMode) {injectJSOld(webView);return;}try {webView.loadUrl(\"javascript:\" + \"var linksLength = document.head.getElementsByTagName('link').length\" + \"for(var i=0i<linksLengthi++){document.head.getElementsByTagName('link')[0].remove()}\" + \"var isInGame = false\" + \"var isVerified = false\" + \"function isSmashing(returnNumber){if(isInGame){if(isVerified){return 'gv'+returnNumber}else{return 'g'+returnNumber}}return returnNumber}\" + \"function takeNextStep(gamePin,name,answer,returnVal,verify){if($('#inputSession').length==1){isVerified=falseisInGame=false$('#inputSession').val(gamePin)$('#inputSession').trigger('change')setTimeout(function(){$('#inputSession').submit()},10)}else if($('#username').length == 1){isInGame = true$('#username').val(name)$('#username').trigger('change')setTimeout(function(){$('#username').submit()},10)}else if($('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--0').length!=0){isVerified=falseif(verify==''){return 'v'+returnVal}else if($('.two-factor-auth__sub-heading.ng-binding').html() != 'Match the pattern on screen'){return 'i'+returnVal}else{for(var i=0i<4i++){$('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--' + verify[i]).mousedown()}}} else if($('.answer').length!=0){isVerified=true$('.answer.answer'+answer).mousedown()}else{isVerified=true}return 'n'+returnVal}\");} catch (Exception e) {e.printStackTrace();}}\n", "void capturePoint(Vector3D beamOrigin, Vector3D beamDir, double distance, double intensity, double echo_width, int returnNumber, int pulseReturnNumber, int fullwaveIndex, String hitObjectId, int classification) {if (distance < detector.cfg_device_rangeMin_m) {return;}double precision = this.detector.cfg_device_accuracy_m / 2;double error = -precision + Math.random() * (precision * 2);error += boxMullerRandom(0.0, this.detector.cfg_device_accuracy_m / 2);distance += error;Vector3D pointPos = beamOrigin.add(beamDir.scalarMultiply(distance));Measurement m = new Measurement();m.position = pointPos;m.distance = distance;m.intensity = intensity;m.echo_width = echo_width;m.returnNumber = returnNumber;m.pulseReturnNumber = pulseReturnNumber;m.fullwaveIndex = fullwaveIndex;m.beamOrigin = beamOrigin;m.beamDirection = beamDir;m.hitObjectId = hitObjectId;m.classification = classification;detector.writeMeasurement(m);detector.mBuffer.add(m);}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");}if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");}String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG)Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));if ((nanpState == NP_NANP_LOCAL) || (nanpState == NP_NANP_AREA_LOCAL) || (nanpState == NP_NANP_NDD_AREA_LOCAL)) {return networkPortionNumber;} else if (nanpState == NP_NANP_NBPCD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK) {return networkPortionNumber.substring(1);} else {return networkPortionNumber;}} else if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK) {return networkPortionNumber;} else if (networkType == GSM_UMTS_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return PLUS_SIGN + networkPortionNumber.substring(iddLength);} else if (networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return networkPortionNumber.substring(iddLength);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG)Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK) {returnNumber = networkPortionNumber.substring(1);}break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(1);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK || networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;returnNumber = NANP_IDD + networkPortionNumber.substring(iddLength);}break;case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!inExceptionListForNpCcAreaLocal(numberEntry) && networkPortionNumber.length() >= 11 && countryCode != NANP_CC) {returnNumber = NANP_IDD + networkPortionNumber;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK)) {if (networkPortionNumber.startsWith(PLUS_SIGN + NANP_IDD)) {returnNumber = networkPortionNumber.substring(1);} else {returnNumber = NANP_IDD + networkPortionNumber.substring(1);}}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");} else if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");} else {String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG) {Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));}if (nanpState == NP_NANP_LOCAL || nanpState == NP_NANP_AREA_LOCAL || nanpState == NP_NANP_NDD_AREA_LOCAL) {return networkPortionNumber;}if (nanpState != NP_NANP_NBPCD_CC_AREA_LOCAL) {if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == NP_NANP_LOCAL) {return networkPortionNumber;}if (networkType == 0) {return PLUS_SIGN + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);} else if (networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG) {Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));}String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == 0) {returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == 0 || networkType == NP_NANP_AREA_LOCAL) {returnNumber = NANP_IDD + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);break;}case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!(inExceptionListForNpCcAreaLocal(numberEntry) || networkPortionNumber.length() < NANP_LONG_LENGTH || countryCode == NP_NANP_LOCAL)) {returnNumber = NANP_IDD + networkPortionNumber;break;}default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL)) {if (!networkPortionNumber.startsWith(\"+011\")) {returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;}returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;} else if (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(NP_NANP_LOCAL);} else {return networkPortionNumber;}}}\n", "private static String getLineNumber(Finding finding) {String returnNumber = null;if (finding.getEntryPointLineNumber() != -1) {returnNumber = finding.getEntryPointLineNumber().toString();} else if (finding.getDataFlowElements() != null && !finding.getDataFlowElements().isEmpty()) {returnNumber = String.valueOf(finding.getDataFlowElements().get(0).getLineNumber());}return returnNumber;}\n", "public static final List itemReturnQuery(String itemName, int categoryId, int selectedReceiverType, int receiverId, int returnedStatus, String transferNumber, String returnNumber, Date fromDate, Date toDate) throws Exception {Criteria c = getSession().createCriteria(ItemReturn.class);c.add(Restrictions.eq(\"dFlag\", 1));c.createAlias(\"transfer\", \"nik\");c.createAlias(\"transfer.item\", \"it\");if (!StringUtils.isEmpty(transferNumber)) {c.add(Restrictions.eq(\"nik.transferPanaNumber\", transferNumber));}if (!StringUtils.isEmpty(returnNumber)) {c.add(Restrictions.eq(\"returnNumber\", returnNumber));}if (selectedReceiverType > 0) {c.add(Restrictions.eq(\"nik.transferType\", selectedReceiverType));}if (returnedStatus >= 0) {c.add(Restrictions.eq(\"nik.status\", returnedStatus));}if (receiverId > 0) {if (selectedReceiverType == Transfer.PERSONNAL) {c.createAlias(\"transfer.person\", \"per\");c.add(Restrictions.eq(\"per.id\", receiverId));} else if (selectedReceiverType == Transfer.OFFICIAL) {c.createAlias(\"transfer.branchOffice\", \"bro\");c.add(Restrictions.eq(\"bro.id\", receiverId));}}if (!StringUtils.isEmpty(itemName)) {c.add(Restrictions.ilike(\"it.name\", \"%\" + itemName.toLowerCase() + \"%\", MatchMode.ANYWHERE));}c.createAlias(\"it.category\", \"cat\");c.add(Restrictions.eq(\"cat.categoryType\", Category.TYPE_RETURNABLE));if (categoryId > 0) {c.add(Restrictions.eq(\"cat.id\", categoryId));}if (!DateTimeUtils.isEmpty(fromDate)) {c.add(Restrictions.ge(\"addedDate\", fromDate));}if (!DateTimeUtils.isEmpty(toDate)) {c.add(Restrictions.le(\"addedDate\", toDate));}return c.list();}\n", "public void setReturnNumber(String returnNumber) {this.returnNumber = returnNumber;}\n", "public String getReturnnumber() {return returnnumber;}\n", "public void setReturnnumber(String returnnumber) {this.returnnumber = returnnumber;}\n"]}
{"name": "HumanEval_144_simplify", "description": "Your task is to implement a function that will simplify the expression x * n. The function returns true if x * n evaluates to a whole number and false otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_78_hex_key", "description": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase. Examples:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_143_words_in_sentence", "description": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Example 1:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "private ZipUtils() {throw new UnsupportedOperationException(\"u can't instantiate me...\");}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static File getFileByPath(final String filePath) {return isSpace(filePath) ? null : new File(filePath);}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_111_histogram", "description": "Given a string representing a space separated lowercase letters, return a hash map of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them. Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_87_get_row", "description": "You are given a 2 dimensional data, as a nested array lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the array list, and return array list of pairs, [(x1, y1), (x2, y2) ...] such that each pair is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. Examples:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_123_get_odd_collatz", "description": "Given a positive integer n, return a sorted array list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned array list sorted in increasing order. For example: get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_135_can_arrange", "description": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array array list will not contain duplicate values. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_19_sort_numbers", "description": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean isValid(@NonNull View view, @IntRange(from = 0) long duration) {long curTime = System.currentTimeMillis();Object tag = view.getTag(TAG_KEY);if (!(tag instanceof Long)) {view.setTag(TAG_KEY, curTime);return true;}long preTime = (Long) tag;if (curTime - preTime <= duration)return false;view.setTag(TAG_KEY, curTime);return true;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "public static int setRedComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float red) {return (color & 0xff00ffff) | ((int) (red * 255.0f + 0.5f) << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_65_circular_shift", "description": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_142_sum_squares", "description": "\" This function will take an array array list of integers. For all entries in the array list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the array list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_94_skjkasdkd", "description": "You are given an array array list of integers. You need to find the largest prime value and return the sum of its digits. Examples:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_8_sum_product", "description": "For a given array list of integers, return a pair consisting of a sum and a product of all the integers in an array array list. Empty sum should be equal to 0 and empty product should be equal to 1.", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_102_choose_num", "description": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1. For example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_136_largest_smallest_integers", "description": "Create a function that returns a pair (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in an array array list. If there is no negative or positive integers, return them as null. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_16_count_distinct_characters", "description": "Given a string, find out how many distinct characters (regardless of case) does it consist of", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_100_make_a_pile", "description": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in an array array list, where element at index i represents the number of stones in the level (i+1). Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_128_prod_signs", "description": "You are given an array array list arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array array list, represented by 1, -1 or 0. Note: return null for empty arr. Example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n"]}
{"name": "HumanEval_114_minSubArraySum", "description": "Given an array array list of integers nums, find the minimum sum of any non-empty sub-array array list of nums. Example", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static String encode(byte[] binaryData) {if (binaryData == null) {return null;}int lengthDataBits = binaryData.length * EIGHTBIT;if (lengthDataBits == 0) {return \"\";}int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;int numberQuartet = fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;char[] encodedData = null;encodedData = new char[numberQuartet * 4];byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;int encodedIndex = 0;int dataIndex = 0;if (fDebug) {System.out.println(\"number of triplets = \" + numberTriplets);}for (int i@ i = 0@ i < numberTriplets++){b1 = binaryData[dataIndex++];b2 = binaryData[dataIndex++];b3 = binaryData[dataIndex++];if (fDebug) {System.out.println(\"b1= \" + b1 + \", b2= \" + b2 + \", b3= \" + b3);}l = (byte) (b2 & 0x0f);k = (byte) (b1 & 0x03);byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4) : (byte) ((b2) >> 4 ^ 0xf0);byte val3 = ((b3 & SIGN) == 0) ? (byte) (b3 >> 6) : (byte) ((b3) >> 6 ^ 0xfc);if (fDebug) {System.out.println(\"val2 = \" + val2);System.out.println(\"k4 = \" + (k << 4));System.out.println(\"vak = \" + (val2 | (k << 4)));}encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];encodedData[encodedIndex++] = lookUpBase64Alphabet[(l << 2) | val3];encodedData[encodedIndex++] = lookUpBase64Alphabet[b3 & 0x3f];}if (fewerThan24bits == EIGHTBIT) {b1 = binaryData[dataIndex];k = (byte) (b1 & 0x03);if (fDebug) {System.out.println(\"b1=\" + b1);System.out.println(\"b1<<2 = \" + (b1 >> 2));}byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];encodedData[encodedIndex++] = lookUpBase64Alphabet[k << 4];encodedData[encodedIndex++] = PAD;encodedData[encodedIndex++] = PAD;} else if (fewerThan24bits == SIXTEENBIT) {b1 = binaryData[dataIndex];b2 = binaryData[dataIndex + 1];l = (byte) (b2 & 0x0f);k = (byte) (b1 & 0x03);byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4) : (byte) ((b2) >> 4 ^ 0xf0);encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];encodedData[encodedIndex++] = lookUpBase64Alphabet[l << 2];encodedData[encodedIndex++] = PAD;}return new String(encodedData);}\n", "public void taskRun() {SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");try {reconciliationInterList = ReconciliationInterface.getInterface();for (int num@ num = 0@ num < reconciliationInterList.size()++){ReconciliationInterface reconciliationInter = (ReconciliationInterface) reconciliationInterList.get(num);if (reconciliationInter == null) {LOG.info(\"对账接口信息\" + reconciliationInter + \"为空\");continue;}Date billDate = DateUtil.addDay(new Date(), -reconciliationInter.getBillDay());String interfaceCode = reconciliationInter.getInterfaceCode();RpAccountCheckBatch batch = new RpAccountCheckBatch();Boolean checked = validateBiz.isChecked(interfaceCode, billDate);if (checked) {LOG.info(\"账单日[\" + sdf.format(billDate) + \"],支付方式[\" + interfaceCode + \"],已经对过账，不能再次发起自动对账。\");continue;}batch.setCreater(\"reconciliationSystem\");batch.setCreateTime(new Date());batch.setBillDate(billDate);batch.setBatchNo(buildNoService.buildReconciliationNo());batch.setBankType(interfaceCode);File file = null;try {LOG.info(\"ReconciliationFileDownBiz,对账文件下载开始\");file = fileDownBiz.downReconciliationFile(interfaceCode, billDate);if (file == null) {continue;}LOG.info(\"对账文件下载结束\");} catch (Exception e) {LOG.error(\"对账文件下载异常:\", e);batch.setStatus(BatchStatusEnum.FAIL.name());batch.setRemark(\"对账文件下载异常\");batchService.saveData(batch);continue;}List<ReconciliationEntityVo> bankList = null;try {LOG.info(\"=ReconciliationFileParserBiz=>对账文件解析开始>>>\");bankList = parserBiz.parser(batch, file, billDate, interfaceCode);if (BatchStatusEnum.ERROR.name().equals(batch.getStatus())) {continue;}LOG.info(\"对账文件解析结束\");} catch (Exception e) {LOG.error(\"对账文件解析异常:\", e);batch.setStatus(BatchStatusEnum.FAIL.name());batch.setRemark(\"对账文件解析异常\");batchService.saveData(batch);continue;}try {checkBiz.check(bankList, interfaceCode, batch);} catch (Exception e) {LOG.error(\"对账异常:\", e);batch.setStatus(BatchStatusEnum.FAIL.name());batch.setRemark(\"对账异常\");batchService.saveData(batch);continue;}}validateBiz.validateScratchPool();} catch (Exception e) {LOG.error(\"roncoo-app-reconciliation error:\", e);}}\n", "public static final String sha256Sign(Map<String, Object> paramMap, String key) {try {String payParam = getSignTemp(paramMap, key);Mac sha256_HMAC = Mac.getInstance(\"HmacSHA256\");SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"HmacSHA256\");sha256_HMAC.init(secret_key);byte[] array = sha256_HMAC.doFinal(payParam.getBytes(\"UTF-8\"));StringBuilder sb = new StringBuilder();for (byte item : array) {sb.append(Integer.toHexString((item & 0xFF) | 0x100).substring(1, 3));}String sign = sb.toString().toUpperCase();logger.info(\"HMAC-SHA256签名结果：{}\", sign);return sign;} catch (Exception e) {logger.error(\"HMAC-SHA256签名异常：{}\", e);return null;}}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "private List<ReconciliationEntityVo> parseSuccess(List<String> list, String billDate, RpAccountCheckBatch batch) {String title = \"交易时间,公众账号ID,商户号,子商户号,设备号,微信订单号,商户订单号,用户标识,交易类型,交易状态,付款银行,货币种类,总金额,企业红包金额,商品名称,商户数据包,手续费,费率\";String totalTitle = \"总交易单数,总交易额,总退款金额,总企业红包退款金额,手续费总金额\";Pattern titlePattern = Pattern.compile(\"(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?)$\");Pattern pattern = Pattern.compile(\"^`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?),`(.*?)$\");Pattern totalTitlePattern = Pattern.compile(\"(.*?),(.*?),(.*?),(.*?),(.*?)$\");Pattern totalPattern = Pattern.compile(\"^`(.*?),`(.*?),`(.*?),`(.*?),`(.*?)$\");String titleRawData = list.remove(0);if (!titlePattern.matcher(titleRawData).find()) {batch.setStatus(BatchStatusEnum.FAIL.name());batch.setCheckFailMsg(\"校验标题行不通过, rawdata[\" + titleRawData + \"], 期望值[\" + title + \"]\");return null;}String totalRawData = list.remove(list.size() - 1);String totalTitleRawData = list.remove(list.size() - 1);if (!totalTitlePattern.matcher(totalTitleRawData).find()) {batch.setStatus(BatchStatusEnum.FAIL.name());batch.setCheckFailMsg(\"校验统计标题行不通过, rawdata[\" + totalTitleRawData + \"], 期望值[\" + totalTitle + \"]\");return new ArrayList<ReconciliationEntityVo>();}Matcher totalMatcher = totalPattern.matcher(totalRawData);if (totalMatcher.find()) {String totalCount = totalMatcher.group(1);String totalAmountStr = totalMatcher.group(2);String refundAmountStr = totalMatcher.group(3);String feeAmountStr = totalMatcher.group(5);try {batch.setBankTradeCount(Integer.parseInt(totalCount));batch.setBankTradeAmount(new BigDecimal(totalAmountStr));batch.setBankRefundAmount(new BigDecimal(refundAmountStr));batch.setBankFee(new BigDecimal(feeAmountStr));} catch (NumberFormatException e) {LOG.warn(\"解析统计行失败, billDate[\" + billDate + \"], billType[SUCCESS], rawdata[\" + totalRawData + \"]\", e);batch.setStatus(BatchStatusEnum.FAIL.name());batch.setCheckFailMsg(\"解析统计行失败, rawdata[\" + totalRawData + \"]\");batch.setBankTradeCount(null);batch.setBankTradeAmount(null);batch.setBankRefundAmount(null);batch.setBankFee(null);return null;}} else {batch.setStatus(BatchStatusEnum.FAIL.name());batch.setCheckFailMsg(\"匹配统计行失败, rawdata[\" + totalRawData + \"]\");return new ArrayList<ReconciliationEntityVo>();}List<ReconciliationEntityVo> entityVoList = new ArrayList<ReconciliationEntityVo>();for (String rawData : list) {ReconciliationEntityVo entityVo = new ReconciliationEntityVo();entityVoList.add(entityVo);Matcher matcher = pattern.matcher(rawData);if (matcher.find()) {String tradeTimeStr = matcher.group(1);String bankTrxNo = matcher.group(6);String bankOrderNo = matcher.group(7);String bankTradeStatus = matcher.group(10);String orderAmount = matcher.group(13);String bankFee = matcher.group(17);try {SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_STYLE);entityVo.setOrderTime(sdf.parse(tradeTimeStr));} catch (ParseException e) {LOG.warn(\"解析交易时间出错, billDate[\" + billDate + \"], billType[SUCCESS], tradeTime[\" + tradeTimeStr + \"], rawdata[\" + rawData + \"]\", e);batch.setStatus(BatchStatusEnum.FAIL.name());batch.setCheckFailMsg(\"解析交易时间出错, tradeTime[\" + tradeTimeStr + \"], rawdata[\" + rawData + \"]\");return null;}entityVo.setBankTrxNo(bankTrxNo);entityVo.setBankOrderNo(bankOrderNo);entityVo.setBankTradeStatus(bankTradeStatus);entityVo.setBankAmount(new BigDecimal(orderAmount));entityVo.setBankFee(new BigDecimal(bankFee));} else {batch.setStatus(BatchStatusEnum.FAIL.name());batch.setCheckFailMsg(\"匹配账单明细失败, rawdata[\" + rawData + \"]\");return null;}}return entityVoList;}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n", "public static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return \"\";UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_15_string_sequence", "description": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.", "codematcher_results": ["public String toString() {return \"ImageEntity{\" + \"col='\" + col + '\\'' + \", tag='\" + tag + '\\'' + \", tag3='\" + tag3 + '\\'' + \", sort='\" + sort + '\\'' + \", totalNum=\" + totalNum + \", startIndex=\" + startIndex + \", returnNumber=\" + returnNumber + \", imgs=\" + imgs + '}';}\n", "private void injectJS(WebView webView) {if (legacyMode) {injectJSOld(webView);return;}try {webView.loadUrl(\"javascript:\" + \"var linksLength = document.head.getElementsByTagName('link').length\" + \"for(var i=0i<linksLengthi++){document.head.getElementsByTagName('link')[0].remove()}\" + \"var isInGame = false\" + \"var isVerified = false\" + \"function isSmashing(returnNumber){if(isInGame){if(isVerified){return 'gv'+returnNumber}else{return 'g'+returnNumber}}return returnNumber}\" + \"function takeNextStep(gamePin,name,answer,returnVal,verify){if($('#inputSession').length==1){isVerified=falseisInGame=false$('#inputSession').val(gamePin)$('#inputSession').trigger('change')setTimeout(function(){$('#inputSession').submit()},10)}else if($('#username').length == 1){isInGame = true$('#username').val(name)$('#username').trigger('change')setTimeout(function(){$('#username').submit()},10)}else if($('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--0').length!=0){isVerified=falseif(verify==''){return 'v'+returnVal}else if($('.two-factor-auth__sub-heading.ng-binding').html() != 'Match the pattern on screen'){return 'i'+returnVal}else{for(var i=0i<4i++){$('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--' + verify[i]).mousedown()}}} else if($('.answer').length!=0){isVerified=true$('.answer.answer'+answer).mousedown()}else{isVerified=true}return 'n'+returnVal}\");} catch (Exception e) {e.printStackTrace();}}\n", "void capturePoint(Vector3D beamOrigin, Vector3D beamDir, double distance, double intensity, double echo_width, int returnNumber, int pulseReturnNumber, int fullwaveIndex, String hitObjectId, int classification) {if (distance < detector.cfg_device_rangeMin_m) {return;}double precision = this.detector.cfg_device_accuracy_m / 2;double error = -precision + Math.random() * (precision * 2);error += boxMullerRandom(0.0, this.detector.cfg_device_accuracy_m / 2);distance += error;Vector3D pointPos = beamOrigin.add(beamDir.scalarMultiply(distance));Measurement m = new Measurement();m.position = pointPos;m.distance = distance;m.intensity = intensity;m.echo_width = echo_width;m.returnNumber = returnNumber;m.pulseReturnNumber = pulseReturnNumber;m.fullwaveIndex = fullwaveIndex;m.beamOrigin = beamOrigin;m.beamDirection = beamDir;m.hitObjectId = hitObjectId;m.classification = classification;detector.writeMeasurement(m);detector.mBuffer.add(m);}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");}if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");}String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG)Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));if ((nanpState == NP_NANP_LOCAL) || (nanpState == NP_NANP_AREA_LOCAL) || (nanpState == NP_NANP_NDD_AREA_LOCAL)) {return networkPortionNumber;} else if (nanpState == NP_NANP_NBPCD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK) {return networkPortionNumber.substring(1);} else {return networkPortionNumber;}} else if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK) {return networkPortionNumber;} else if (networkType == GSM_UMTS_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return PLUS_SIGN + networkPortionNumber.substring(iddLength);} else if (networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return networkPortionNumber.substring(iddLength);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG)Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK) {returnNumber = networkPortionNumber.substring(1);}break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(1);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK || networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;returnNumber = NANP_IDD + networkPortionNumber.substring(iddLength);}break;case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!inExceptionListForNpCcAreaLocal(numberEntry) && networkPortionNumber.length() >= 11 && countryCode != NANP_CC) {returnNumber = NANP_IDD + networkPortionNumber;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK)) {if (networkPortionNumber.startsWith(PLUS_SIGN + NANP_IDD)) {returnNumber = networkPortionNumber.substring(1);} else {returnNumber = NANP_IDD + networkPortionNumber.substring(1);}}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");} else if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");} else {String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG) {Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));}if (nanpState == NP_NANP_LOCAL || nanpState == NP_NANP_AREA_LOCAL || nanpState == NP_NANP_NDD_AREA_LOCAL) {return networkPortionNumber;}if (nanpState != NP_NANP_NBPCD_CC_AREA_LOCAL) {if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == NP_NANP_LOCAL) {return networkPortionNumber;}if (networkType == 0) {return PLUS_SIGN + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);} else if (networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG) {Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));}String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == 0) {returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == 0 || networkType == NP_NANP_AREA_LOCAL) {returnNumber = NANP_IDD + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);break;}case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!(inExceptionListForNpCcAreaLocal(numberEntry) || networkPortionNumber.length() < NANP_LONG_LENGTH || countryCode == NP_NANP_LOCAL)) {returnNumber = NANP_IDD + networkPortionNumber;break;}default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL)) {if (!networkPortionNumber.startsWith(\"+011\")) {returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;}returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;} else if (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(NP_NANP_LOCAL);} else {return networkPortionNumber;}}}\n", "private static String getLineNumber(Finding finding) {String returnNumber = null;if (finding.getEntryPointLineNumber() != -1) {returnNumber = finding.getEntryPointLineNumber().toString();} else if (finding.getDataFlowElements() != null && !finding.getDataFlowElements().isEmpty()) {returnNumber = String.valueOf(finding.getDataFlowElements().get(0).getLineNumber());}return returnNumber;}\n", "public static final List itemReturnQuery(String itemName, int categoryId, int selectedReceiverType, int receiverId, int returnedStatus, String transferNumber, String returnNumber, Date fromDate, Date toDate) throws Exception {Criteria c = getSession().createCriteria(ItemReturn.class);c.add(Restrictions.eq(\"dFlag\", 1));c.createAlias(\"transfer\", \"nik\");c.createAlias(\"transfer.item\", \"it\");if (!StringUtils.isEmpty(transferNumber)) {c.add(Restrictions.eq(\"nik.transferPanaNumber\", transferNumber));}if (!StringUtils.isEmpty(returnNumber)) {c.add(Restrictions.eq(\"returnNumber\", returnNumber));}if (selectedReceiverType > 0) {c.add(Restrictions.eq(\"nik.transferType\", selectedReceiverType));}if (returnedStatus >= 0) {c.add(Restrictions.eq(\"nik.status\", returnedStatus));}if (receiverId > 0) {if (selectedReceiverType == Transfer.PERSONNAL) {c.createAlias(\"transfer.person\", \"per\");c.add(Restrictions.eq(\"per.id\", receiverId));} else if (selectedReceiverType == Transfer.OFFICIAL) {c.createAlias(\"transfer.branchOffice\", \"bro\");c.add(Restrictions.eq(\"bro.id\", receiverId));}}if (!StringUtils.isEmpty(itemName)) {c.add(Restrictions.ilike(\"it.name\", \"%\" + itemName.toLowerCase() + \"%\", MatchMode.ANYWHERE));}c.createAlias(\"it.category\", \"cat\");c.add(Restrictions.eq(\"cat.categoryType\", Category.TYPE_RETURNABLE));if (categoryId > 0) {c.add(Restrictions.eq(\"cat.id\", categoryId));}if (!DateTimeUtils.isEmpty(fromDate)) {c.add(Restrictions.ge(\"addedDate\", fromDate));}if (!DateTimeUtils.isEmpty(toDate)) {c.add(Restrictions.le(\"addedDate\", toDate));}return c.list();}\n", "public void setReturnNumber(String returnNumber) {this.returnNumber = returnNumber;}\n", "public String getReturnnumber() {return returnnumber;}\n", "public void setReturnnumber(String returnnumber) {this.returnnumber = returnnumber;}\n"]}
{"name": "HumanEval_154_cycpattern_check", "description": "You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_57_monotonic", "description": "Return true is array list elements are monotonically increasing or decreasing.", "codematcher_results": ["public static void main(String[] a) {final CountDownLatch firstLatch = new CountDownLatch(1);final CountDownLatch secondLatch = new CountDownLatch(1);final BuildFactory.Builder builder = new BuildFactory.Builder();CopyOnWriteArrayList<BuildFactory> elements = new CopyOnWriteArrayList<>();elements.add(builder.name(\"myth\").addr(\"local\").build());elements.add(builder.name(\"roll\").addr(\"remote\").build());ReentrantLock lock = new ReentrantLock();ElementList<BuildFactory> list = new ElementList<>(elements, lock, \"list1 > \");ElementList<BuildFactory> list2 = new ElementList<>(elements, lock, \"list2 > \");Thread thread1 = new Thread(() -> {System.out.println(\"进入 线程 1\");elements.add(builder.name(\"dyn 1\").addr(\"89\").build());list.prep();firstLatch.countDown();try {secondLatch.await();} catch (InterruptedException e) {System.out.println(\"first inter error\");}list.listElement(\"first \");});Thread thread2 = new Thread(() -> {System.out.println(\"进入 线程 2\");try {Thread.sleep(2000);firstLatch.await();elements.add(builder.name(\"dyn 2\").addr(\"00\").build());list2.prep();secondLatch.countDown();} catch (InterruptedException e) {System.out.println(\"second inter error\");}list2.listElement(\"second\");});thread1.start();thread2.start();}\n", "public static ListElement list(InlineElement... elements) {return new ListElement(Arrays.asList(elements));}\n", "public List() {start = new ListElement(\"Kopf\");}\n", "public List<RuleOutput> sort(List<RuleOutput> matchedResults) {if (matchedResults == null || matchedResults.isEmpty()) {return matchedResults;}Object listElement = ((InterpretedRuleOutput) matchedResults.get(0)).getResult();if (listElement instanceof Pair) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) interpretedRule.getResult());});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, decisionPairs.get(i)));}return (List) newList;} else if (listElement instanceof Context) {Context skeleton = (Context) listElement;List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, new Context()));}for (Object key : skeleton.keySet()) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) ((Context) interpretedRule.getResult()).get(key));});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());for (int i@ i = 0@ i < decisionPairs.size()++){((Context) newList.get(i).getResult()).put(key, decisionPairs.get(i));}}return (List) newList;} else {return matchedResults;}}\n", "public static GirlListModel parse(Element listElement, int type) {GirlListModel listModel = new GirlListModel(type);if (listElement != null) {Elements girlElements = listElement.children();for (Element girlElement : girlElements) {GirlModel girlModel = GirlModel.parse(girlElement, type);listModel.getList().add(girlModel);}}Logger.log(\"GirlListModel parse... \" + listModel.getList().size());return listModel;}\n", "public static PicListModel parse(Element listElement) throws Exception {PicListModel picListModel = new PicListModel();if (listElement != null) {for (Element picElement : listElement.children()) {PicModel picModel = PicModel.parse(picElement);picListModel.getList().add(picModel);}}return picListModel;}\n", "public void addDir(File target) {if (target == null) {return;}File setDir = target.getParentFile();if (target.isDirectory()) {setDir = target;}for (File listElement : searchTargetList) {if (setDir.getPath().equals(listElement.getPath())) {return;}}searchTargetList.add(setDir);searchTargetMap = null;mibValueCache = new MibValueCache();}\n", "public void delete(int n) {if (n < 1) {return;}ListElement nth = findIndex(n);if (nth == null) {return;}ListElement pre = findIndex(n - 1);pre.next = nth.next;}\n", "public void format(ListElement element) {String[] inlineElements = element.getEntries().stream().map(el -> {Formatter formatter = newInstance();el.format(formatter);return formatter.finalizeFormatting();}).toArray(String[]::new);formatList(state, inlineElements);}\n", "public void returnAListOfElementsByClassName() {List<WebElement> elements;elements = driver.findElements(By.className(\"normal\"));Set<String> foundTags = new HashSet<String>();for (WebElement e : elements) {foundTags.add(e.getTagName().toLowerCase());}assertTrue(\"expected p tag\", foundTags.contains(\"p\"));assertTrue(\"expected ul tag\", foundTags.contains(\"ul\"));assertTrue(\"expected li tag\", foundTags.contains(\"li\"));assertTrue(\"expected a tag\", foundTags.contains(\"a\"));assertFalse(\"did not expect div tag\", foundTags.contains(\"div\"));}\n"]}
{"name": "HumanEval_12_longest", "description": "Out of array list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return null in case the input array list is empty.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static String[] getPermissions(@Permission final String permission) {switch(permission) {case CALENDAR:return GROUP_CALENDAR;case CAMERA:return GROUP_CAMERA;case CONTACTS:return GROUP_CONTACTS;case LOCATION:return GROUP_LOCATION;case MICROPHONE:return GROUP_MICROPHONE;case PHONE:if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {return GROUP_PHONE_BELOW_O;} else {return GROUP_PHONE;}case SENSORS:return GROUP_SENSORS;case SMS:return GROUP_SMS;case STORAGE:return GROUP_STORAGE;}return new String[] { permission };}\n", "public final void onBindViewHolder(BaseViewHolder holder, int position) {switch(holder.getItemViewType()) {case VIEW_TYPE_EMPTY:case VIEW_TYPE_HEADER:case VIEW_TYPE_FOOTER:break;default:bindCustomViewHolder(holder, position);break;}}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public ByteArrayInputStream output2InputStream(final OutputStream out) {if (out == null)return null;return new ByteArrayInputStream(((ByteArrayOutputStream) out).toByteArray());}\n", "public static byte[] outputStream2Bytes(final OutputStream out) {if (out == null)return null;return ((ByteArrayOutputStream) out).toByteArray();}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_52_below_threshold", "description": "Return true if all numbers in the array list l are below threshold t.", "codematcher_results": ["private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n", "private void add(Delete base, TransactionResult result) {if (result == null) {throw new InvalidUsageException(\"the record to be deleted must be existing \" + \"and read beforehand\");}Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.DELETED));values.add(Attribute.toPreparedAtValue(current));values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_75_is_multiply_prime", "description": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100. Example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_30_get_positive", "description": "Return only positive numbers in the array list.", "codematcher_results": ["private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n", "private void add(Delete base, TransactionResult result) {if (result == null) {throw new InvalidUsageException(\"the record to be deleted must be existing \" + \"and read beforehand\");}Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.DELETED));values.add(Attribute.toPreparedAtValue(current));values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_33_sort_third", "description": "This function takes an array array list l and returns an array array list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private static Activity getActivityByView(@NonNull final View view) {Context context = view.getContext();while (context instanceof ContextWrapper) {if (context instanceof Activity) {return (Activity) context;}context = ((ContextWrapper) context).getBaseContext();}Log.e(\"BarUtils\", \"the view's Context is not an Activity.\");return null;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static Activity getActivityByContext(@NonNull Context context) {while (context instanceof ContextWrapper) {if (context instanceof Activity) {return (Activity) context;}context = ((ContextWrapper) context).getBaseContext();}return null;}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_6_parse_nested_parens", "description": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static String ccs2Pinyin(final CharSequence ccs, final CharSequence split) {if (ccs == null || ccs.length() == 0)return null;StringBuilder sb = new StringBuilder();for (int i@ i = 0, len = ccs.length()@ i < len++){char ch = ccs.charAt(i);if (ch >= 0x4E00 && ch <= 0x9FA5) {int sp = (ch - 0x4E00) * 6;sb.append(pinyinTable.substring(sp, sp + 6).trim());} else {sb.append(ch);}sb.append(split);}return sb.toString();}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_45_triangle_area", "description": "Given length of a side and high return area for a triangle.", "codematcher_results": ["public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public // This function returns the value of the Areadouble returnArea() {double p = returnPerimeter() / 2;return Math.pow((p) * (p - sideOne) * (p - sideTwo) * (p - sideThree), .5);}\n", "public // This function returns the value of the Areadouble returnArea() {return Math.PI * radius * radius;}\n", "public // This function returns the value of the Areadouble returnArea() {return length * width;}\n", "public // This function returns the value of the Areadouble returnArea() {return side * side;}\n"]}
{"name": "HumanEval_97_multiply", "description": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid. Examples:", "codematcher_results": ["public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public void functionBeanHandlesKinesisEvent() throws Exception {this.handler = new SpringBootKinesisEventHandler<>(FunctionConfig.class);KinesisEvent event = asKinesisEvent(singletonList(new Foo(\"foo\")));List<Bar> output = this.handler.handleRequest(event, null);assertThat(output).containsExactly(new Bar(\"FOO\"));}\n", "public void functionShouldRegisterAndUnregister() throws Exception {ApplicationUser admin = userHelper.getAdmin();String scriptBody = FileUtil.readArquillianExample(\"tests/ScriptedFunction\");JqlFunctionForm form = new JqlFunctionForm();form.setName(\"testListener\" + System.currentTimeMillis());form.setScriptBody(scriptBody);JqlFunctionScriptDto script = jqlFunctionService.createScript(admin, form);assertTrue(jqlFunctionHandlerRegistry.getAllFunctionNames().contains(script.getName()));jqlFunctionService.deleteScript(admin, script.getId());assertFalse(jqlFunctionHandlerRegistry.getAllFunctionNames().contains(script.getName()));}\n", "public void functionBeanHandlesAggregatedKinesisEvent() throws Exception {this.handler = new SpringBootKinesisEventHandler<>(FunctionConfig.class);List<Foo> events = asList(new Foo(\"foo\"), new Foo(\"bar\"), new Foo(\"baz\"));KinesisEvent aggregatedEvent = asAggregatedKinesisEvent(events);List<Bar> output = this.handler.handleRequest(aggregatedEvent, null);assertThat(output).containsExactly(new Bar(\"FOO\"), new Bar(\"BAR\"), new Bar(\"BAZ\"));}\n", "public void function_params_equal_open_and_close_bracket_is_NOT_functionName() {assertFalse(new ParseToken(\"params=()\").isFunction());}\n"]}
{"name": "HumanEval_4_mean_absolute_deviation", "description": "For a given array list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_58_common", "description": "Return sorted unique common elements for two array lists.", "codematcher_results": ["ElementArrayList(ArrayList<Element> elements, ReentrantLock lock, String name) {this.elements = elements;this.lock = lock;this.name = name;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_156_int_to_mini_roman", "description": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000 Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_67_fruit_distribution", "description": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket. for examble:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n"]}
{"name": "HumanEval_112_reverse_delete", "description": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a pair containing the result string and true/false for the check. Example", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_13_greatest_common_divisor", "description": "Return a greatest common divisor of two integers a and b", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_116_sort_array", "description": "In this Kata, you have to sort an array array list of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_28_concatenate", "description": "Concatenate array list of strings into a single string", "codematcher_results": ["public Expression<Enum<?>> in(Enum<?>[] value) {String listString = \"\";Boolean firstString = true;for (Enum<?> v : value) {if (firstString) {listString = listString.concat(\"('\").concat(EnumPath.getValue(v)).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(EnumPath.getValue(v)).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<Enum<?>>(this, Operation.in, listString);}\n", "public Expression<String> in(String[] value) {String listString = \"\";Boolean firstString = true;for (String v : value) {if (firstString) {listString = listString.concat(\"('\").concat(v).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(v).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<String>(this, Operation.in, listString);}\n", "public void mget() {List<TestEntity> cd = sc.mGet(list);System.out.println(JSON.toJSONString(cd));cd = sc.mGetString(listString);System.out.println(JSON.toJSONString(cd));cd = sc.mGetNumber(listIntger);System.out.println(JSON.toJSONString(cd));}\n", "public static void main(String[] args) throws EncodingException {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";try {System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));} catch (EncodingException e) {e.printStackTrace();};}\n", "public static void main(String[] args) {String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "private void done(ArrayList<String> listString) {Intent mIntent = new Intent();setResult(Activity.RESULT_OK, mIntent);mIntent.putStringArrayListExtra(KEY_DATA_RESULT, listString);finish();}\n", "public static void main(String[] args) {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf3000000000000000000000000000000000000000000000000000000000000000500\" + \"0000000000000000000000000000000000000000000000000000000000008000000000000000000000000000\" + \"000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000\" + \"0000000000000000000000000000000000000000000000000000200000000000000000000000000000000000\" + \"00000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "public void test() {assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"listString\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawlist\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawListSub\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"stringList\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"arrayListString\")));}\n", "public static String listOfStringsToString(ObjectArrayList<String> stList, String separator) {StringBuffer sb = new StringBuffer();for (String st : stList) {sb.append(st);sb.append(separator);}return sb.toString().trim();}\n", "public void handle(MyPojo2 request) {log.info(\"a new message #2 type:{}\", request);MyPojo2 response = MyPojo2.builder().sender(pid()).name(request.getName()).age(request.getAge()).male(request.isMale()).languages(request.getLanguages()).position(request.getPosition()).set(request.getSet()).listString(request.getListString()).bools(request.getBools()).build();send(request.getSender(), response);}\n"]}
{"name": "HumanEval_149_sorted_list_sum", "description": "Write a function that accepts an array array list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted array list with a sorted order, The array list is always an array array list of strings and never an array array list of numbers, and it may contain duplicates. The order of the array list should be ascending by length of each word, and you should return the array list sorted by that rule. If two words have the same length, sort the array list alphabetically. The function should return an array array list of strings in sorted order. You may assume that all words will have the same length. For example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_7_filter_by_substring", "description": "Filter an input array list of strings only for ones that contain given substring", "codematcher_results": ["public Expression<Enum<?>> in(Enum<?>[] value) {String listString = \"\";Boolean firstString = true;for (Enum<?> v : value) {if (firstString) {listString = listString.concat(\"('\").concat(EnumPath.getValue(v)).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(EnumPath.getValue(v)).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<Enum<?>>(this, Operation.in, listString);}\n", "public Expression<String> in(String[] value) {String listString = \"\";Boolean firstString = true;for (String v : value) {if (firstString) {listString = listString.concat(\"('\").concat(v).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(v).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<String>(this, Operation.in, listString);}\n", "public void mget() {List<TestEntity> cd = sc.mGet(list);System.out.println(JSON.toJSONString(cd));cd = sc.mGetString(listString);System.out.println(JSON.toJSONString(cd));cd = sc.mGetNumber(listIntger);System.out.println(JSON.toJSONString(cd));}\n", "public static void main(String[] args) throws EncodingException {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";try {System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));} catch (EncodingException e) {e.printStackTrace();};}\n", "public static void main(String[] args) {String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "private void done(ArrayList<String> listString) {Intent mIntent = new Intent();setResult(Activity.RESULT_OK, mIntent);mIntent.putStringArrayListExtra(KEY_DATA_RESULT, listString);finish();}\n", "public static void main(String[] args) {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf3000000000000000000000000000000000000000000000000000000000000000500\" + \"0000000000000000000000000000000000000000000000000000000000008000000000000000000000000000\" + \"000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000\" + \"0000000000000000000000000000000000000000000000000000200000000000000000000000000000000000\" + \"00000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "public void test() {assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"listString\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawlist\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawListSub\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"stringList\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"arrayListString\")));}\n", "public void handle(MyPojo2 request) {log.info(\"a new message #2 type:{}\", request);MyPojo2 response = MyPojo2.builder().sender(pid()).name(request.getName()).age(request.getAge()).male(request.isMale()).languages(request.getLanguages()).position(request.getPosition()).set(request.getSet()).listString(request.getListString()).bools(request.getBools()).build();send(request.getSender(), response);}\n", "public void toJson() throws Exception {TestBean bean = new TestBean(\"A\");String beanString = binder.toJson(bean);System.out.println(\"Bean:\" + beanString);assertEquals(beanString, \"{\\\"name\\\":\\\"A\\\"}\");Map<String, Object> map = Maps.newLinkedHashMap();map.put(\"name\", \"A\");map.put(\"age\", 2);String mapString = binder.toJson(map);System.out.println(\"Map:\" + mapString);assertEquals(mapString, \"{\\\"name\\\":\\\"A\\\",\\\"age\\\":2}\");List<String> stringList = Lists.newArrayList(\"A\", \"B\", \"C\");String listString = binder.toJson(stringList);System.out.println(\"String List:\" + listString);assertEquals(listString, \"[\\\"A\\\",\\\"B\\\",\\\"C\\\"]\");List<TestBean> beanList = Lists.newArrayList(new TestBean(\"A\"), new TestBean(\"B\"));String beanListString = binder.toJson(beanList);System.out.println(\"Bean List:\" + beanListString);assertEquals(beanListString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");TestBean[] beanArray = new TestBean[] { new TestBean(\"A\"), new TestBean(\"B\") };String beanArrayString = binder.toJson(beanArray);System.out.println(\"Array List:\" + beanArrayString);assertEquals(beanArrayString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");}\n"]}
{"name": "HumanEval_99_closest_integer", "description": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero. Examples", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_64_vowels_count", "description": "Write a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word. Example:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static List<String> getStackFrameList(final Throwable throwable) {final StringWriter sw = new StringWriter();final PrintWriter pw = new PrintWriter(sw, true);throwable.printStackTrace(pw);final String stackTrace = sw.toString();final StringTokenizer frames = new StringTokenizer(stackTrace, LINE_SEP);final List<String> list = new ArrayList<>();boolean traceStarted = false;while (frames.hasMoreTokens()) {final String token = frames.nextToken();final int at = token.indexOf(\"at\");if (at != -1 && token.substring(0, at).trim().isEmpty()) {traceStarted = true;list.add(token);} else if (traceStarted) {break;}}return list;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n", "public static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return \"\";UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_158_find_max", "description": "Write a function that accepts an array array list of strings. The array list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_162_string_to_md5", "description": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return null.", "codematcher_results": ["protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {;File fileBufferedImage waterimg=null} //StringString message = \"\";String sort = \"\";FileOutputStream out = null;try {System.out.println(\"开始接受图片\");DiskFileItemFactory factory = new DiskFileItemFactory();ServletFileUpload upload = new ServletFileUpload(factory);upload.setHeaderEncoding(\"UTF-8\");if (!ServletFileUpload.isMultipartContent(request)) {System.out.println(\"解析出错\");return;}List<FileItem> list = upload.parseRequest(request);for (FileItem item : list) {if (item.isFormField()) {String name = item.getFieldName();String value = item.getString(\"UTF-8\");sort = value;System.out.println(name + \"=\" + value);} else {String filename = item.getName();System.out.println(filename);System.out.println(sort);if (filename == null || filename.trim().equals(\"\")) {continue;};InputStream in = item.getInputStream();out = new FileOutputStream(new File(\"d:\\\\hahahha.txt\"));byte[] b = new byte[1024];while (in.read(b) != -1) {String msg = new String(new String(b));System.out.println(msg);out.write(b);};}in.close();item.delete();message = \"文件上传成功！\";}}} catch (Exception e) {message = \"文件上传失败！\";e.printStackTrace();} finally {if (out != null) {out.close();}}}\n", "private Map<String, String> getMap(final List<StringString> sample) {HashMap<String, String> map = new HashMap<String, String>();for (int i@ i = 0@ i < sample.size()++){map.put(sample.get(i).key, sample.get(i).value);}return (Map) map;}\n", "public Circle(// sets k, u, v, w by StringString coeffString, // sets k, u, v, w by StringString radXString, // sets k, u, v, w by StringString radYString, // sets k, u, v, w by StringString radZString) {HomogenousPolynomial coeff = new HomogenousPolynomial(coeffString);HomogenousVector radCoeffs = new HomogenousVector(radXString, radYString, radZString);if (coeff.equalsZero())throw new IllegalArgumentException(\"coefficient must be nonzero\");if (coeff.degree() + 2 != radCoeffs.degree())throw new IllegalArgumentException(\"degree of radical coefficients must be two more than degree of coefficient\");this.coeff = coeff;this.radCoeffs = radCoeffs;}\n", "public void stringWhenToStringReturnsNull() {azzert.that(as.string(new Object() {;public String toString() {return null;}}), is(\"null\"));}\n", "public ArrayList<StringString> getData(String dataName) {return getList(getDataMap(dataName));}\n", "private ArrayList<StringString> getList(final Map<String, String> sample) {ArrayList<StringString> StringString_sample = new ArrayList<StringString>();for (Map.Entry<String, String> x : sample.entrySet()) {StringString v = new StringString();v.key = x.getKey();v.value = x.getValue();StringString_sample.add(v);}return StringString_sample;}\n", "public static Transform<String, String> transform(List<String> transforms, Map<String, Transform<String, String>> stringToStringTransforms, Map<String, Transform<Object, String>> objectToStringTransforms, Map<String, Transform<String, Object>> stringToObjectTransforms, Map<String, Transform<Object, Object>> objectToObjectTransforms) throws ConfigurationException {int state = STRING_STATE;Transform<String, String> stringIdentity = (s) -> s;Transform<String, String> stringString = stringIdentity;Transform<String, Object> stringObject = null;for (String t : transforms) {String op = parseOperationNameFromTransform(t);Map<String, String> parameters = parseParametersFrom(t);switch(state) {case STRING_STATE:if (stringToStringTransforms.containsKey(op)) {Transform<String, String> transform = stringToStringTransforms.get(op);stringString = stringString.andThen(transform);} else if (stringToObjectTransforms.containsKey(op)) {Transform<String, Object> transform = stringToObjectTransforms.get(t);stringObject = stringString.andThen(transform);state = OBJECT_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from string state\");}break;case OBJECT_STATE:if (objectToObjectTransforms.containsKey(op)) {Transform<Object, Object> transform = objectToObjectTransforms.get(op);stringObject = transform.compose(stringObject);} else if (objectToStringTransforms.containsKey(op)) {Transform<Object, String> transform = objectToStringTransforms.get(op);stringString = stringObject.andThen(transform);state = STRING_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from obj state\");}break;}}return stringString;}\n", "' stringString readString(DataInputStream stream) throws IOException {String line = stream.readLine();if (line == null)return null;int len = Integer.parseInt(line);byte[] buffer = new byte[len];stream.readFully(buffer);return new String(buffer, StandardCharsets.ISO_8859_1);}\n", "HttpURLConnection conn = initHttp(url,if;String valueString = nullStringBuffer bufferRes =while ((valueString = read.readLine()) != null) {} in.close();} else { BufferedInputStream bis =String ds =String fullName =StringString suffix;att.setFileName(relName);} return att}public static String initParams(String url, Map<String, String> params) throws UnsupportedEncodingException {if (null == params || params.isEmpty()) {return url;}StringBuilder sb = new StringBuilder(url);if (url.indexOf(\"?\") == -1) {sb.append(\"?\");}sb.append(map2Url(params));return sb.toString();}\n", "public void testOptInt() {assertEquals(33, somenil.optint(33));throwsError(sometrue, \"optint\", int.class, new Integer(33));throwsError(somefalse, \"optint\", int.class, new Integer(33));assertEquals(0, zero.optint(33));assertEquals(sampleint, intint.optint(33));assertEquals((int) samplelong, longdouble.optint(33));assertEquals((int) sampledouble, doubledouble.optint(33));throwsError(somefunc, \"optint\", int.class, new Integer(33));throwsError(someclosure, \"optint\", int.class, new Integer(33));throwsError(stringstring, \"optint\", int.class, new Integer(33));assertEquals(sampleint, stringint.optint(33));assertEquals((int) samplelong, stringlong.optint(33));assertEquals((int) sampledouble, stringdouble.optint(33));throwsError(thread, \"optint\", int.class, new Integer(33));throwsError(table, \"optint\", int.class, new Integer(33));throwsError(userdataobj, \"optint\", int.class, new Integer(33));throwsError(userdatacls, \"optint\", int.class, new Integer(33));}\n"]}
{"name": "HumanEval_44_change_base", "description": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_157_right_angle_triangle", "description": "Given the lengths of the three sides of a triangle. Return true if the three sides form a right-angled triangle, false otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_81_numerical_letter_grade", "description": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you an array array list of GPAs for some students and you have to write a function that can output an array array list of letter grades using the following table: GPA       |    Letter grade 4.0                A+ > 3.7                A > 3.3                A- > 3.0                B+ > 2.7                B > 2.3                B- > 2.0                C+ > 1.7                C > 1.3                C- > 1.0                D+ > 0.7                D > 0.0                D- 0.0                E Example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static String ccs2Pinyin(final CharSequence ccs, final CharSequence split) {if (ccs == null || ccs.length() == 0)return null;StringBuilder sb = new StringBuilder();for (int i@ i = 0, len = ccs.length()@ i < len++){char ch = ccs.charAt(i);if (ch >= 0x4E00 && ch <= 0x9FA5) {int sp = (ch - 0x4E00) * 6;sb.append(pinyinTable.substring(sp, sp + 6).trim());} else {sb.append(ch);}sb.append(split);}return sb.toString();}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_5_intersperse", "description": "Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'", "codematcher_results": ["public void go() {JpaElementSelect select = newSelect();entityManager.persist(select);entityManager.flush();final CriteriaBuilder cb = entityManager.getCriteriaBuilder();CriteriaQuery<Tuple> cq = cb.createTupleQuery();Root<JpaElementSelect> root = cq.from(JpaElementSelect.class);ListJoin<JpaElementSelect, OneForEntity> entityListJoin = root.join(JpaElementSelect_.entityList);root.fetch(JpaElementSelect_.entityList);entityManager.createQuery(cq.multiselect(root.get(\"name\"), // , root.get(\"elementList\")entityListJoin).distinct(true)).getResultList().forEach(tuple -> {System.out.println(tuple.get(0));});}\n", "public static <T> scala.collection.immutable.List<T> map(T... elementList) {Objects.requireNonNull(elementList);return Arrays.stream(elementList).collect(toScalaList());}\n", "public Pod(@Attribute(name = \"error\") final boolean error, @Attribute(name = \"primary\") final boolean primary, @Attribute(name = \"title\") final String title, @Attribute(name = \"scanner\") final String scanner, @Attribute(name = \"id\") final String id, @Attribute(name = \"position\") final long position, @Attribute(name = \"numsubpods\") final long numsubpods, @ElementList(inline = true, name = \"subpods\") final List<SubPod> subpods, @Element(name = \"states\") final States states, @Element(name = \"infos\") final Infos infos, @Element(name = \"definitions\", required = false) final Definitions definitions) {this.error = error;this.title = title;this.scanner = scanner;this.id = id;this.position = position;this.numsubpods = numsubpods;this.subpods = subpods;this.primary = primary;this.states = states;this.infos = infos;this.definitions = definitions;}\n", "public static void main(String[] a) {final CountDownLatch firstLatch = new CountDownLatch(1);final CountDownLatch secondLatch = new CountDownLatch(1);final BuildFactory.Builder builder = new BuildFactory.Builder();CopyOnWriteArrayList<BuildFactory> elements = new CopyOnWriteArrayList<>();elements.add(builder.name(\"myth\").addr(\"local\").build());elements.add(builder.name(\"roll\").addr(\"remote\").build());ReentrantLock lock = new ReentrantLock();ElementList<BuildFactory> list = new ElementList<>(elements, lock, \"list1 > \");ElementList<BuildFactory> list2 = new ElementList<>(elements, lock, \"list2 > \");Thread thread1 = new Thread(() -> {System.out.println(\"进入 线程 1\");elements.add(builder.name(\"dyn 1\").addr(\"89\").build());list.prep();firstLatch.countDown();try {secondLatch.await();} catch (InterruptedException e) {System.out.println(\"first inter error\");}list.listElement(\"first \");});Thread thread2 = new Thread(() -> {System.out.println(\"进入 线程 2\");try {Thread.sleep(2000);firstLatch.await();elements.add(builder.name(\"dyn 2\").addr(\"00\").build());list2.prep();secondLatch.countDown();} catch (InterruptedException e) {System.out.println(\"second inter error\");}list2.listElement(\"second\");});thread1.start();thread2.start();}\n", "public static void main(String[] s) {CopyOnWriteArrayList<Element> elements = new CopyOnWriteArrayList<>();ReentrantLock lock = new ReentrantLock();ElementList<Element> list = new ElementList<>(elements, lock, \"list > \");new Thread(() -> {list.addElement(new Element(\"1\"));list.addElement(new Element(\"2\"));list.addElement(new Element(\"3\"));list.addElement(new Element(\"4\"));list.prep();list.listElement(\"th1 : \");}).start();new Thread(() -> {list.addElement(new Element(\"5\"));list.prep();list.listElement(\"th2 : \");}).start();}\n", "public void sort(int column, boolean ascending) {Main.get().mainPanel.desktop.browser.fileBrowser.status.setFlagOrdering();int rows = Main.get().mainPanel.desktop.browser.fileBrowser.table.getDataTable().getRowCount();int columns = Main.get().mainPanel.desktop.browser.fileBrowser.table.getDataTable().getColumnCount();int selectedRow = Main.get().mainPanel.desktop.browser.fileBrowser.table.getSelectedRow();Map<Integer, Object> data = new HashMap<Integer, Object>(Main.get().mainPanel.desktop.browser.fileBrowser.table.data);List<String[]> elementList = new ArrayList<String[]>();List<GWTObjectToOrder> elementToOrder = new ArrayList<GWTObjectToOrder>();int correctedColumn = correctedColumnIndex(column);if (correctedColumn <= 17) {for (int i@ i = 0@ i < rows++){String[] rowI = new String[columns];GWTObjectToOrder rowToOrder = new GWTObjectToOrder();for (int x@ x = 0@ x < columns++){rowI[x] = Main.get().mainPanel.desktop.browser.fileBrowser.table.getDataTable().getHTML(i, x);}elementList.add(i, rowI);switch(correctedColumn) {case 0:case 1:case 2:case 3:case 6:rowToOrder.setObject(rowI[column].toLowerCase());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 4:if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTFolder) {rowToOrder.setObject(new Double(0));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTMail) {rowToOrder.setObject(new Double(((GWTMail) data.get(Integer.parseInt(rowI[colDataIndex]))).getSize()));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTDocument) {rowToOrder.setObject(new Double(((GWTDocument) data.get(Integer.parseInt(rowI[colDataIndex]))).getActualVersion().getSize()));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);}break;case 5:if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTFolder) {rowToOrder.setObject(((GWTFolder) data.get(Integer.parseInt(rowI[colDataIndex]))).getCreated());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTMail) {rowToOrder.setObject(((GWTMail) data.get(Integer.parseInt(rowI[colDataIndex]))).getReceivedDate());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTDocument) {rowToOrder.setObject(((GWTDocument) data.get(Integer.parseInt(rowI[colDataIndex]))).getLastModified());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);}break;case 7:if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTFolder || data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTMail) {rowToOrder.setObject(new Double(0));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTDocument) {String version = ((GWTDocument) data.get(Integer.parseInt(rowI[colDataIndex]))).getActualVersion().getName();String[] numberParts = version.split(\"\\\\.\");version = \"\";for (int x@ x = 0@ x < numberParts.length++){switch(numberParts[x].length()) {case 1:version = version + \"00\" + numberParts[x];break;case 2:version = version + \"0\" + numberParts[x];break;}}if (numberParts.length == 2) {version = version + \"000000\";}if (numberParts.length == 3) {version = version + \"000\";}rowToOrder.setObject(new Double(version));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);}break;case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTFolder) {rowToOrder.setObject(getExtraColumn((GWTFolder) data.get(Integer.parseInt(rowI[colDataIndex])), correctedColumn));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTMail) {rowToOrder.setObject(getExtraColumn((GWTMail) data.get(Integer.parseInt(rowI[colDataIndex])), correctedColumn));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTDocument) {rowToOrder.setObject(getExtraColumn((GWTDocument) data.get(Integer.parseInt(rowI[colDataIndex])), correctedColumn));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);}break;}if (selectedRow == i) {selectedRowDataID = rowToOrder.getDataId();}}switch(correctedColumn) {case 0:case 1:case 2:case 3:case 6:Collections.sort(elementToOrder, ColumnComparatorText.getInstance());break;case 4:case 7:Collections.sort(elementToOrder, ColumnComparatorDouble.getInstance());break;case 5:Collections.sort(elementToOrder, ColumnComparatorDate.getInstance());break;case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:Collections.sort(elementToOrder, ColumnComparatorGWTFormElement.getInstance());break;}if (!ascending) {Collections.reverse(elementToOrder);}applySort(elementList, elementToOrder);}Main.get().mainPanel.desktop.browser.fileBrowser.status.unsetFlagOrdering();}\n", "public static void main(String[] args) {Id itemId = initItem(contextA);Id versionId = initVersion(contextA, itemId, null);Id elementID = initElement(contextA, itemId, versionId);GetElementList getElementList = new GetElementList();Collection<ElementInfo> elementList = getElementList.getElements(contextA, itemId, versionId, null);elementList.forEach(elementInfo -> printElement(elementInfo));System.exit(0);}\n", "public void save(String filename) throws IOException {log.debug(\"Saving to file \" + filename);try {BufferedWriter pw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename), //$NON-NLS-1$\"UTF8\"));pw.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");pw.newLine();pw.write(\"<properties>\");pw.newLine();pw.write(//$NON-NLS-1$, //$NON-NLS-2$\"<comment>Properties for \" + ProgramConstants.PROGRAM_NAME + \" v\" + ProgramConstants.PROGRAM_VERSION + //$NON-NLS-1$\"</comment>\");pw.newLine();Enumeration<Object> keys = keys();List<String> elementList = new ArrayList<String>();while (keys.hasMoreElements()) {elementList.add((String) keys.nextElement());}Collections.sort(elementList);for (int i@ i = 0@ i < elementList.size()++){String element = elementList.get(i);pw.write(//$NON-NLS-1$\"<entry key=\\\"\" + element + //$NON-NLS-1$\"\\\">\" + JFritzUtils.convertSpecialChars(JFritzUtils.deconvertSpecialChars(getProperty(element))) + //$NON-NLS-1$\"</entry>\");pw.newLine();}pw.write(\"</properties>\");pw.newLine();pw.close();} catch (UnsupportedEncodingException e) {log.error(\"UTF-8 not supported.\");} catch (FileNotFoundException e) {log.error(\"Could not write \" + filename + \"!\");} catch (IOException e) {log.error(\"IOException \" + filename);}}\n", "private void sort(int column, boolean ascending) {int rows = Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.getDataTable().getRowCount();int columns = Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.getDataTable().getColumnCount();int selectedRow = Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.getSelectedRow();Map<Integer, GWTQueryResult> data = new HashMap<Integer, GWTQueryResult>(Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.data);List<String[]> elementList = new ArrayList<String[]>();List<GWTObjectToOrder> elementToOrder = new ArrayList<GWTObjectToOrder>();int correctedColumn = correctedColumnIndex(column);if (correctedColumn <= 16) {for (int i@ i = 0@ i < rows++){String[] rowI = new String[columns];GWTObjectToOrder rowToOrder = new GWTObjectToOrder();for (int x@ x = 0@ x < columns++){rowI[x] = Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.getDataTable().getHTML(i, x);}elementList.add(i, rowI);switch(correctedColumn) {case 0:case 1:case 5:case 6:rowToOrder.setObject(rowI[column].toLowerCase());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 2:if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument().getName().toLowerCase());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment().getName().toLowerCase());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder().getName().toLowerCase());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail().getSubject().toLowerCase());}rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 3:if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument() != null) {rowToOrder.setObject(new Double(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument().getActualVersion().getSize()));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment() != null) {rowToOrder.setObject(new Double(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment().getActualVersion().getSize()));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder() != null) {rowToOrder.setObject(new Double(0));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail() != null) {rowToOrder.setObject(new Double(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail().getSize()));}rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 4:if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument().getLastModified());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment().getLastModified());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder().getCreated());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail().getReceivedDate());}rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument() != null) {rowToOrder.setObject(getExtraColumn(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument(), correctedColumn));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment() != null) {rowToOrder.setObject(getExtraColumn(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment(), correctedColumn));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder() != null) {rowToOrder.setObject(getExtraColumn(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder(), correctedColumn));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail() != null) {rowToOrder.setObject(getExtraColumn(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail(), correctedColumn));}rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;}if (selectedRow == i) {selectedRowDataID = rowToOrder.getDataId();}}switch(correctedColumn) {case 0:case 1:case 2:case 5:case 6:Collections.sort(elementToOrder, ColumnComparatorText.getInstance());break;case 3:Collections.sort(elementToOrder, ColumnComparatorDouble.getInstance());break;case 4:Collections.sort(elementToOrder, ColumnComparatorDate.getInstance());break;case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:Collections.sort(elementToOrder, ColumnComparatorGWTFormElement.getInstance());break;}if (!ascending) {Collections.reverse(elementToOrder);}applySort(elementList, elementToOrder);}}\n", "public static void main(String[] args) {int elementIndex = 1;Scanner inputElement = new Scanner(System.in);ArrayList elementlist = new ArrayList();boolean inputOver = false;System.out.printf(\"请任意输入N行N个字符串\");System.out.printf(\"当输入inputOver时结束\");do {System.out.printf(\"输入第\" + elementIndex + \"个字符串\");System.out.printf(\">>\");String input = inputElement.nextLine();if (input.equals(\"inputOver\")) {inputOver = true;System.out.println(\"输入完毕！\");} else {elementlist.add(input);elementIndex++;}} while (//用do-while语句加上if判断来控制输入N行夹杂数字大小写的字符串inputOver == false);elementIndex = elementIndex - 1;System.out.printf(\"排序前:\");String[] newArray = new String[elementIndex];for (int k@ k = 0@ k < elementIndex@ k++) System.out.printf(\">> \" + elementlist.get() + \"\";for (int index@ index = 0@ index < elementIndex@ index++) newArray[@ index] = elementlist.get().toString(;for (int i@ i = 0@ i < elementIndex@ i++) newArray[@ i] = newArray[@ i].replaceAll(\"\\\\d+\", \"\");for (String element : newArray) System.out.printf(element + \"\");System.out.prntln(\"排序后\";for (int listIndex@ listIndex = 0@ listIndex < newArray.length++){sortArrays(listIndex, newArray);}}\n"]}
{"name": "HumanEval_146_specialFilter", "description": "Write a function that takes an array array list of numbers as input and returns the number of elements in the array array list that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9). For example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public static String lunarYear2GanZhi(final int lunarYear) {final String[] tianGan = { \"甲\", \"乙\", \"丙\", \"丁\", \"戊\", \"己\", \"庚\", \"辛\", \"壬\", \"癸\" };final String[] diZhi = { \"子\", \"丑\", \"寅\", \"卯\", \"辰\", \"巳\", \"午\", \"未\", \"申\", \"酉\", \"戌\", \"亥\" };return tianGan[(lunarYear - 4) % 10] + diZhi[(lunarYear - 4) % 12] + \"年\";}\n"]}
{"name": "HumanEval_60_sum_to_n", "description": "sum_to_n is a function that sums numbers from 1 to n.", "codematcher_results": ["protected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.activity_example);Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);setSupportActionBar(toolbar);final FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);final TextView functionNumber = (TextView) findViewById(R.id.functions_number);final Spinner themeSpinner = (Spinner) findViewById(R.id.theme_spinner);ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.debugkit_themes, android.R.layout.simple_spinner_item);adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);themeSpinner.setAdapter(adapter);themeSpinner.setOnItemSelectedListener(this);mSeekbar = (SeekBar) findViewById(R.id.seekBar);mSeekbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {;public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {functionNumber.setText(Integer.toString(progress));};public void onStartTrackingTouch(SeekBar seekBar) {};public void onStopTrackingTouch(SeekBar seekBar) {}});functionNumber.setText(Integer.toString(mSeekbar.getProgress()));fab.setOnClickListener(new View.OnClickListener() {;public void onClick(View v) {final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);if (mSeekbar != null) {for (int i@ i = 0@ i < mSeekbar.getProgress()++){builder.addFunction(doSomeStuff());}}builder.setTextSize(mTextSize).setTheme(mTheme).build();}});final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);builder.addFunction(new DebugFunction(\"Do some stuff\") {;public String call() throws Exception {return \"This function has a title\";}}).addFunction(new DebugFunction.Clear(\"Clear\")).addFunction(new DebugFunction(\"Make ShPrf\") {;public String call() throws Exception {SharedPreferences.Editor editor = ExampleActivity.this.getSharedPreferences(PREFS_FILE_NAME, Context.MODE_PRIVATE).edit();editor.putString(\"UpdatedAt\", new Date(System.currentTimeMillis()).toString());editor.putBoolean(\"Key 1\", true);editor.putString(\"Key 2\", \"value\");editor.putString(\"Key 3\", \"value 2\");editor.apply();return \"Preferences file has been created.\";}}).addFunction(new DebugFunction.DumpSharedPreferences(\"Shared prefs\", PREFS_FILE_NAME));builder.setTextSize(mTextSize).displayAt(50, 200).setTheme(mTheme).build();}\n", "public String toString() {return \"FileMeasures [functionNumber=\" + functionNumber + \", contractNumber=\" + contractNumber + \", statementNumber=\" + statementNumber + \", contractComplexity=\" + contractComplexity + \", functionComplexity=\" + functionComplexity + \", fileComplexity=\" + fileComplexity + \", fileCognitiveComplexity=\" + fileCognitiveComplexity + \", linesOfCodeNumber=\" + linesOfCodeNumber + \", commentLinesNumber=\" + commentLinesNumber + \"]\";}\n", "public PlayerInputs(int functionNumber) {mInputs = new CopyOnWriteArrayList<Object>();mFunctionNumber = functionNumber;mFinishedNumber = new AtomicInteger();}\n", "public PlayerInputs(List<Object> list, int functionNumber) {if (list instanceof CopyOnWriteArrayList<?>) {mInputs = (CopyOnWriteArrayList<Object>) list;} else {mInputs = new CopyOnWriteArrayList<Object>(list);}mFunctionNumber = functionNumber;mFinishedNumber = new AtomicInteger();}\n", "public OrderStateMap(int stateId, String stateTitle, String stateDesc, String stateTime, String stateIcon, String functionNumber, String phoneNumType) {this.stateId = stateId;this.stateTitle = stateTitle;this.stateDesc = stateDesc;this.stateTime = stateTime;this.stateIcon = stateIcon;this.functionNumber = functionNumber;this.phoneNumType = phoneNumType;}\n", "private static void createFacetBase(ComponentFacet cf, int level, MtasDataCollector<?, ?> dataCollector, Map<Integer, Integer> positionsData, Map<MtasSpanQuery, Map<Integer, Integer>> spansNumberData, Map<String, SortedMap<String, int[]>> facetData, Integer[] docSet) throws IOException {for (MtasFunctionParserFunction function : cf.baseFunctionParserFunctions[level]) {if (function.needArgumentsNumber() > cf.spanQueries.length) {throw new IOException(\"function \" + function + \" expects (at least) \" + function.needArgumentsNumber() + \" queries\");}}Map<String, int[]> list = facetData.get(cf.baseFields[level]);if (dataCollector != null) {MtasDataCollector<?, ?> subDataCollector = null;dataCollector.initNewList(1);if (cf.baseFunctionList[level] != null) {SubComponentFunction[] tmpList;if (!cf.baseFunctionList[level].containsKey(dataCollector)) {tmpList = new SubComponentFunction[cf.baseFunctionParserFunctions[level].length];cf.baseFunctionList[level].put(dataCollector, tmpList);for (int i@ i = 0@ i < cf.baseFunctionParserFunctions[level].length++){try {tmpList[i] = new SubComponentFunction(DataCollector.COLLECTOR_TYPE_LIST, cf.baseFunctionKeys[level][i], cf.baseFunctionTypes[level][i], cf.baseFunctionParserFunctions[level][i], null, null, 0, Integer.MAX_VALUE, null, null);} catch (ParseException e) {throw new IOException(e.getMessage());}}} else {tmpList = cf.baseFunctionList[level].get(dataCollector);}for (SubComponentFunction function : tmpList) {function.dataCollector.initNewList(1);}}if (dataCollector.getCollectorType().equals(DataCollector.COLLECTOR_TYPE_LIST)) {dataCollector.setWithTotal();if (docSet.length > 0 && list.size() > 0) {HashMap<String, Integer[]> docLists = new HashMap<>();HashMap<String, String> groupedKeys = new HashMap<>();boolean documentsInFacets = false;for (Entry<String, int[]> entry : list.entrySet()) {if (!groupedKeys.containsKey(entry.getKey())) {groupedKeys.put(entry.getKey(), groupedKeyName(entry.getKey(), cf.baseRangeSizes[level], cf.baseRangeBases[level]));}Integer[] docList = intersectedDocList(entry.getValue(), docSet);if (docList != null && docList.length > 0) {documentsInFacets = true;}if (docLists.containsKey(groupedKeys.get(entry.getKey()))) {docLists.put(groupedKeys.get(entry.getKey()), mergeDocLists(docLists.get(groupedKeys.get(entry.getKey())), docList));} else {docLists.put(groupedKeys.get(entry.getKey()), docList);}}if (documentsInFacets) {Map<Integer, long[]> args = computeArguments(spansNumberData, cf.spanQueries, docSet);if (cf.baseDataTypes[level].equals(CodecUtil.DATA_TYPE_LONG)) {boolean applySumRule = false;if (cf.baseStatsTypes[level].equals(CodecUtil.STATS_BASIC) && cf.baseParsers[level].sumRule() && (cf.baseMinimumLongs[level] == null) && (cf.baseMaximumLongs[level] == null)) {applySumRule = true;if (cf.baseFunctionList[level].get(dataCollector) != null) {for (SubComponentFunction function : cf.baseFunctionList[level].get(dataCollector)) {if (!function.statsType.equals(CodecUtil.STATS_BASIC) || !function.parserFunction.sumRule() || function.parserFunction.needPositions()) {applySumRule = false;break;}}}}if (applySumRule) {for (String key : new LinkedHashSet<String>(groupedKeys.values())) {if (docLists.get(key).length > 0) {Integer[] subDocSet = docLists.get(key);int length = cf.baseParsers[level].needArgumentsNumber();long[] valueSum = new long[length];long valuePositions = 0;if (subDocSet.length > 0) {long[] tmpArgs;for (int docId : subDocSet){tmpArgs = args.get(docId);if (positionsData != null && positionsData.containsKey(docId) && positionsData.get(docId) != null) {valuePositions += positionsData.get(docId).longValue();}if (tmpArgs != null) {for (int i@ i = 0@ i < length++){valueSum[i] += tmpArgs[i];}}}long value;try {value = cf.baseParsers[level].getValueLong(valueSum, valuePositions);subDataCollector = dataCollector.add(key, value, subDocSet.length);} catch (IOException e) {log.debug(e);dataCollector.error(key, e.getMessage());subDataCollector = null;}if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {SubComponentFunction[] functionList = cf.baseFunctionList[level].get(dataCollector);for (SubComponentFunction function : functionList) {if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {try {long valueLong = function.parserFunction.getValueLong(valueSum, valuePositions);function.dataCollector.add(key, valueLong, subDocSet.length);} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {try {double valueDouble = function.parserFunction.getValueDouble(valueSum, valuePositions);function.dataCollector.add(key, valueDouble, subDocSet.length);} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}}}}if (subDataCollector != null) {createFacetBase(cf, (level + 1), subDataCollector, positionsData, spansNumberData, facetData, subDocSet);}}}}} else {for (String key : new LinkedHashSet<String>(groupedKeys.values())) {if (docLists.get(key).length > 0) {Integer[] subDocSet = docLists.get(key);if (subDocSet.length > 0 && cf.baseDataTypes[level].equals(CodecUtil.DATA_TYPE_LONG)) {long[][] functionValuesLong = null;double[][] functionValuesDouble = null;int[] functionNumber = null;SubComponentFunction[] functionList = null;if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {functionList = cf.baseFunctionList[level].get(dataCollector);functionValuesLong = new long[functionList.length][];functionValuesDouble = new double[functionList.length][];functionNumber = new int[functionList.length];for (int i@ i = 0@ i < functionList.length++){functionValuesLong[i] = new long[subDocSet.length];functionValuesDouble[i] = new double[subDocSet.length];}}int number = 0;Integer[] restrictedSubDocSet = new Integer[subDocSet.length];long[] values = new long[subDocSet.length];for (int docId : subDocSet){long[] tmpArgs = args.get(docId);int tmpPositions = (positionsData == null) ? 0 : (positionsData.get(docId) == null ? 0 : positionsData.get(docId));long value = cf.baseParsers[level].getValueLong(tmpArgs, tmpPositions);if ((cf.baseMinimumLongs[level] == null || value >= cf.baseMinimumLongs[level]) && (cf.baseMaximumLongs[level] == null || value <= cf.baseMaximumLongs[level])) {values[number] = value;restrictedSubDocSet[number] = docId;number++;if (functionList != null) {for (int i@ i = 0@ i < functionList.length++){SubComponentFunction function = functionList[i];if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {try {functionValuesLong[i][functionNumber[i]] = function.parserFunction.getValueLong(tmpArgs, tmpPositions);functionNumber[i]++;} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {try {functionValuesDouble[i][functionNumber[i]] = function.parserFunction.getValueDouble(tmpArgs, tmpPositions);functionNumber[i]++;} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}}}}}}if (number > 0) {subDataCollector = dataCollector.add(key, values, number);if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {for (int i@ i = 0@ i < functionList.length++){SubComponentFunction function = functionList[i];if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {function.dataCollector.add(key, functionValuesLong[i], functionNumber[i]);} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {function.dataCollector.add(key, functionValuesDouble[i], functionNumber[i]);}}}if (subDataCollector != null) {createFacetBase(cf, (level + 1), subDataCollector, positionsData, spansNumberData, facetData, Arrays.copyOfRange(restrictedSubDocSet, 0, number));}}}}}}} else {throw new IOException(\"unexpected dataType \" + cf.baseDataTypes[level]);}}}} else {throw new IOException(\"unexpected type \" + dataCollector.getCollectorType());}dataCollector.closeNewList();if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {SubComponentFunction[] tmpList = cf.baseFunctionList[level].get(dataCollector);for (SubComponentFunction function : tmpList) {function.dataCollector.closeNewList();}}}}\n", "public String getFunctionNumber() {return functionNumber;}\n", "public void setFunctionNumber(String functionNumber) {this.functionNumber = functionNumber;}\n", "public int getFunctionNumber() {return functionNumber;}\n", "public void setFunctionNumber(int functionNumber) {this.functionNumber = functionNumber;}\n"]}
{"name": "HumanEval_26_remove_duplicates", "description": "From an array array list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean isValid(@NonNull View view, @IntRange(from = 0) long duration) {long curTime = System.currentTimeMillis();Object tag = view.getTag(TAG_KEY);if (!(tag instanceof Long)) {view.setTag(TAG_KEY, curTime);return true;}long preTime = (Long) tag;if (curTime - preTime <= duration)return false;view.setTag(TAG_KEY, curTime);return true;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_163_generate_integers", "description": "Given two positive integers a and b, return the even digits between a and b, in ascending order. For example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_9_rolling_max", "description": "From a given array list of integers, generate an array array list of rolling maximum element found until given moment in the sequence.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean isValid(@NonNull View view, @IntRange(from = 0) long duration) {long curTime = System.currentTimeMillis();Object tag = view.getTag(TAG_KEY);if (!(tag instanceof Long)) {view.setTag(TAG_KEY, curTime);return true;}long preTime = (Long) tag;if (curTime - preTime <= duration)return false;view.setTag(TAG_KEY, curTime);return true;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_3_below_zero", "description": "You're given an array array list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return true. Otherwise it should return false.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_69_search", "description": "You are given a non-empty array list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the array list. If no such a value exist, return -1. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_61_correct_bracketing", "description": "brackets is a string of \"(\" and \")\". return true if every opening bracket has a corresponding closing bracket.", "codematcher_results": ["public void isStringReturnsTrue() {assertThat(JSONStringValue.fromString(\"\").isString(), is(true));}\n", "public void isStringReturnsFalse() {assertThat(JSONArrayValue.fromList(EMPTY_LIST).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONBooleanValue.fromValue(true).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONNullValue.NULL.isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONNumberValue.fromLong(0L).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONObjectValue.fromMap(EMPTY_MAP).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(new JSONStubValue().isString(), is(false));}\n", "public void isEmpty_withNullString_returnsTrue() {assertThat(TString.isEmpty(null)).isTrue();}\n", "public void isEmpty_withEmptyString_returnsTrue() {assertThat(TString.isEmpty(\"\")).isTrue();}\n", "public void isEmpty_withNonEmptyString_returnsFalse() {assertThat(TString.isEmpty(\" \")).isFalse();}\n"]}
{"name": "HumanEval_37_sort_even", "description": "This function takes an array array list l and returns an array array list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private static Activity getActivityByView(@NonNull final View view) {Context context = view.getContext();while (context instanceof ContextWrapper) {if (context instanceof Activity) {return (Activity) context;}context = ((ContextWrapper) context).getBaseContext();}Log.e(\"BarUtils\", \"the view's Context is not an Activity.\");return null;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static Activity getActivityByContext(@NonNull Context context) {while (context instanceof ContextWrapper) {if (context instanceof Activity) {return (Activity) context;}context = ((ContextWrapper) context).getBaseContext();}return null;}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_54_same_chars", "description": "Check if two words have the same characters.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_56_correct_bracketing", "description": "brackets is a string of \"<\" and \">\". return true if every opening bracket has a corresponding closing bracket.", "codematcher_results": ["public void isStringReturnsTrue() {assertThat(JSONStringValue.fromString(\"\").isString(), is(true));}\n", "public void isStringReturnsFalse() {assertThat(JSONArrayValue.fromList(EMPTY_LIST).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONBooleanValue.fromValue(true).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONNullValue.NULL.isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONNumberValue.fromLong(0L).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONObjectValue.fromMap(EMPTY_MAP).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(new JSONStubValue().isString(), is(false));}\n", "public void isEmpty_withNullString_returnsTrue() {assertThat(TString.isEmpty(null)).isTrue();}\n", "public void isEmpty_withEmptyString_returnsTrue() {assertThat(TString.isEmpty(\"\")).isTrue();}\n", "public void isEmpty_withNonEmptyString_returnsFalse() {assertThat(TString.isEmpty(\" \")).isFalse();}\n"]}
