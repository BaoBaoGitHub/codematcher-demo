{"name": "HumanEval_23_strlen", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n    // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    public static long strlen(String string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_23_strlen.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_23_strlen", "test": "    }\n    public static void main(String[] args) {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n", "description": "Return length of given string", "codematcher_results": ["public synchronized String put(String key, String value) {properties.put(key, value);String returnString = super.put(key, value);return returnString;}\n", "public void run() {try {int read;StringBuilder returnString = new StringBuilder();while (_running) {while ((read = _in.readByte()) > -1) {returnString.append((char) read);}if (returnString.length() > 0) {_connection.messageReceived(returnString.toString());returnString.setLength(0);}}} catch (IOException ex) {_connection.connectionClosed();_running = false;}}\n", "public Object tag(Map attributes, Closure body) throws Exception {boolean valueDeclared = attributes.containsKey(VALUE);Object value = null;if (valueDeclared) {value = resolve(attributes, VALUE);if (value == null) {value = resolve(attributes, \"null\");}}Object format = resolve(attributes, \"format\");Object escape = resolve(attributes, \"escape\");Object pretty = resolve(attributes, \"pretty\");if (pretty != null && !(pretty instanceof Boolean)) {pretty = Boolean.valueOf(pretty.toString());}Object to = resolve(attributes, \"to\");boolean returnTo = true;if (to == null) {returnTo = false;to = get(body, OUT);}if (to == null) {throw new IllegalArgumentException(\"write tag requires valid Writer or String.class for 'to'\");}Object filter = resolve(attributes, \"filter\");Writer writer;boolean returnString = false;if (to instanceof Writer) {writer = (Writer) to;} else if (to.equals(String.class) || to instanceof CharSequence) {writer = new CharArrayWriter();returnString = true;} else {throw new IllegalArgumentException(\"write tag requires valid Writer or String.class for 'to', unrecognized option \" + to);}Writer returnWriter = writer;if (escape != null) {String esc = escape.toString();if (esc.equalsIgnoreCase(\"xml\")) {writer = new XmlEscapingWriter(writer);} else if (esc.equalsIgnoreCase(\"json\")) {writer = new JsonEscapingWriter(writer);} else if (esc.equalsIgnoreCase(\"html\")) {writer = new HtmlEscapingWriter(writer);} else {throw new IllegalArgumentException(\"Unrecognized escape value \" + esc + \", try xml or json\");}}if (value == null) {Object oldOut = get(body, OUT);bind(body, OUT, writer);try {value = body.call();} finally {bind(body, OUT, oldOut);}}if (value != null) {if (format != null && !\"json\".equals(format) && !\"xml\".equals(format) && !\"~\".equals(format)) {Formatter formatter = new Formatter(writer);if (value instanceof Collection) {formatter.format(format.toString(), ((Collection) value).toArray());} else {formatter.format(format.toString(), value);}} else {if (value instanceof CharSequence) {writer.append((CharSequence) value);} else if ((filter == null) && (value instanceof Writable) && (value != body.getOwner())) {((Writable) value).writeTo(writer);} else {ModelWalker mw;if (format == null) {Object response = get(body, \"response\");if (response != null) {MetaClass mc = GroovySystem.getMetaClassRegistry().getMetaClass(response.getClass());MetaProperty mp = mc.hasProperty(response, \"contentType\");if (mp != null) {String ct = (String) mp.getProperty(response);if (ct != null && ct.contains(\"xml\")) {format = \"xml\";}}}}if (\"xml\".equals(format)) {if (pretty != null && ((Boolean) pretty).booleanValue()) {mw = new ModelXmlWriter(writer, \"\\t\");pretty = Boolean.FALSE;} else {mw = new ModelXmlWriter(writer);}String root = resolve(attributes, \"root\", String.class);if (root != null) {((ModelXmlWriter) mw).setRootElementName(root);};if (prefixes != null) {((ModelXmlWriter) mw).setNamespacePrefixes(prefixes);}} else if (\"~\".equals(format)) {mw = new ModelTemplateWriter(writer);} else {if (pretty != null && ((Boolean) pretty).booleanValue()) {mw = new ModelJsonWriter(writer, \"\\t\");pretty = Boolean.FALSE;} else {mw = new ModelJsonWriter(writer);}}if (filter != null) {ModelFilter[] mfa = null;if (filter instanceof Collection) {Collection src = (Collection) filter;mfa = new ModelFilter[src.size()];int pos = 0;for (Object mf : src) {mfa[pos++] = (ModelFilter) DefaultTypeTransformation.castToType(mf, ModelFilter.class);}} else if (filter.getClass().isArray() && filter.getClass().getComponentType().equals(ModelFilter.class)) {mfa = (ModelFilter[]) filter;} else if (filter instanceof ModelFilter) {mfa = new ModelFilter[] { (ModelFilter) filter };} else {mfa = new ModelFilter[] { (ModelFilter) DefaultTypeTransformation.castToType(filter, ModelFilter.class) };}mw.setFilters(mfa);}mw.visit(value);}}}if (!returnTo) {return null;}Object rval = returnString ? returnWriter.toString() : returnWriter;if (attributes.get(VAR) != null) {bind(body, attributes.get(VAR).toString(), rval);}return rval;}\n", "public void run() {try {Properties props = new Properties();ORB orb = ORB.init(args, props);String corbalocURL = System.getProperty(TestConstants.URL_PROPERTY);Object obj = orb.string_to_object(corbalocURL);if (obj == null) {System.err.println(\"string_to_object(\" + corbalocURL + \") failed..\");System.err.flush();signalError();}Hello helloRef = HelloHelper.narrow(obj);String returnString = helloRef.sayHello();if (!returnString.equals(TestConstants.returnString)) {System.err.println(\" hello.sayHello() did not return..\" + TestConstants.returnString);System.err.flush();signalError();}System.out.println(\"INS Test Passed..\");} catch (Exception e) {e.printStackTrace(System.err);signalError();}System.out.println(\"Thread \" + Thread.currentThread() + \" done.\");}\n", "public void hook() {DexposedBridge.findAndHookMethod(ReturnTypeTarget.class, \"returnString\", String.class, new LogMethodHook());System.gc();}\n", "public void test() {DexposedBridge.findAndHookMethod(ReturnTypeTarget.class, \"returnString\", String.class, new LogMethodHook() {;protected void beforeHookedMethod(MethodHookParam param) throws Throwable {param.setResult(returnTypeModified);super.beforeHookedMethod(param);}});}\n", "String utf8(int _offset) {final int utflen = u2(_offset);_offset += 2;final byte[] bytearr = new byte[utflen];final char[] chararr = new char[utflen];int c, char2, char3;int count = 0;int chararr_count = 0;for (int i@ i = 0@ i < utflen++){bytearr[i] = b(_offset + i);}_offset += utflen;while (count < utflen) {c = bytearr[count] & 0xff;if (c > 127) {break;}count++;chararr[chararr_count++] = (char) c;}while (count < utflen) {c = bytearr[count] & 0xff;switch(c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:count++;chararr[chararr_count++] = (char) c;break;case 12:case 13:count += 2;if (count > utflen) {System.out.println(\"malformed input: partial character at end\");return (null);}char2 = bytearr[count - 1];if ((char2 & 0xC0) != 0x80) {System.out.println(\"malformed input around byte \" + count);return (null);}chararr[chararr_count++] = (char) (((c & 0x1F) << 6) | (char2 & 0x3F));break;case 14:count += 3;if (count > utflen) {System.out.println(\"malformed input: partial character at end\");return (null);}char2 = bytearr[count - 2];char3 = bytearr[count - 1];if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {System.out.println(\"malformed input around byte \" + (count - 1));return (null);}chararr[chararr_count++] = (char) (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));break;default:System.out.println(\"malformed input around byte \" + count);return (null);}}final String returnString = new String(chararr, 0, chararr_count);return (returnString);}\n", "public static String post(String url, String payload, String cookie, Form form) throws IOException {String returnString = null;try {returnString = Request.Post(url).connectTimeout(3000).setHeader(\"cookie\", cookie).bodyForm(form != null ? form.build() : Form.form().build()).setHeader(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0Win64x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36\").bodyString(payload, ContentType.APPLICATION_JSON).execute().returnContent().asString();} catch (IOException e) {e.printStackTrace();}return returnString;}\n", "private static String trim(String inputString, int length) {String returnString = inputString;if (returnString != null && returnString.length() > length) {returnString = returnString.substring(0, length - 1);}return returnString;}\n", "public static Object trace(JoinPoint joinPoint) {long start = System.currentTimeMillis();Object result = null;Signature signature = joinPoint.getSignature();MethodSignature methodSignature = (MethodSignature) signature;Method method = methodSignature.getMethod();if (method.isAnnotationPresent(Trace.class)) {Object traceId = TraceInheritParamManager.gettraceParam(TRACE_ID);Trace traceAnnotation = method.getAnnotation(Trace.class);Object processName = TraceInheritParamManager.gettraceParam(PROCESS_NAME);Object globalProcessStep = TraceInheritParamManager.gettraceParam(\"processStep\");String sessionId = (String) TraceInheritParamManager.gettraceParam(\"sessionId\");if (processName == null) {processName = traceAnnotation.processName();TraceInheritParamManager.settraceParam(PROCESS_NAME, traceAnnotation.processName());}if (traceId == null) {traceId = UUID.randomUUID();TraceInheritParamManager.settraceParam(TRACE_ID, traceId);TraceParamManager.settraceParam(TRACE_ID, traceId);TraceParamManager.settraceParam(PROCESS_NAME, TraceInheritParamManager.gettraceParam(PROCESS_NAME));}if (globalProcessStep == null) {globalProcessStep = new AtomicLong(0);TraceInheritParamManager.settraceParam(\"processStep\", globalProcessStep);}long thisProcessStepValue = TraceUtil.getThisProcessStepValue(traceId, (AtomicLong) globalProcessStep);String argsString = getArgsJson(joinPoint.getArgs());StringBuilder returnString = new StringBuilder();result = getResult((ProceedingJoinPoint) joinPoint);if (result != null) {returnString.append(gson.toJson(result));}long end = System.currentTimeMillis();logger.info(\"threadId:\" + Thread.currentThread().getId() + \" triceId:\" + traceId + \" sessionId:\" + sessionId + \" ProcessName:\" + processName + \" ProcessStep:\" + TraceUtil.Long2TraceStepString(thisProcessStepValue) + \" Joinpoint:\" + joinPoint + \" argsJson:\" + argsString + \" returnJson:\" + returnString + \" cost:\" + (end - start) + \" ms!\");}return result;}\n"]}
{"name": "HumanEval_89_encrypt", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    public static String encrypt(String s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_89_encrypt.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_89_encrypt", "test": "    }\n    public static void main(String[] args) {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n", "description": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places. For example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public void functionIndex_IndexAsString() throws Exception {functionIndex(\"'2'\");}\n"]}
{"name": "HumanEval_95_check_dict_case", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a hash map, return true if all keys are strings in lower \n    // case or all keys are strings in upper case, else return false.\n    // The function should return false is the given hash map is empty.\n    // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n    // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_95_check_dict_case.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_95_check_dict_case", "test": "    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n    }\n\n}\n", "description": "Given a hash map, return true if all keys are strings in lower case or all keys are strings in upper case, else return false. The function should return false is the given hash map is empty. Examples:", "codematcher_results": ["public StringStringMapEntry(String key, String value) {this.key = key;this.value = value;}\n", "protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {;File fileBufferedImage waterimg=null} //StringString message = \"\";String sort = \"\";FileOutputStream out = null;try {System.out.println(\"\u5f00\u59cb\u63a5\u53d7\u56fe\u7247\");DiskFileItemFactory factory = new DiskFileItemFactory();ServletFileUpload upload = new ServletFileUpload(factory);upload.setHeaderEncoding(\"UTF-8\");if (!ServletFileUpload.isMultipartContent(request)) {System.out.println(\"\u89e3\u6790\u51fa\u9519\");return;}List<FileItem> list = upload.parseRequest(request);for (FileItem item : list) {if (item.isFormField()) {String name = item.getFieldName();String value = item.getString(\"UTF-8\");sort = value;System.out.println(name + \"=\" + value);} else {String filename = item.getName();System.out.println(filename);System.out.println(sort);if (filename == null || filename.trim().equals(\"\")) {continue;};InputStream in = item.getInputStream();out = new FileOutputStream(new File(\"d:\\\\hahahha.txt\"));byte[] b = new byte[1024];while (in.read(b) != -1) {String msg = new String(new String(b));System.out.println(msg);out.write(b);};}in.close();item.delete();message = \"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\";}}} catch (Exception e) {message = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\";e.printStackTrace();} finally {if (out != null) {out.close();}}}\n", "private Map<String, String> getMap(final List<StringString> sample) {HashMap<String, String> map = new HashMap<String, String>();for (int i@ i = 0@ i < sample.size()++){map.put(sample.get(i).key, sample.get(i).value);}return (Map) map;}\n", "public Circle(// sets k, u, v, w by StringString coeffString, // sets k, u, v, w by StringString radXString, // sets k, u, v, w by StringString radYString, // sets k, u, v, w by StringString radZString) {HomogenousPolynomial coeff = new HomogenousPolynomial(coeffString);HomogenousVector radCoeffs = new HomogenousVector(radXString, radYString, radZString);if (coeff.equalsZero())throw new IllegalArgumentException(\"coefficient must be nonzero\");if (coeff.degree() + 2 != radCoeffs.degree())throw new IllegalArgumentException(\"degree of radical coefficients must be two more than degree of coefficient\");this.coeff = coeff;this.radCoeffs = radCoeffs;}\n", "public ArrayList<StringString> getData(String dataName) {return getList(getDataMap(dataName));}\n", "private ArrayList<StringString> getList(final Map<String, String> sample) {ArrayList<StringString> StringString_sample = new ArrayList<StringString>();for (Map.Entry<String, String> x : sample.entrySet()) {StringString v = new StringString();v.key = x.getKey();v.value = x.getValue();StringString_sample.add(v);}return StringString_sample;}\n", "public static Transform<String, String> transform(List<String> transforms, Map<String, Transform<String, String>> stringToStringTransforms, Map<String, Transform<Object, String>> objectToStringTransforms, Map<String, Transform<String, Object>> stringToObjectTransforms, Map<String, Transform<Object, Object>> objectToObjectTransforms) throws ConfigurationException {int state = STRING_STATE;Transform<String, String> stringIdentity = (s) -> s;Transform<String, String> stringString = stringIdentity;Transform<String, Object> stringObject = null;for (String t : transforms) {String op = parseOperationNameFromTransform(t);Map<String, String> parameters = parseParametersFrom(t);switch(state) {case STRING_STATE:if (stringToStringTransforms.containsKey(op)) {Transform<String, String> transform = stringToStringTransforms.get(op);stringString = stringString.andThen(transform);} else if (stringToObjectTransforms.containsKey(op)) {Transform<String, Object> transform = stringToObjectTransforms.get(t);stringObject = stringString.andThen(transform);state = OBJECT_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from string state\");}break;case OBJECT_STATE:if (objectToObjectTransforms.containsKey(op)) {Transform<Object, Object> transform = objectToObjectTransforms.get(op);stringObject = transform.compose(stringObject);} else if (objectToStringTransforms.containsKey(op)) {Transform<Object, String> transform = objectToStringTransforms.get(op);stringString = stringObject.andThen(transform);state = STRING_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from obj state\");}break;}}return stringString;}\n", "' stringString readString(DataInputStream stream) throws IOException {String line = stream.readLine();if (line == null)return null;int len = Integer.parseInt(line);byte[] buffer = new byte[len];stream.readFully(buffer);return new String(buffer, StandardCharsets.ISO_8859_1);}\n", "HttpURLConnection conn = initHttp(url,if;String valueString = nullStringBuffer bufferRes =while ((valueString = read.readLine()) != null) {} in.close();} else { BufferedInputStream bis =String ds =String fullName =StringString suffix;att.setFileName(relName);} return att}public static String initParams(String url, Map<String, String> params) throws UnsupportedEncodingException {if (null == params || params.isEmpty()) {return url;}StringBuilder sb = new StringBuilder(url);if (url.indexOf(\"?\") == -1) {sb.append(\"?\");}sb.append(map2Url(params));return sb.toString();}\n", "public void testOptInt() {assertEquals(33, somenil.optint(33));throwsError(sometrue, \"optint\", int.class, new Integer(33));throwsError(somefalse, \"optint\", int.class, new Integer(33));assertEquals(0, zero.optint(33));assertEquals(sampleint, intint.optint(33));assertEquals((int) samplelong, longdouble.optint(33));assertEquals((int) sampledouble, doubledouble.optint(33));throwsError(somefunc, \"optint\", int.class, new Integer(33));throwsError(someclosure, \"optint\", int.class, new Integer(33));throwsError(stringstring, \"optint\", int.class, new Integer(33));assertEquals(sampleint, stringint.optint(33));assertEquals((int) samplelong, stringlong.optint(33));assertEquals((int) sampledouble, stringdouble.optint(33));throwsError(thread, \"optint\", int.class, new Integer(33));throwsError(table, \"optint\", int.class, new Integer(33));throwsError(userdataobj, \"optint\", int.class, new Integer(33));throwsError(userdatacls, \"optint\", int.class, new Integer(33));}\n"]}
{"name": "HumanEval_85_add", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty array list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // >>> add((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)6l, (long)7l))))\n    // (2l)\n    public static long add(ArrayList<Long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_85_add.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)88l)))) == (88l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l, (long)2l, (long)122l)))) == (122l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)0l, (long)6l, (long)7l)))) == (0l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)6l, (long)8l)))) == (12l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_85_add", "test": "    }\n    public static void main(String[] args) {\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)88l)))) == (88l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l, (long)2l, (long)122l)))) == (122l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)0l, (long)6l, (long)7l)))) == (0l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)6l, (long)8l)))) == (12l));\n    }\n\n}\n", "description": "Given a non-empty array list of integers lst. add the even elements that are at odd indices.. Examples:", "codematcher_results": ["public ArrayListOfIntegers(ArrayList<Integer> items) {this.items = items;}\n", "public static List<File> unzipFile(final File zipFile, final File destDir) throws IOException {return unzipFileByKeyword(zipFile, destDir, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getComments(final String zipFilePath) throws IOException {return getComments(getFileByPath(zipFilePath));}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "public static List<String> getFilesPath(final String zipFilePath) throws IOException {return getFilesPath(getFileByPath(zipFilePath));}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_140_fix_spaces", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    public static String fixSpaces(String text) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_140_fix_spaces.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_140_fix_spaces", "test": "    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n", "description": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_63_fibfib", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n    public static long fibfib(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_63_fibfib.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_63_fibfib", "test": "    }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n", "description": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static double distance(double lngA, double latA, double lngB, double latB) {int earthR = 6371000;double x = Math.cos(latA * PI / 180) * Math.cos(latB * PI / 180) * Math.cos((lngA - lngB) * PI / 180);double y = Math.sin(latA * PI / 180) * Math.sin(latB * PI / 180);double s = x + y;if (s > 1)s = 1;if (s < -1)s = -1;double alpha = Math.acos(s);return alpha * earthR;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static String doHttpAction(String data, boolean json, boolean post, String url) {HttpURLConnection connection = null;DataOutputStream os = null;InputStream is = null;try {URL sUrl = new URL(url);connection = (HttpURLConnection) sUrl.openConnection();connection.setConnectTimeout(CONNECT_TIMEOUT_TIME);connection.setReadTimeout(READ_TIMEOUT_TIME);if (post) {connection.setRequestMethod(\"POST\");} else {connection.setRequestMethod(\"GET\");}connection.setDoInput(true);connection.setDoOutput(true);connection.setUseCaches(false);connection.setInstanceFollowRedirects(true);if (json) {connection.setRequestProperty(\"Content-Type\", \"application/json\");} else {connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");connection.setRequestProperty(\"Content-Length\", data.length() + \"\");}connection.connect();os = new DataOutputStream(connection.getOutputStream());os.write(data.getBytes(), 0, data.getBytes().length);os.flush();os.close();is = connection.getInputStream();Scanner scan = new Scanner(is);scan.useDelimiter(\"\\\\A\");if (scan.hasNext())return scan.next();} catch (Exception e) {e.printStackTrace();} finally {if (connection != null)connection.disconnect();if (os != null) {try {os.close();} catch (IOException e) {e.printStackTrace();}}if (is != null) {try {is.close();} catch (IOException e) {e.printStackTrace();}}}return null;}\n", "private static boolean startActivity(final Intent intent, final Context context, final Bundle options) {if (!isIntentAvailable(intent)) {Log.e(\"ActivityUtils\", \"intent is unavailable\");return false;}if (!(context instanceof Activity)) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);}if (options != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {context.startActivity(intent, options);} else {context.startActivity(intent);}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean startActivityForResult(final Intent intent, final Activity activity, final int requestCode, final Bundle options) {if (!isIntentAvailable(intent)) {Log.e(\"ActivityUtils\", \"intent is unavailable\");return false;}if (options != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {activity.startActivityForResult(intent, requestCode, options);} else {activity.startActivityForResult(intent, requestCode);}return true;}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_151_double_the_difference", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of numbers, return the sum of squares of the numbers\n    // in the array list that are odd. Ignore numbers that are negative or not integers.\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)0l))))\n    // (10l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)-1l, (long)-2l, (long)0l))))\n    // (0l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)9l, (long)-2l))))\n    // (81l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)0l))))\n    // (0l)\n    // If the input array list is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_151_double_the_difference.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList()))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)5.0f, (float)4.0f)))) == (25l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.1f, (float)0.2f, (float)0.3f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-10.0f, (float)-20.0f, (float)-30.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)-2.0f, (float)8.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.2f, (float)3.0f, (float)5.0f)))) == (34l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f)))) == (165l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_151_double_the_difference", "test": "    }\n    public static void main(String[] args) {\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList()))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)5.0f, (float)4.0f)))) == (25l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.1f, (float)0.2f, (float)0.3f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-10.0f, (float)-20.0f, (float)-30.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)-2.0f, (float)8.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.2f, (float)3.0f, (float)5.0f)))) == (34l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f)))) == (165l));\n    }\n\n}\n", "description": "Given an array array list of numbers, return the sum of squares of the numbers in the array list that are odd. Ignore numbers that are negative or not integers.", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_22_filter_integers", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter given array list of any javathon values only for integers\n    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)3.14f, (String)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, \"abc\", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_22_filter_integers.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(4l, new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList()), 23.2f, 9l, \"adasd\")))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)9l)))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(3l, \"c\", 3l, 3l, \"a\", \"b\")))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_22_filter_integers", "test": "    }\n    public static void main(String[] args) {\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(4l, new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList()), 23.2f, 9l, \"adasd\")))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)9l)))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(3l, \"c\", 3l, 3l, \"a\", \"b\")))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l)))));\n    }\n\n}\n", "description": "Filter given array list of any javathon values only for integers", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFile(final File zipFile, final File destDir) throws IOException {return unzipFileByKeyword(zipFile, destDir, null);}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "public static List<String> getFilesPath(final String zipFilePath) throws IOException {return getFilesPath(getFileByPath(zipFilePath));}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_41_car_race_collision", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    public static long carRaceCollision(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_41_car_race_collision.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_41_car_race_collision", "test": "    }\n    public static void main(String[] args) {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n", "description": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right;  simultaneously, a different set of n cars are driving right to left.   The two sets of cars start out being very far from each other.  All cars move in the same speed.  Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_17_parse_music", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return array list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l, (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static ArrayList<Long> parseMusic(String music_string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_17_parse_music.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_17_parse_music", "test": "    }\n    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n    }\n\n}\n", "description": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return array list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private static Activity getActivityByView(@NonNull final View view) {Context context = view.getContext();while (context instanceof ContextWrapper) {if (context instanceof Activity) {return (Activity) context;}context = ((ContextWrapper) context).getBaseContext();}Log.e(\"BarUtils\", \"the view's Context is not an Activity.\");return null;}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_79_decimal_to_binary", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\")\n    public static String decimalToBinary(long decimal) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_79_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_79_decimal_to_binary", "test": "    }\n    public static void main(String[] args) {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n", "description": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format. Examples:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "private static String doHttpAction(String data, boolean json, boolean post, String url) {HttpURLConnection connection = null;DataOutputStream os = null;InputStream is = null;try {URL sUrl = new URL(url);connection = (HttpURLConnection) sUrl.openConnection();connection.setConnectTimeout(CONNECT_TIMEOUT_TIME);connection.setReadTimeout(READ_TIMEOUT_TIME);if (post) {connection.setRequestMethod(\"POST\");} else {connection.setRequestMethod(\"GET\");}connection.setDoInput(true);connection.setDoOutput(true);connection.setUseCaches(false);connection.setInstanceFollowRedirects(true);if (json) {connection.setRequestProperty(\"Content-Type\", \"application/json\");} else {connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");connection.setRequestProperty(\"Content-Length\", data.length() + \"\");}connection.connect();os = new DataOutputStream(connection.getOutputStream());os.write(data.getBytes(), 0, data.getBytes().length);os.flush();os.close();is = connection.getInputStream();Scanner scan = new Scanner(is);scan.useDelimiter(\"\\\\A\");if (scan.hasNext())return scan.next();} catch (Exception e) {e.printStackTrace();} finally {if (connection != null)connection.disconnect();if (os != null) {try {os.close();} catch (IOException e) {e.printStackTrace();}}if (is != null) {try {is.close();} catch (IOException e) {e.printStackTrace();}}}return null;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_14_all_prefixes", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return array list of all prefixes from shortest to longest of the input string\n    // >>> allPrefixes((\"abc\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"ab\", (String)\"abc\")))\n    public static ArrayList<String> allPrefixes(String string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_14_all_prefixes.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_14_all_prefixes", "test": "    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n", "description": "Return array list of all prefixes from shortest to longest of the input string", "codematcher_results": ["public Expression<Enum<?>> in(Enum<?>[] value) {String listString = \"\";Boolean firstString = true;for (Enum<?> v : value) {if (firstString) {listString = listString.concat(\"('\").concat(EnumPath.getValue(v)).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(EnumPath.getValue(v)).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<Enum<?>>(this, Operation.in, listString);}\n", "public Expression<String> in(String[] value) {String listString = \"\";Boolean firstString = true;for (String v : value) {if (firstString) {listString = listString.concat(\"('\").concat(v).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(v).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<String>(this, Operation.in, listString);}\n", "public void mget() {List<TestEntity> cd = sc.mGet(list);System.out.println(JSON.toJSONString(cd));cd = sc.mGetString(listString);System.out.println(JSON.toJSONString(cd));cd = sc.mGetNumber(listIntger);System.out.println(JSON.toJSONString(cd));}\n", "public static void main(String[] args) throws EncodingException {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";try {System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));} catch (EncodingException e) {e.printStackTrace();};}\n", "public static void main(String[] args) {String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "private void done(ArrayList<String> listString) {Intent mIntent = new Intent();setResult(Activity.RESULT_OK, mIntent);mIntent.putStringArrayListExtra(KEY_DATA_RESULT, listString);finish();}\n", "public static void main(String[] args) {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf3000000000000000000000000000000000000000000000000000000000000000500\" + \"0000000000000000000000000000000000000000000000000000000000008000000000000000000000000000\" + \"000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000\" + \"0000000000000000000000000000000000000000000000000000200000000000000000000000000000000000\" + \"00000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "public void test() {assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"listString\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawlist\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawListSub\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"stringList\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"arrayListString\")));}\n", "public void handle(MyPojo2 request) {log.info(\"a new message #2 type:{}\", request);MyPojo2 response = MyPojo2.builder().sender(pid()).name(request.getName()).age(request.getAge()).male(request.isMale()).languages(request.getLanguages()).position(request.getPosition()).set(request.getSet()).listString(request.getListString()).bools(request.getBools()).build();send(request.getSender(), response);}\n", "public void toJson() throws Exception {TestBean bean = new TestBean(\"A\");String beanString = binder.toJson(bean);System.out.println(\"Bean:\" + beanString);assertEquals(beanString, \"{\\\"name\\\":\\\"A\\\"}\");Map<String, Object> map = Maps.newLinkedHashMap();map.put(\"name\", \"A\");map.put(\"age\", 2);String mapString = binder.toJson(map);System.out.println(\"Map:\" + mapString);assertEquals(mapString, \"{\\\"name\\\":\\\"A\\\",\\\"age\\\":2}\");List<String> stringList = Lists.newArrayList(\"A\", \"B\", \"C\");String listString = binder.toJson(stringList);System.out.println(\"String List:\" + listString);assertEquals(listString, \"[\\\"A\\\",\\\"B\\\",\\\"C\\\"]\");List<TestBean> beanList = Lists.newArrayList(new TestBean(\"A\"), new TestBean(\"B\"));String beanListString = binder.toJson(beanList);System.out.println(\"Bean List:\" + beanListString);assertEquals(beanListString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");TestBean[] beanArray = new TestBean[] { new TestBean(\"A\"), new TestBean(\"B\") };String beanArrayString = binder.toJson(beanArray);System.out.println(\"Array List:\" + beanArrayString);assertEquals(beanArrayString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");}\n"]}
{"name": "HumanEval_53_add", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n    // >>> add((5l), (7l))\n    // (12l)\n    public static long add(long x, long y) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_53_add.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_53_add", "test": "    }\n    public static void main(String[] args) {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n", "description": "Add two numbers x and y", "codematcher_results": ["public ListNode addTwoNumber(ListNode l1, ListNode l2) {return null;}\n", "public ArrayList<Integer> addTwoNumbers(ArrayList<Integer> first, ArrayList<Integer> second) {Collections.reverse(first);Collections.reverse(second);int complement = 0;ArrayList<Integer> result = new ArrayList<>();for (int i@ i = 0@ i < Math.max(first.size(), second.size())++){int firstVal = i < first.size() ? first.get(i) : 0;int secondVal = i < second.size() ? second.get(i) : 0;int total = firstVal + secondVal + complement;complement = 0;if (total >= 10) {complement = 1;total -= 10;}result.add(i, total);}Collections.reverse(result);return result;}\n", "public void addTwoNumbers() {double resultAdd = mCalculator.add(1d, 1d);assertThat(resultAdd, is(equalTo(2d)));}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {ListNode resultHead = new ListNode(0);ListNode resultTail = resultHead;int carry = 0;while (l1 != null || l2 != null) {if (l1 != null) {carry += l1.val;l1 = l1.next;}if (l2 != null) {carry += l2.val;l2 = l2.next;}ListNode newNode = new ListNode(carry % 10);resultTail.next = newNode;resultTail = newNode;carry = carry / 10;}if (carry == 1) {resultTail.next = new ListNode(1);}return resultHead.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {Stack<Integer> s1 = new Stack<>();Stack<Integer> s2 = new Stack<>();while (l1 != null) {s1.push(l1.val);l1 = l1.next;}while (l2 != null) {s2.push(l2.val);l2 = l2.next;}int carryBit = 0;ListNode dummyHead = new ListNode(0);while (!s1.isEmpty() || !s2.isEmpty()) {if (!s1.isEmpty()) {carryBit += s1.pop();}if (!s2.isEmpty()) {carryBit += s2.pop();}ListNode newNode = new ListNode(carryBit % 10);ListNode dummyHeadNext = dummyHead.next;dummyHead.next = newNode;newNode.next = dummyHeadNext;carryBit = carryBit / 10;}if (carryBit == 1) {ListNode dummyHeadNext = dummyHead.next;ListNode newNode = new ListNode(1);newNode.next = dummyHeadNext;dummyHead.next = newNode;}return dummyHead.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {int sum = 0;ListNode result = new ListNode(0);ListNode cur = result;while (l1 != null || l2 != null) {if (l1 != null) {sum += l1.val;l1 = l1.next;}if (l2 != null) {sum += l2.val;l2 = l2.next;}cur.next = new ListNode(sum % 10);cur = cur.next;sum = sum / 10;}if (sum == 1) {cur.next = new ListNode(1);}return result.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {if (l1 == null)return l2;if (l2 == null)return l1;ListNode x = new ListNode(0);ListNode head = x;int carry = 0;while (l1 != null || l2 != null) {int val = 0;if (l1 == null && l2 != null)val = l2.val + carry;else if (l2 == null && l1 != null)val = l1.val + carry;elseval = l2.val + carry + l1.val;carry = val / 10;x.next = new ListNode(val % 10);if (l1 != null)l1 = l1.next;if (l2 != null)l2 = l2.next;x = x.next;}if (carry > 0) {x.next = new ListNode(carry);}return head.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {if (l1 == null)return l2;if (l2 == null)return l1;Stack<ListNode> s1 = new Stack<>();while (l1 != null) {s1.add(l1);l1 = l1.next;}Stack<ListNode> s2 = new Stack<>();while (l2 != null) {s2.add(l2);l2 = l2.next;}int carry = 0;ListNode x = null;while (!s1.isEmpty() || !s2.isEmpty()) {int val = 0;if (s1.isEmpty() && !s2.isEmpty()) {val = s2.pop().val + carry;} else if (s2.isEmpty() && !s1.isEmpty()) {val = s1.pop().val + carry;} else {val = s2.pop().val + carry + s1.pop().val;}carry = val / 10;if (x == null) {x = new ListNode(val % 10);} else {ListNode nn = new ListNode(val % 10);nn.next = x;x = nn;}}if (carry > 0) {ListNode nn = new ListNode(carry);nn.next = x;x = nn;}return x;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {if (l1 == null || l2 == null)return null;ListNode newNode = new ListNode(Integer.MIN_VALUE);ListNode dummy = newNode;int remainder = 0;while (l1 != null || l2 != null) {int sum = (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val);newNode.next = new ListNode((sum + remainder) % 10);newNode = newNode.next;remainder = (sum + remainder) / 10;if (l1 != null)l1 = l1.next;if (l2 != null)l2 = l2.next;}if (remainder != 0)newNode.next = new ListNode(remainder);return dummy.next;}\n", "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {ListNode dummyHead = new ListNode(0);ListNode p = l1;ListNode q = l2;ListNode curr = dummyHead;int carry = 0;while (p != null || q != null) {int x = (p != null) ? p.val : 0;int y = (q != null) ? q.val : 0;int sum = carry + x + y;carry = sum / 10;curr.next = new ListNode(sum % 10);curr = curr.next;if (p != null)p = p.next;if (q != null)q = q.next;}if (carry > 0) {curr.next = new ListNode(carry);}return dummyHead.next;}\n"]}
{"name": "HumanEval_159_eat", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return an array array list of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))\n    // >>> eat((4l), (8l), (9l))\n    // (new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))\n    // >>> eat((1l), (10l), (10l))\n    // (new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))\n    // >>> eat((2l), (11l), (5l))\n    // (new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_159_eat.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_159_eat", "test": "    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l)))));\n    }\n\n}\n", "description": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array array list of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry. Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_115_max_fill", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\n    // (6l)\n    // Example 2:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\n    // (5l)\n    // Example 3:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l))\n    // (0l)\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_115_max_fill.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l)) == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_115_max_fill", "test": "    }\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l)) == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l)) == (2l));\n    }\n\n}\n", "description": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Example 1:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean isValid(@NonNull View view, @IntRange(from = 0) long duration) {long curTime = System.currentTimeMillis();Object tag = view.getTag(TAG_KEY);if (!(tag instanceof Long)) {view.setTag(TAG_KEY, curTime);return true;}long preTime = (Long) tag;if (curTime - preTime <= duration)return false;view.setTag(TAG_KEY, curTime);return true;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_160_do_algebra", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_160_do_algebra.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_160_do_algebra", "test": "    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n", "description": "Given two array lists operator, and operand. The first array list has basic algebra operations, and the second array list is an array array list of integers. Use the two given array lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** ) Example: operator['+', '*', '-'] array array list = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Note: The length of operator array list is equal to the length of operand array list minus one. Operand is an array array list of of non-negative integers. Operator array list has at least one operator, and operand array list has at least two operands.", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "public static int setRedComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float red) {return (color & 0xff00ffff) | ((int) (red * 255.0f + 0.5f) << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static Application getApplicationByReflect() {try {;Object at = activityThread.getMethod(\"currentActivityThread\").invoke(null);Object app = activityThread.getMethod(\"getApplication\").invoke(at);if (app == null) {throw new NullPointerException(\"u should init first\");}init((Application) app);return sApplication;} catch (NoSuchMethodException e) {e.printStackTrace();} catch (IllegalAccessException e) {e.printStackTrace();} catch (InvocationTargetException e) {e.printStackTrace();} catch (ClassNotFoundException e) {e.printStackTrace();}throw new NullPointerException(\"u should init first\");}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_27_flip_case", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_27_flip_case.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_27_flip_case", "test": "    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n", "description": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_105_by_length", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array array list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l))))\n    // (new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))\n    // If the array array list is empty, return an empty array array list:\n    // >>> byLength((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<String>(Arrays.asList()))\n    // If the array array list has any strange number ignore it:\n    // >>> byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l))))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\")))\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_105_by_length.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l)))).equals((new ArrayList<String>(Arrays.asList((String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)3l, (long)2l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Three\", (String)\"Two\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)9l, (long)4l, (long)8l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Nine\", (String)\"Eight\", (String)\"Four\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_105_by_length", "test": "    }\n    public static void main(String[] args) {\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l)))).equals((new ArrayList<String>(Arrays.asList((String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)3l, (long)2l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Three\", (String)\"Two\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)9l, (long)4l, (long)8l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Nine\", (String)\"Eight\", (String)\"Four\")))));\n    }\n\n}\n", "description": "Given an array array list of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array array list, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". For example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n"]}
{"name": "HumanEval_25_factorize", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return array list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be array listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_25_factorize.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_25_factorize", "test": "    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n}\n", "description": "Return array list of prime factors of given integer in the order from smallest to largest. Each of the factors should be array listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors", "codematcher_results": ["public static List<File> unzipFile(final File zipFile, final File destDir) throws IOException {return unzipFileByKeyword(zipFile, destDir, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getComments(final String zipFilePath) throws IOException {return getComments(getFileByPath(zipFilePath));}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "public static List<String> getFilesPath(final String zipFilePath) throws IOException {return getFilesPath(getFileByPath(zipFilePath));}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_96_count_up_to", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement a function that takes an non-negative integer and returns an array array list of the first n\n    // integers that are prime numbers and less than n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    // >>> countUpTo((11l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))\n    // >>> countUpTo((0l))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> countUpTo((20l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))\n    // >>> countUpTo((1l))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> countUpTo((18l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))\n    public static ArrayList<Long> countUpTo(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_96_count_up_to.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(countUpTo((5l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(countUpTo((6l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((7l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))));\n    assert(countUpTo((0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((22l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))));\n    assert(countUpTo((1l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(countUpTo((47l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l)))));\n    assert(countUpTo((101l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l, (long)47l, (long)53l, (long)59l, (long)61l, (long)67l, (long)71l, (long)73l, (long)79l, (long)83l, (long)89l, (long)97l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_96_count_up_to", "test": "    }\n    public static void main(String[] args) {\n    assert(countUpTo((5l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(countUpTo((6l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((7l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))));\n    assert(countUpTo((0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((22l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))));\n    assert(countUpTo((1l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(countUpTo((47l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l)))));\n    assert(countUpTo((101l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l, (long)47l, (long)53l, (long)59l, (long)61l, (long)67l, (long)71l, (long)73l, (long)79l, (long)83l, (long)89l, (long)97l)))));\n    }\n\n}\n", "description": "Implement a function that takes an non-negative integer and returns an array array list of the first n integers that are prime numbers and less than n. for example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_34_unique", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique elements in an array array list\n    // >>> unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_34_unique.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_34_unique", "test": "    }\n    public static void main(String[] args) {\n    assert(unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))));\n    }\n\n}\n", "description": "Return sorted unique elements in an array array list", "codematcher_results": ["ElementArrayList(ArrayList<Element> elements, ReentrantLock lock, String name) {this.elements = elements;this.lock = lock;this.name = name;}\n", "private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_74_total_match", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts two array lists of strings and returns the array list that has \n    // total number of chars in the all strings of the array list less than the other array list.\n    // if the two array lists have the same number of chars, return the first array list.\n    // Examples\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList())))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"4\")))\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_74_total_match.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_74_total_match", "test": "    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n", "description": "Write a function that accepts two array lists of strings and returns the array list that has total number of chars in the all strings of the array list less than the other array list. if the two array lists have the same number of chars, return the first array list. Examples", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_35_max_element", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return maximum element in the array list.\n    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (3l)\n    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    // (123l)\n    public static long maxElement(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_35_max_element.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l)))) == (124l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_35_max_element", "test": "    }\n    public static void main(String[] args) {\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l)))) == (124l));\n    }\n\n}\n", "description": "Return maximum element in the array list.", "codematcher_results": ["ElementArrayList(ArrayList<Element> elements, ReentrantLock lock, String name) {this.elements = elements;this.lock = lock;this.name = name;}\n", "private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_132_is_nested", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a string as input which contains only square brackets.\n    // The function should return true if and only if there is a valid subsequence of brackets \n    // where at least one bracket in the subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n    // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"[][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    // >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n    // (true)\n    public static boolean isNested(String string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_132_is_nested.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_132_is_nested", "test": "    }\n    public static void main(String[] args) {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n", "description": "Create a function that takes a string as input which contains only square brackets. The function should return true if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.", "codematcher_results": ["public BasicAlgorithm with(ToStringFunction<String> stringFunction) {setStringFunction(stringFunction);return this;}\n", "public int apply(String s1, String s2, Ratio ratio, ToStringFunction<String> stringFunction) {s1 = stringFunction.apply(s1);s2 = stringFunction.apply(s2);Set<String> tokens1 = Utils.tokenizeSet(s1);Set<String> tokens2 = Utils.tokenizeSet(s2);Set<String> intersection = SetUtils.intersection(tokens1, tokens2);Set<String> diff1to2 = SetUtils.difference(tokens1, tokens2);Set<String> diff2to1 = SetUtils.difference(tokens2, tokens1);String sortedInter = Utils.sortAndJoin(intersection, \" \").trim();String sorted1to2 = (sortedInter + \" \" + Utils.sortAndJoin(diff1to2, \" \")).trim();String sorted2to1 = (sortedInter + \" \" + Utils.sortAndJoin(diff2to1, \" \")).trim();List<Integer> results = new ArrayList<>();results.add(ratio.apply(sortedInter, sorted1to2));results.add(ratio.apply(sortedInter, sorted2to1));results.add(ratio.apply(sorted1to2, sorted2to1));return Collections.max(results);}\n", "public static int ratio(String s1, String s2, ToStringFunction<String> stringFunction) {return new SimpleRatio().apply(s1, s2, stringFunction);}\n", "public int apply(String s1, String s2, ToStringFunction<String> stringFunction) {return apply(s1, s2, getRatio(), stringFunction);}\n", "public int apply(String s1, String s2, Ratio ratio, ToStringFunction<String> stringFunction) {String sorted1 = processAndSort(s1, stringFunction);String sorted2 = processAndSort(s2, stringFunction);return ratio.apply(sorted1, sorted2);}\n", "public void setUp() throws Exception {expressionFunction = new StringFunction(new DefaultDialect());}\n", "private ArrayList<String> execute(List<Fact> facts, Rule rule) {RulesEngine engine = new RulesEngineBuilder().withRulesRepository(i -> Collections.singletonList(rule)).withActionMapping(\"appendStrings\", method(this, a -> a.appendStrings(null, null))).withActionMapping(\"appendNestedCollections\", method(this, a -> a.appendNestedCollections(null, null))).withFunctionMapping(\"stringFunction\", method(this, ValuesTest::getString)).build();RuleSession session = engine.createSession(\"session\");return session.execute(new ArrayList<>(), facts);}\n", "default StepCondition contains(StringFunction string) {return getStringFunction().contains(string);}\n", "public final StepCondition contains(StringFunction value) {return LeafStepCondition.stepCondition(containsMetadata(metadata, value), getFunction(), value.getFunction(), String::contains);}\n", "public static void register(StringFunction stringFunction) {allFunction.put(stringFunction.determineFunctionName(), stringFunction);}\n"]}
{"name": "HumanEval_113_odd_count", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of strings, where each string consists of only digits, return an array array list.\n    // Each element i of the output should be \"the number of odd elements in the\n    // string i of the input.\" where all the i's should be replaced by the number\n    // of odd digits in the i'th string of the input.\n    // >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))\n    // >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_113_odd_count.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"271\", (String)\"137\", (String)\"314\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (String)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_113_odd_count", "test": "    }\n    public static void main(String[] args) {\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"271\", (String)\"137\", (String)\"314\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (String)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\")))));\n    }\n\n}\n", "description": "Given an array array list of strings, where each string consists of only digits, return an array array list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_109_move_one_ball", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // We have an array array list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    // numbers in the array array list will be randomly ordered. Your task is to determine if\n    // it is possible to get an array array list sorted in non-decreasing order by performing \n    // the following operation on the given array array list:\n    // You are allowed to perform right shift operation any number of times.\n    // One right shift operation means shifting all elements of the array array list by one\n    // position in the right direction. The last element of the array array list will be moved to\n    // the starting position in the array array list i.e. 0th index. \n    // If it is possible to obtain the sorted array array list by performing the above operation\n    // then return true else return false.\n    // If the given array array list is empty then return true.\n    // Note: The given array list is guaranteed to have unique elements.\n    // For Example:\n    // >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\n    // (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing order can\n    // be achieved for the given array array list.\n    // >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l))))\n    // (false)\n    // Explanation:It is not possible to get non-decreasing order for the given\n    // array array list by performing any number of right shift operations.\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_109_move_one_ball.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_109_move_one_ball", "test": "    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n", "description": "We have an array array list 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array array list will be randomly ordered. Your task is to determine if it is possible to get an array array list sorted in non-decreasing order by performing the following operation on the given array array list: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array array list by one position in the right direction. The last element of the array array list will be moved to the starting position in the array array list i.e. 0th index. If it is possible to obtain the sorted array array list by performing the above operation then return true else return false. If the given array array list is empty then return true. Note: The given array list is guaranteed to have unique elements. For Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_107_even_odd_palindrome", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return a pair that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // (Pair.with(1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // (Pair.with(4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned pair has the number of even and odd integer palindromes respectively.\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_107_even_odd_palindrome.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(evenOddPalindrome((123l)).equals((Pair.with(8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals((Pair.with(1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals((Pair.with(6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals((Pair.with(5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals((Pair.with(4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals((Pair.with(0l, 1l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_107_even_odd_palindrome", "test": "    }\n    public static void main(String[] args) {\n    assert(evenOddPalindrome((123l)).equals((Pair.with(8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals((Pair.with(1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals((Pair.with(6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals((Pair.with(5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals((Pair.with(4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals((Pair.with(0l, 1l))));\n    }\n\n}\n", "description": "Given a positive integer n, return a pair that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Example 1:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_138_is_equal_to_sum_even", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n    // (true)\n    public static boolean isEqualToSumEven(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_138_is_equal_to_sum_even.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_138_is_equal_to_sum_even", "test": "    }\n    public static void main(String[] args) {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n", "description": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers Example", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n", "private static void printDeviceInfo(final String filePath) {String versionName = \"\";int versionCode = 0;try {PackageInfo pi = Utils.getApp().getPackageManager().getPackageInfo(Utils.getApp().getPackageName(), 0);if (pi != null) {versionName = pi.versionName;versionCode = pi.versionCode;}} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}String time = filePath.substring(filePath.length() - 14, filePath.length() - 4);final String head = \"************* Log Head ****************\" + \"Date of Log : \" + time + \"Device Manufacturer: \" + Build.MANUFACTURER + \"Device Model : \" + Build.MODEL + \"Android Version : \" + Build.VERSION.RELEASE + \"Android SDK : \" + Build.VERSION.SDK_INT + \"App VersionName : \" + versionName + \"App VersionCode : \" + versionCode + \";\";input2File(head, filePath);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static String byte2FitMemorySize(final long byteSize) {if (byteSize < 0) {return \"shouldn't be less than zero!\";} else if (byteSize < MemoryConstants.KB) {return String.format(\"%.3fB\", (double) byteSize);} else if (byteSize < MemoryConstants.MB) {return String.format(\"%.3fKB\", (double) byteSize / MemoryConstants.KB);} else if (byteSize < MemoryConstants.GB) {return String.format(\"%.3fMB\", (double) byteSize / MemoryConstants.MB);} else {return String.format(\"%.3fGB\", (double) byteSize / MemoryConstants.GB);}}\n", "private static String byte2FitMemorySize(final long byteNum) {if (byteNum < 0) {return \"shouldn't be less than zero!\";} else if (byteNum < 1024) {return String.format(Locale.getDefault(), \"%.3fB\", (double) byteNum);} else if (byteNum < 1048576) {return String.format(Locale.getDefault(), \"%.3fKB\", (double) byteNum / 1024);} else if (byteNum < 1073741824) {return String.format(Locale.getDefault(), \"%.3fMB\", (double) byteNum / 1048576);} else {return String.format(Locale.getDefault(), \"%.3fGB\", (double) byteNum / 1073741824);}}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n", "public NumberNumberElement newNumberNumberElement() {NumberNumberElement numberNumber = ((OdfFileDom) this.ownerDocument).newOdfElement(NumberNumberElement.class);this.appendChild(numberNumber);return numberNumber;}\n", "public void number_as_array_of_bytes_given_a_number_and_a_length_return_a_byte_array_of_length_that_represent_number() {Integer number = 5;BigInteger bigNumber = BigInteger.valueOf(5);byte[] numberAsByte = new byte[] { (byte) 0x00, (byte) 0x05 };assertThat(numberAsByte).isEqualTo(DataFunctions.numberAsArrayOfBytes(number, 2).raw());assertThat(numberAsByte).isEqualTo(DataFunctions.numberAsArrayOfBytes(bigNumber, 2).raw());}\n"]}
{"name": "HumanEval_62_derivative", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_62_derivative.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_62_derivative", "test": "    }\n    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "description": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.", "codematcher_results": ["public <T> T get(@NonNull final String key, final T defaultValue) {CacheValue val = mMemoryCache.get(key);if (val == null)return defaultValue;if (val.dueTime == -1 || val.dueTime >= System.currentTimeMillis()) {return (T) val.value;}mMemoryCache.remove(key);return defaultValue;}\n", "public void put(@NonNull final String key, final Object value, int saveTime) {if (value == null)return;long dueTime = saveTime < 0 ? -1 : System.currentTimeMillis() + saveTime * 1000;mMemoryCache.put(key, new CacheValue(dueTime, value));}\n", "public void put(@NonNull final String key, byte[] value, final int saveTime) {if (value == null)return;DiskCacheManager diskCacheManager = getDiskCacheManager();if (diskCacheManager == null)return;if (saveTime >= 0)value = DiskCacheHelper.newByteArrayWithTime(saveTime, value);File file = diskCacheManager.getFileBeforePut(key);writeFileFromBytes(file, value);diskCacheManager.updateModify(file);diskCacheManager.put(file);}\n", "public static <T> T get(@NonNull final String key) {return get(key, getDefaultCacheMemoryUtils());}\n", "public static <T> T get(@NonNull final String key, final T defaultValue) {return get(key, defaultValue, getDefaultCacheMemoryUtils());}\n", "public static <T> T get(@NonNull final String key, @NonNull final CacheMemoryUtils cacheMemoryUtils) {return cacheMemoryUtils.get(key);}\n", "public static <T> T get(@NonNull final String key, final T defaultValue, @NonNull final CacheMemoryUtils cacheMemoryUtils) {return cacheMemoryUtils.get(key, defaultValue);}\n", "public <T> T get(@NonNull final String key) {return get(key, null);}\n", "public static void log(final int type, final String tag, final Object... contents) {if (!CONFIG.isLogSwitch())return;int type_low = type & 0x0f, type_high = type & 0xf0;if (CONFIG.isLog2ConsoleSwitch() || CONFIG.isLog2FileSwitch() || type_high == FILE) {if (type_low < CONFIG.mConsoleFilter && type_low < CONFIG.mFileFilter)return;final TagHead tagHead = processTagAndHead(tag);final String body = processBody(type_high, contents);if (CONFIG.isLog2ConsoleSwitch() && type_high != FILE && type_low >= CONFIG.mConsoleFilter) {print2Console(type_low, tagHead.tag, tagHead.consoleHead, body);}if ((CONFIG.isLog2FileSwitch() || type_high == FILE) && type_low >= CONFIG.mFileFilter) {print2File(type_low, tagHead.tag, tagHead.fileHead + body);}}}\n", "public static boolean save(final Bitmap src, final File file, final CompressFormat format, final boolean recycle) {if (isEmptyBitmap(src) || !createFileByDeleteOldFile(file))return false;OutputStream os = null;boolean ret = false;try {os = new BufferedOutputStream(new FileOutputStream(file));ret = src.compress(format, 100, os);if (recycle && !src.isRecycled())src.recycle();} catch (IOException e) {e.printStackTrace();} finally {try {if (os != null) {os.close();}} catch (IOException e) {e.printStackTrace();}}return ret;}\n"]}
{"name": "HumanEval_126_is_sorted", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of numbers, return whether or not they are sorted\n    // in ascending order. If array list has more than 1 duplicate of the same\n    // number, return false. Assume no negative numbers and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean isSorted(ArrayList<Long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_126_is_sorted.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_126_is_sorted", "test": "    }\n    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (true));\n    }\n\n}\n", "description": "Given an array array list of numbers, return whether or not they are sorted in ascending order. If array list has more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers. Examples", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_161_solve", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    // If the string contains no letters, reverse the string.\n    // The function should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static String solve(String s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_161_solve.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_161_solve", "test": "    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n", "description": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string. Examples", "codematcher_results": ["protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {;File fileBufferedImage waterimg=null} //StringString message = \"\";String sort = \"\";FileOutputStream out = null;try {System.out.println(\"\u5f00\u59cb\u63a5\u53d7\u56fe\u7247\");DiskFileItemFactory factory = new DiskFileItemFactory();ServletFileUpload upload = new ServletFileUpload(factory);upload.setHeaderEncoding(\"UTF-8\");if (!ServletFileUpload.isMultipartContent(request)) {System.out.println(\"\u89e3\u6790\u51fa\u9519\");return;}List<FileItem> list = upload.parseRequest(request);for (FileItem item : list) {if (item.isFormField()) {String name = item.getFieldName();String value = item.getString(\"UTF-8\");sort = value;System.out.println(name + \"=\" + value);} else {String filename = item.getName();System.out.println(filename);System.out.println(sort);if (filename == null || filename.trim().equals(\"\")) {continue;};InputStream in = item.getInputStream();out = new FileOutputStream(new File(\"d:\\\\hahahha.txt\"));byte[] b = new byte[1024];while (in.read(b) != -1) {String msg = new String(new String(b));System.out.println(msg);out.write(b);};}in.close();item.delete();message = \"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\";}}} catch (Exception e) {message = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\";e.printStackTrace();} finally {if (out != null) {out.close();}}}\n", "private Map<String, String> getMap(final List<StringString> sample) {HashMap<String, String> map = new HashMap<String, String>();for (int i@ i = 0@ i < sample.size()++){map.put(sample.get(i).key, sample.get(i).value);}return (Map) map;}\n", "public Circle(// sets k, u, v, w by StringString coeffString, // sets k, u, v, w by StringString radXString, // sets k, u, v, w by StringString radYString, // sets k, u, v, w by StringString radZString) {HomogenousPolynomial coeff = new HomogenousPolynomial(coeffString);HomogenousVector radCoeffs = new HomogenousVector(radXString, radYString, radZString);if (coeff.equalsZero())throw new IllegalArgumentException(\"coefficient must be nonzero\");if (coeff.degree() + 2 != radCoeffs.degree())throw new IllegalArgumentException(\"degree of radical coefficients must be two more than degree of coefficient\");this.coeff = coeff;this.radCoeffs = radCoeffs;}\n", "public ArrayList<StringString> getData(String dataName) {return getList(getDataMap(dataName));}\n", "private ArrayList<StringString> getList(final Map<String, String> sample) {ArrayList<StringString> StringString_sample = new ArrayList<StringString>();for (Map.Entry<String, String> x : sample.entrySet()) {StringString v = new StringString();v.key = x.getKey();v.value = x.getValue();StringString_sample.add(v);}return StringString_sample;}\n", "public static Transform<String, String> transform(List<String> transforms, Map<String, Transform<String, String>> stringToStringTransforms, Map<String, Transform<Object, String>> objectToStringTransforms, Map<String, Transform<String, Object>> stringToObjectTransforms, Map<String, Transform<Object, Object>> objectToObjectTransforms) throws ConfigurationException {int state = STRING_STATE;Transform<String, String> stringIdentity = (s) -> s;Transform<String, String> stringString = stringIdentity;Transform<String, Object> stringObject = null;for (String t : transforms) {String op = parseOperationNameFromTransform(t);Map<String, String> parameters = parseParametersFrom(t);switch(state) {case STRING_STATE:if (stringToStringTransforms.containsKey(op)) {Transform<String, String> transform = stringToStringTransforms.get(op);stringString = stringString.andThen(transform);} else if (stringToObjectTransforms.containsKey(op)) {Transform<String, Object> transform = stringToObjectTransforms.get(t);stringObject = stringString.andThen(transform);state = OBJECT_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from string state\");}break;case OBJECT_STATE:if (objectToObjectTransforms.containsKey(op)) {Transform<Object, Object> transform = objectToObjectTransforms.get(op);stringObject = transform.compose(stringObject);} else if (objectToStringTransforms.containsKey(op)) {Transform<Object, String> transform = objectToStringTransforms.get(op);stringString = stringObject.andThen(transform);state = STRING_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from obj state\");}break;}}return stringString;}\n", "' stringString readString(DataInputStream stream) throws IOException {String line = stream.readLine();if (line == null)return null;int len = Integer.parseInt(line);byte[] buffer = new byte[len];stream.readFully(buffer);return new String(buffer, StandardCharsets.ISO_8859_1);}\n", "HttpURLConnection conn = initHttp(url,if;String valueString = nullStringBuffer bufferRes =while ((valueString = read.readLine()) != null) {} in.close();} else { BufferedInputStream bis =String ds =String fullName =StringString suffix;att.setFileName(relName);} return att}public static String initParams(String url, Map<String, String> params) throws UnsupportedEncodingException {if (null == params || params.isEmpty()) {return url;}StringBuilder sb = new StringBuilder(url);if (url.indexOf(\"?\") == -1) {sb.append(\"?\");}sb.append(map2Url(params));return sb.toString();}\n", "public void testOptInt() {assertEquals(33, somenil.optint(33));throwsError(sometrue, \"optint\", int.class, new Integer(33));throwsError(somefalse, \"optint\", int.class, new Integer(33));assertEquals(0, zero.optint(33));assertEquals(sampleint, intint.optint(33));assertEquals((int) samplelong, longdouble.optint(33));assertEquals((int) sampledouble, doubledouble.optint(33));throwsError(somefunc, \"optint\", int.class, new Integer(33));throwsError(someclosure, \"optint\", int.class, new Integer(33));throwsError(stringstring, \"optint\", int.class, new Integer(33));assertEquals(sampleint, stringint.optint(33));assertEquals((int) samplelong, stringlong.optint(33));assertEquals((int) sampledouble, stringdouble.optint(33));throwsError(thread, \"optint\", int.class, new Integer(33));throwsError(table, \"optint\", int.class, new Integer(33));throwsError(userdataobj, \"optint\", int.class, new Integer(33));throwsError(userdatacls, \"optint\", int.class, new Integer(33));}\n", "String pomPath =SAXReaderDocument document = reader.read(pomPath);Element rootElement13 =map.remove(\"rootElement\")StringString dpversionSystem.out.println(dpname)}private void pushCommit(Git git, String title) throws Exception {try {AddCommand add = git.add();add.addFilepattern(\".\").call();CommitCommand commit = git.commit();commit.setCommitter(\"zhairuiping\", \"zhairuiping@scm.cfets.com\");commit.setAuthor(\"zhairuiping\", \"zhairuiping@scm.cfets.com\");commit.setAll(true);RevCommit revCommit = commit.setMessage(\" dev2 user jgit::\" + title).call();String commitId = revCommit.getId().name();logger.info(\"commitId:\" + commitId);PushCommand push = git.push();push.call();} catch (Exception e) {logger.error(\"\u4e0a\u4f20\u7248\u672c\u5931\u8d25\", e);}}\n"]}
{"name": "HumanEval_130_tri", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_130_tri.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_130_tri", "test": "    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n", "description": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. For example: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 You are given a non-negative integer number n, you have to a return an array array list of the first n + 1 numbers of the Tribonacci sequence. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_36_fizz_buzz", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    public static long fizzBuzz(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_36_fizz_buzz.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_36_fizz_buzz", "test": "    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n", "description": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_29_filter_by_prefix", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input array list of strings only for ones that start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_29_filter_by_prefix.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_29_filter_by_prefix", "test": "    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n", "description": "Filter an input array list of strings only for ones that start with a given prefix.", "codematcher_results": ["public Expression<Enum<?>> in(Enum<?>[] value) {String listString = \"\";Boolean firstString = true;for (Enum<?> v : value) {if (firstString) {listString = listString.concat(\"('\").concat(EnumPath.getValue(v)).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(EnumPath.getValue(v)).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<Enum<?>>(this, Operation.in, listString);}\n", "public Expression<String> in(String[] value) {String listString = \"\";Boolean firstString = true;for (String v : value) {if (firstString) {listString = listString.concat(\"('\").concat(v).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(v).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<String>(this, Operation.in, listString);}\n", "public void mget() {List<TestEntity> cd = sc.mGet(list);System.out.println(JSON.toJSONString(cd));cd = sc.mGetString(listString);System.out.println(JSON.toJSONString(cd));cd = sc.mGetNumber(listIntger);System.out.println(JSON.toJSONString(cd));}\n", "public static void main(String[] args) throws EncodingException {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";try {System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));} catch (EncodingException e) {e.printStackTrace();};}\n", "public static void main(String[] args) {String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "private void done(ArrayList<String> listString) {Intent mIntent = new Intent();setResult(Activity.RESULT_OK, mIntent);mIntent.putStringArrayListExtra(KEY_DATA_RESULT, listString);finish();}\n", "public static void main(String[] args) {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf3000000000000000000000000000000000000000000000000000000000000000500\" + \"0000000000000000000000000000000000000000000000000000000000008000000000000000000000000000\" + \"000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000\" + \"0000000000000000000000000000000000000000000000000000200000000000000000000000000000000000\" + \"00000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "public void test() {assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"listString\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawlist\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawListSub\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"stringList\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"arrayListString\")));}\n", "public void handle(MyPojo2 request) {log.info(\"a new message #2 type:{}\", request);MyPojo2 response = MyPojo2.builder().sender(pid()).name(request.getName()).age(request.getAge()).male(request.isMale()).languages(request.getLanguages()).position(request.getPosition()).set(request.getSet()).listString(request.getListString()).bools(request.getBools()).build();send(request.getSender(), response);}\n", "public void toJson() throws Exception {TestBean bean = new TestBean(\"A\");String beanString = binder.toJson(bean);System.out.println(\"Bean:\" + beanString);assertEquals(beanString, \"{\\\"name\\\":\\\"A\\\"}\");Map<String, Object> map = Maps.newLinkedHashMap();map.put(\"name\", \"A\");map.put(\"age\", 2);String mapString = binder.toJson(map);System.out.println(\"Map:\" + mapString);assertEquals(mapString, \"{\\\"name\\\":\\\"A\\\",\\\"age\\\":2}\");List<String> stringList = Lists.newArrayList(\"A\", \"B\", \"C\");String listString = binder.toJson(stringList);System.out.println(\"String List:\" + listString);assertEquals(listString, \"[\\\"A\\\",\\\"B\\\",\\\"C\\\"]\");List<TestBean> beanList = Lists.newArrayList(new TestBean(\"A\"), new TestBean(\"B\"));String beanListString = binder.toJson(beanList);System.out.println(\"Bean List:\" + beanListString);assertEquals(beanListString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");TestBean[] beanArray = new TestBean[] { new TestBean(\"A\"), new TestBean(\"B\") };String beanArrayString = binder.toJson(beanArray);System.out.println(\"Array List:\" + beanArrayString);assertEquals(beanArrayString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");}\n"]}
{"name": "HumanEval_84_solve", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n    // >>> solve((150l))\n    // (\"110\")\n    // >>> solve((147l))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static String solve(long N) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_84_solve.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_84_solve", "test": "    }\n    public static void main(String[] args) {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n", "description": "Given a positive integer N, return the total sum of its digits in binary. Example", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_129_minPath", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    // each cell of the grid contains a value. Every integer in the range [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    // You have to find the minimum path of length k in the grid. You can start\n    // from any cell, and in each step you can move to any of the neighbor cells,\n    // in other words, you can go to cells which share an edge with you current\n    // cell.\n    // Please note that a path of length k means visiting exactly k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n    // A path A (of length k) is considered less than a path B (of length k) if\n    // after making the ordered array lists of the values on the cells that A and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n    // Return an ordered array list of the values on the cells that the minimum path go through.\n    // Examples:    \n    // >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))\n    // >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l)))\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_129_minPath.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l, (long)16l))))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)12l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)16l, (long)11l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l))))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)1l, (long)10l, (long)1l, (long)10l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)11l, (long)16l))))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)1l, (long)7l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l))))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l))))), (12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)9l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_129_minPath", "test": "    }\n    public static void main(String[] args) {\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l, (long)16l))))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)12l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)16l, (long)11l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l))))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)1l, (long)10l, (long)1l, (long)10l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)11l, (long)16l))))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)1l, (long)7l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l))))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l))))), (12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)9l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    }\n\n}\n", "description": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered array lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered array list of the values on the cells that the minimum path go through. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_98_count_upper", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s, count the number of uppercase vowels in even indices.\n    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n    // (0l)\n    public static long countUpper(String s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_98_count_upper.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_98_count_upper", "test": "    }\n    public static void main(String[] args) {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n", "description": "Given a string s, count the number of uppercase vowels in even indices. For example:", "codematcher_results": ["public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}int[] dataArray = new int[5];dataArray[2] = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_66b()).badSink(dataArray);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}Container dataContainer = new Container();dataContainer.containerOne = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_67b()).badSink(dataContainer);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}int[] dataArray = new int[5];dataArray[2] = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_no_check_66b()).badSink(dataArray);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}int[] dataArray = new int[5];dataArray[2] = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_max_66b()).badSink(dataArray);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}Container dataContainer = new Container();dataContainer.containerOne = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_no_check_67b()).badSink(dataContainer);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}Container dataContainer = new Container();dataContainer.containerOne = data;(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_max_67b()).badSink(dataContainer);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_51b()).badSink(data);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_52b()).badSink(data);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_53b()).badSink(data);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_54b()).badSink(data);}\n"]}
{"name": "HumanEval_120_maximum", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list arr of integers and a positive integer k, return a sorted array list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The length of the array array list will be in the range of [1, 1000].\n    // 2. The elements in the array array list will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_120_maximum.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l, (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_120_maximum", "test": "    }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l, (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "description": "Given an array array list arr of integers and a positive integer k, return a sorted array list of length k with the maximum k numbers in arr. Example 1:", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_24_largest_divisor", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given number n, find the largest number that divides n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    public static long largestDivisor(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_24_largest_divisor.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_24_largest_divisor", "test": "    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n", "description": "For a given number n, find the largest number that divides n evenly, smaller than n", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public NumberNumberElement newNumberNumberElement() {NumberNumberElement numberNumber = ((OdfFileDom) this.ownerDocument).newOdfElement(NumberNumberElement.class);this.appendChild(numberNumber);return numberNumber;}\n"]}
{"name": "HumanEval_88_sort_array", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of non-negative integers, return a cojava of the given array array list after sorting,\n    // you will sort the given array array list in ascending order if the sum( first index value, last index value) is odd,\n    // or sort it in descending order if the sum( first index value, last index value) is even.\n    // Note:\n    // * don't change the given array array list.\n    // Examples:\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_88_sort_array.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l, (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_88_sort_array", "test": "    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l, (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n    }\n\n}\n", "description": "Given an array array list of non-negative integers, return a cojava of the given array array list after sorting, you will sort the given array array list in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array array list. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_106_f", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_106_f.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(f((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))));\n    assert(f((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l, (long)720l, (long)28l)))));\n    assert(f((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(f((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_106_f", "test": "    }\n    public static void main(String[] args) {\n    assert(f((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))));\n    assert(f((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l, (long)720l, (long)28l)))));\n    assert(f((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(f((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l)))));\n    }\n\n}\n", "description": "Implement the function f that takes n as a parameter, and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). Example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_77_iscube", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_77_iscube.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_77_iscube", "test": "    }\n    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n", "description": "Write a function that takes an integer a and returns true if this ingeger is a cube of some integer number. Note: you may assume the input is always valid. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_93_encode", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_93_encode.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_93_encode", "test": "    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n", "description": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters. Examples:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "private static void input2File(final String input, final String filePath) {Future<Boolean> submit = Executors.newSingleThreadExecutor().submit(new Callable<Boolean>() {;public Boolean call() {BufferedWriter bw = null;try {bw = new BufferedWriter(new FileWriter(filePath, true));bw.write(input);return true;} catch (IOException e) {e.printStackTrace();return false;} finally {try {if (bw != null) {bw.close();}} catch (IOException e) {e.printStackTrace();}}}});try {if (submit.get())return;} catch (InterruptedException e) {e.printStackTrace();} catch (ExecutionException e) {e.printStackTrace();}Log.e(\"CrashUtils\", \"write crash info to \" + filePath + \" failed!\");}\n", "public static String htmlEncode(final CharSequence input) {if (input == null || input.length() == 0)return \"\";StringBuilder sb = new StringBuilder();char c;for (int i@ i = 0, len = @ input.length()@ i < len++){c = input.charAt(i);switch(c) {case '<':sb.append(\"&lt\");break;case '>':sb.append(\"&gt\");break;case '&':sb.append(\"&amp\");break;case '\\'':(the apostrophe, U+0027) wasinstead of &aposto work as expected in HTML 4sb.append(\"&#39\");break;case '\"':sb.append(\"&quot\");break;default:sb.append(c);}}return sb.toString();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static String[] getPermissions(@Permission final String permission) {switch(permission) {case CALENDAR:return GROUP_CALENDAR;case CAMERA:return GROUP_CAMERA;case CONTACTS:return GROUP_CONTACTS;case LOCATION:return GROUP_LOCATION;case MICROPHONE:return GROUP_MICROPHONE;case PHONE:if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {return GROUP_PHONE_BELOW_O;} else {return GROUP_PHONE;}case SENSORS:return GROUP_SENSORS;case SMS:return GROUP_SMS;case STORAGE:return GROUP_STORAGE;}return new String[] { permission };}\n", "public final void onBindViewHolder(BaseViewHolder holder, int position) {switch(holder.getItemViewType()) {case VIEW_TYPE_EMPTY:case VIEW_TYPE_HEADER:case VIEW_TYPE_FOOTER:break;default:bindCustomViewHolder(holder, position);break;}}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static String getFileCharsetSimple(final File file) {int p = 0;InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(file));p = (is.read() << 8) + is.read();} catch (IOException e) {e.printStackTrace();} finally {try {if (is != null) {is.close();}} catch (IOException e) {e.printStackTrace();}}switch(p) {case 0xefbb:return \"UTF-8\";case 0xfffe:return \"Unicode\";case 0xfeff:return \"UTF-16BE\";default:return \"GBK\";}}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_91_is_bored", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_91_is_bored.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_91_is_bored", "test": "    }\n    public static void main(String[] args) {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n", "description": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'. For example:", "codematcher_results": ["public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput = null;ObjectOutput outputObject = null;try {streamByteArrayOutput = new ByteArrayOutputStream();outputObject = new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized = streamByteArrayOutput.toByteArray();(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_no_check_75b()).badSink(dataSerialized);} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"IOException in serialization\", exceptIO);} finally {try {if (outputObject != null) {outputObject.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing ObjectOutputStream\", exceptIO);}try {if (streamByteArrayOutput != null) {streamByteArrayOutput.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing ByteArrayOutputStream\", exceptIO);}}}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput = null;ObjectOutput outputObject = null;try {streamByteArrayOutput = new ByteArrayOutputStream();outputObject = new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized = streamByteArrayOutput.toByteArray();(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_max_75b()).badSink(dataSerialized);} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"IOException in serialization\", exceptIO);} finally {try {if (outputObject != null) {outputObject.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing ObjectOutputStream\", exceptIO);}try {if (streamByteArrayOutput != null) {streamByteArrayOutput.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing ByteArrayOutputStream\", exceptIO);}}}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput = null;ObjectOutput outputObject = null;try {streamByteArrayOutput = new ByteArrayOutputStream();outputObject = new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized = streamByteArrayOutput.toByteArray();(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_75b()).badSink(dataSerialized);} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"IOException in serialization\", exceptIO);} finally {try {if (outputObject != null) {outputObject.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing ObjectOutputStream\", exceptIO);}try {if (streamByteArrayOutput != null) {streamByteArrayOutput.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing ByteArrayOutputStream\", exceptIO);}}}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}LinkedList<Integer> dataLinkedList = new LinkedList<Integer>();dataLinkedList.add(0, data);dataLinkedList.add(1, data);dataLinkedList.add(2, data);(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_no_check_73b()).badSink(dataLinkedList);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}LinkedList<Integer> dataLinkedList = new LinkedList<Integer>();dataLinkedList.add(0, data);dataLinkedList.add(1, data);dataLinkedList.add(2, data);(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_max_73b()).badSink(dataLinkedList);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}LinkedList<Integer> dataLinkedList = new LinkedList<Integer>();dataLinkedList.add(0, data);dataLinkedList.add(1, data);dataLinkedList.add(2, data);(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_73b()).badSink(dataLinkedList);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}Vector<Integer> dataVector = new Vector<Integer>(5);dataVector.add(0, data);dataVector.add(1, data);dataVector.add(2, data);(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_no_check_72b()).badSink(dataVector);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}Vector<Integer> dataVector = new Vector<Integer>(5);dataVector.add(0, data);dataVector.add(1, data);dataVector.add(2, data);(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_max_72b()).badSink(dataVector);}\n", "public void bad() throws Throwable {int data;data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}Vector<Integer> dataVector = new Vector<Integer>(5);dataVector.add(0, data);dataVector.add(1, data);dataVector.add(2, data);(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_check_min_72b()).badSink(dataVector);}\n", "public void bad() throws Throwable {data = Integer.MIN_VALUE;{Socket socket = null;BufferedReader readerBuffered = null;InputStreamReader readerInputStream = null;try {socket = new Socket(\"host.example.org\", 39544);readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");readerBuffered = new BufferedReader(readerInputStream);String stringNumber = readerBuffered.readLine();{try {data = Integer.parseInt(stringNumber.trim());} catch (NumberFormatException exceptNumberFormat) {IO.logger.log(Level.WARNING, \"Number format exception parsing data from string\", exceptNumberFormat);}}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);} finally {try {if (readerBuffered != null) {readerBuffered.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);}try {if (readerInputStream != null) {readerInputStream.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);}try {if (socket != null) {socket.close();}} catch (IOException exceptIO) {IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);}}}(new CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_read_no_check_68b()).badSink();}\n"]}
{"name": "HumanEval_43_pairs_sum_to_zero", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_43_pairs_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)30l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)31l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)30l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)31l)))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_43_pairs_sum_to_zero", "test": "    }\n    public static void main(String[] args) {\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)30l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)31l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)30l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)31l)))) == (false));\n    }\n\n}\n", "description": "pairs_sum_to_zero takes an array array list of integers as an input. it returns true if there are two distinct elements in the array list that sum to zero, and false otherwise.", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_71_triangle_area", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_71_triangle_area.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == (float)-1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == (float)-1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == (float)-1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == (float)-1l);\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_71_triangle_area", "test": "    }\n    public static void main(String[] args) {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == (float)-1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == (float)-1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == (float)-1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == (float)-1l);\n    }\n\n}\n", "description": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side. Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_148_bf", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_148_bf.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_148_bf", "test": "    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n", "description": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a pair containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty pair if planet1 or planet2 are not correct planet names. Examples", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_131_digits", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_131_digits.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_131_digits", "test": "    }\n    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n", "description": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even. For example:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_101_words_string", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_101_words_string.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(wordsString((\"Hi, my name is John\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"Hi, my name\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\")))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(wordsString((\"ahmed     , gamal\")).equals((new ArrayList<String>(Arrays.asList((String)\"ahmed\", (String)\"gamal\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_101_words_string", "test": "    }\n    public static void main(String[] args) {\n    assert(wordsString((\"Hi, my name is John\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"Hi, my name\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\")))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(wordsString((\"ahmed     , gamal\")).equals((new ArrayList<String>(Arrays.asList((String)\"ahmed\", (String)\"gamal\")))));\n    }\n\n}\n", "description": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array array list of the words. For example:", "codematcher_results": ["public static ArrayList<String> StringToStringArrayList(String str) {ArrayList<String> arr = new ArrayList<>();if (str.contains(\"[\") && str.length() >= 3) {str = str.substring(1, str.length() - 1);if (str.contains(\",\")) {String[] temp = str.split(\",\");for (int i@ i = 0@ i < temp.length++){if (i != 0) {temp[i] = temp[i].substring(1, temp[i].length());}arr.add(temp[i]);}} else {arr.add(str);}}return arr;}\n", "public Object put(Object key, Object value) {if (!(value instanceof List)) {throw new RuntimeException(\"\u4e0d\u662flist\");}ArrayList<String> list = (ArrayList<String>) value;List<String> stringList = list.stream().map(e -> JSONObject.toJSONString(e)).collect(Collectors.toList());String[] stringArray = (String[]) (stringList.toArray());return jedisClient.lPush(key.toString(), stringArray);}\n", "private static void run() throws IOException {List<String> list = Files.readAllLines(Paths.get(\"/home/lion/tmp/abc\"));Pattern pattern = Pattern.compile(\"href=\\\"(http://katfile.com/.*?)\\\"\");Set<String> collect = list.stream().filter(s -> s.contains(\"http://katfile.com\")).flatMap(s -> {Matcher matcher = pattern.matcher(s);List<String> stringList = new ArrayList<>();while (matcher.find()) {stringList.add(matcher.group(1));}return stringList.stream();}).distinct().collect(Collectors.toSet());String s = \"/mnt/heap/vv/\" + System.currentTimeMillis();Files.write(Paths.get(s), collect);}\n", "public Object put(Object key, Object value) {if (!(value instanceof Set)) {throw new RuntimeException(\"\u4e0d\u662fset\");}Set<String> set = (Set<String>) value;List<String> stringList = set.stream().map(e -> JSONObject.toJSONString(e)).collect(Collectors.toList());String[] stringArray = (String[]) (stringList.toArray());return jedisClient.sadd(key.toString(), stringArray);}\n", "public List<String> seg(String original) {if (StringUtil.isEmpty(original)) {return Collections.emptyList();}char[] chars = original.toCharArray();List<String> stringList = new ArrayList<>();for (char c : chars) {stringList.add(String.valueOf(c));}return stringList;}\n", "public void put(String rowKey, String cf, String iden, String[] strings) throws IOException {Put put = new Put(Bytes.toBytes(rowKey));List<String> stringList = Arrays.asList(strings);ArrayList<String> stringArrayList = new ArrayList<>(stringList);put.addColumn(Bytes.toBytes(cf), Bytes.toBytes(iden), arrayListToByte(stringArrayList));table.put(put);System.out.println((\"Put in row : \" + rowKey));}\n", "public StringList add(long toAdd) {add(Long.toString(toAdd));return this;}\n", "public StringList add(int toAdd) {add(Integer.toString(toAdd));return this;}\n", "public ResponseData css(String cssString, String attrName) {if (attrName == null) {List<Element> resultElements = new ArrayList<>();resultElements.addAll(this.document.select(cssString));return new HtmlData(resultElements);} else {List<String> stringList = new ArrayList<>();List<Element> elements = this.document.select(cssString);stringList.addAll(elements.stream().map(e -> e.attr(attrName)).collect(Collectors.toList()));return new PlainTextData(stringList);}}\n", "public void run() {if (logger.isDebugEnabled())logger.debug(\"Content quota manager checker thread starting\");StringList removeNameList = new StringList();m_shutdown = false;while (m_shutdown == false) {try {Thread.sleep(UserQuotaCheckInterval);} catch (InterruptedException ex) {}if (m_shutdown == true) {if (logger.isDebugEnabled())logger.debug(\"Content quota manager checker thread closing\");return;}synchronized (m_liveUsageLock) {if (m_liveUsage != null && m_liveUsage.size() > 0) {try {long checkTime = System.currentTimeMillis() - UserQuotaExpireInterval;removeNameList.remoteAllStrings();Iterator<String> userNames = m_liveUsage.keySet().iterator();while (userNames.hasNext()) {String userName = userNames.next();UserQuotaDetails quotaDetails = m_liveUsage.get(userName);synchronized (quotaDetails) {if (quotaDetails.getLastUpdated() < checkTime) {removeNameList.addString(userName);}}}while (removeNameList.numberOfStrings() > 0) {String userName = removeNameList.removeStringAt(0);UserQuotaDetails quotaDetails = m_liveUsage.remove(userName);if (logger.isDebugEnabled())logger.debug(\"Removed inactive usage tracking, \" + quotaDetails);}} catch (Exception ex) {if (m_shutdown == false)logger.debug(ex);}}}}}\n"]}
{"name": "HumanEval_18_how_many_times", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_18_how_many_times.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_18_how_many_times", "test": "    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n", "description": "Find how many times a given substring can be found in the original string. Count overlaping cases.", "codematcher_results": ["public static ChronoSeries of(@NotNull InfluxDB influxDB, @NotNull String database, @NotNull String table, @NotNull String column) {ChronoSeries series = new ChronoSeries();series.chronoScale = new ChronoScale();series.influxDB = requireNonNull(influxDB);series.database = requireNonNull(database);series.table = requireNonNull(table);series.column = requireNonNull(column);influxDB.setDatabase(database);QueryResult queryResult = series.influxDB.query(new Query(String.format(\"SELECT COUNT(\\\"%s\\\") FROM \\\"%s\\\"\", column, table), database));for (QueryResult.Result result : queryResult.getResults()) {series.size = ((Double) result.getSeries().get(0).getValues().get(0).get(1)).intValue();if (series.size < 2) {throw new IllegalStateException(\"ChronoSeries requires at least two elements to initiate\");}}queryResult = series.influxDB.query(new Query(String.format(\"SELECT FIRST(\\\"%s\\\") FROM \\\"%s\\\"\", column, table), database));for (QueryResult.Result result : queryResult.getResults()) {String timeString = (String) result.getSeries().get(0).getValues().get(0).get(0);series.beginTimestamp = Instant.parse(timeString);}queryResult = series.influxDB.query(new Query(String.format(\"SELECT LAST(\\\"%s\\\") FROM \\\"%s\\\"\", column, table), database));for (QueryResult.Result result : queryResult.getResults()) {String timeString = (String) result.getSeries().get(0).getValues().get(0).get(0);series.endTimestamp = Instant.parse(timeString);}LocalDateTime startDate = series.beginTimestamp.atZone(ZoneOffset.UTC).toLocalDateTime();LocalDateTime endDate = series.endTimestamp.atZone(ZoneOffset.UTC).toLocalDateTime();disableUnnecessaryUnits(series, startDate, endDate);return series;}\n", "public void run(Language language) {Map<String, TimeSymbol> targetProperties = loadTimeProperties();Set<String> foundEvents = new HashSet<String>();try {resultsWriter = FileLoader.getWriter(FileName.DBPEDIA_TIMES, language);} catch (FileNotFoundException e) {e.printStackTrace();}BufferedReader br = null;try {try {br = FileLoader.getReader(FileName.DBPEDIA_MAPPINGS_LITERALS, language);} catch (FileNotFoundException e1) {e1.printStackTrace();}resultsWriter.write(\"subject\" + Config.TAB + \"time\" + Config.TAB + \"start/end/both/no\" + Config.NL);String line;while ((line = br.readLine()) != null) {if (line.startsWith(\"#\"))continue;String[] parts = line.split(\" \");String property = parts[1];if (targetProperties.containsKey(property)) {String timeString = parts[2];String subject = parts[0];if (!subject.contains(\"resource\"))continue;subject = subject.substring(subject.lastIndexOf(\"resource/\") + 9, subject.lastIndexOf(\">\"));String fileLine = subject + Config.TAB + property + Config.TAB + timeString + Config.TAB + targetProperties.get(property).getTimeSymbol();if (foundEvents.contains(fileLine))continue;resultsWriter.write(fileLine + \"\");foundEvents.add(fileLine);}}} catch (IOException e) {e.printStackTrace();} finally {try {br.close();resultsWriter.close();} catch (IOException e) {e.printStackTrace();}}}\n", "public static void pop(ProgressBar bar) {if (bar.getSteps() != bar.getStep())throw new IllegalStateException(\"can't pop unfinished ProgressBar \" + bar.getTitle());bars.remove(bar);if (bar.getSteps() != 0) {long newTime = System.nanoTime();if (bar.timeEachStep) {String timeString = String.format(\"%.3f\", ((float) (newTime - bar.lastTime) / 1000000 / 1000));PFServer.LOGGER.debug(\"Bar Step: {} - {} took {}s\", bar.getTitle(), bar.getMessage(), timeString);}String timeString = String.format(\"%.3f\", ((float) (newTime - bar.startTime) / 1000000 / 1000));if (bar.getSteps() == 1)PFServer.LOGGER.debug(\"Bar Finished: {} - {} took {}s\", bar.getTitle(), bar.getMessage(), timeString);elsePFServer.LOGGER.debug(\"Bar Finished: {} took {}s\", bar.getTitle(), timeString);}FMLCommonHandler.instance().processWindowMessages();}\n", "public void run() {if (keyword == null || release_time == null) {print(\"keyword or release time is null.\");return;}int productId = getProductId(keyword);if (productId == -1) {print(\"Product Ids is -1\");return;}List<String> variants = getVariants(productId);List<Runnable> tasks = new ArrayList<Runnable>();List<Thread> threads = new ArrayList<Thread>();if (variants.size() == 0) {print(\"Items are out of stock.\");return;}for (String variant : variants) {tasks.add(() -> {boolean carted = false;while (!carted && !Thread.interrupted()) carted = addToCart(productId, variant);if (carted) {boolean checkout = false;while (!checkout && !Thread.interrupted()) checkout = checkout(variant);if (checkout)print(\"Successful checkout on item: \" + productId + \" Variant: \" + variant);elseprint(\"Unsuccessful checkout on item: \" + productId + \" Variant: \" + variant);}});}tasks.add(() -> {synchronized (this) {while (token == null) {if (Bot.captchas.size() >= 1)token = Bot.captchas.remove(new Random().nextInt(Bot.captchas.size()));else {print(\"Please fill captcha bank.\");sleep(5000L);}}}while (!itemCarted && !Thread.interrupted()) {if (token != null && token.isExpired()) {token = null;synchronized (this) {while (token == null) {if (Bot.captchas.size() >= 1)token = Bot.captchas.remove(new Random().nextInt(Bot.captchas.size()));else {print(\"Please fill captcha bank.\");sleep(5000L);}}}}}});tasks.stream().forEach(t -> {threads.add(new Thread(t));});if (sleep > 0L) {int totalSecs = (int) sleep;int hours = totalSecs / 3600;int minutes = (totalSecs % 3600) / 60;int seconds = totalSecs % 60;String timeString = String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);print(\"Sleeping for \" + timeString);sleep((sleep * 1000L) - 5000L);}threads.stream().forEach(// start atc & checkout processt -> {t.start();});synchronized (this) {while (// check if any threads checked out.!itemCarted) sleep(2500L);}threads.stream().forEach(// stop threads if item checked out.t -> {t.interrupt();});}\n", "public String time() {String timeString = String.valueOf(SimpleMessagesAPI.getSettingsAPI().mechanic.getCountry());TimeZone timeZone = TimeZone.getTimeZone(timeString);Calendar calendar = new GregorianCalendar();calendar.setTimeZone(timeZone);int hour = calendar.get(Calendar.HOUR_OF_DAY);int minute = calendar.get(Calendar.MINUTE);int second = calendar.get(Calendar.SECOND);return String.valueOf(hour + \":\" + minute + \":\" + second);}\n", "public void draw(Canvas canvas, Paint paint) {if (time == 0) {w = canvas.getWidth();h = canvas.getHeight();initBitmapSize();timeTracker = new TimeTracker(w - w / 10, h / 20, w / 25);}paint.setStyle(Paint.Style.FILL);paint.setTextSize(w / 30);canvas.drawColor(Color.BLACK);paint.setColor(Color.parseColor(\"#FAFAFA\"));paint.setTextSize(w / 20);canvas.drawText(title, w / 2 - paint.measureText(title) / 2, 9 * h / 10, paint);canvas.drawText(day + \",\" + timeString, w / 20, h / 10 + w / 15, paint);canvas.drawBitmap(statusBitmap, 0, h / 5, paint);timeTracker.draw(canvas, paint);time += dir;timeTracker.update();if (time == StoryConstants.STATUS_INTERVAL) {stop = true;dir = 0;}}\n", "public OerGeneralizedTime read(CodecContext context, InputStream inputStream) throws IOException {Objects.requireNonNull(context);Objects.requireNonNull(inputStream);final String timeString = context.read(OerIA5String.class, inputStream).getValue();if (timeString.length() != 19 || !timeString.endsWith(\"Z\")) {throw new IllegalArgumentException(\"Interledger GeneralizedTime only supports values in the format 'YYYYMMDDTHHMMSS.fffZ',\" + \" value \" + timeString + \" is invalid.\");}try {final Instant value = Instant.from(generalizedTimeFormatter.parse(timeString));return new OerGeneralizedTime(value);} catch (DateTimeParseException dtp) {throw new IllegalArgumentException(\"Interledger GeneralizedTime only supports values in the format 'YYYYMMDDTHHMMSS.fffZ', \" + \"value \" + timeString + \" is invalid.\", dtp);}}\n", "public static void main(String[] args) {if (args.length != 1) {System.out.println(\";System.out.println(\"required argument:\");System.out.println(\"- private seed of your in-cycle verifier\");\");return;}byte[] privateSeed = ByteUtil.byteArrayFromHexString(args[0], FieldByteSize.seed);byte[] inCycleVerifierIdentifier = KeyUtil.identifierForSeed(privateSeed);byte[] ipAddress = ScriptUtil.ipAddressForVerifier(inCycleVerifierIdentifier);if (ByteUtil.isAllZeros(ipAddress)) {System.out.println(\"unable to find IP address of \" + ByteUtil.arrayAsStringWithDashes(inCycleVerifierIdentifier));return;}AtomicBoolean receivedResponse = new AtomicBoolean(false);Message message = new Message(MessageType.MeshStatusRequest408, null);message.sign(privateSeed);Message.fetch(IpUtil.addressAsString(ipAddress), MeshListener.standardPort, message, new MessageCallback() {;public void responseReceived(Message message) {System.out.println(\"response is \" + message);long minimumTimestamp = Long.MAX_VALUE;long maximumTimestamp = 0L;if (message != null) {int index = 1;MeshStatusResponse response = (MeshStatusResponse) message.getContent();System.out.println(\"ID: In Cycle, Identifier, Timestamp (Long form), Top Verifier Index, Is New Verifier Vote?\");for (String line : response.getLines()) {String[] split = line.split(\",\");boolean inCycle = split[0].trim().equals(\"C\");String identifier = split[1].trim();long timestamp = Long.parseLong(split[2].trim());String timeString = PrintUtil.printTimestamp(timestamp);int topVerifierIndex = (split[3].trim().equals(\"-\") ? -1 : Integer.parseInt(split[3].trim()));boolean isNewVerifierVote = split[4].trim().equals(\"*\");String nickname = split[5].trim();System.out.println(pad(index++) + \": \" + split[0] + \", \" + split[1] + \", \" + timeString + \", \" + split[3] + \", \" + split[4] + \", \" + split[5]);minimumTimestamp = Math.min(minimumTimestamp, timestamp);maximumTimestamp = Math.max(maximumTimestamp, timestamp);}}System.out.println();System.out.println(\"minimum timestamp: \" + PrintUtil.printTimestamp(minimumTimestamp));System.out.println(\"maximum timestamp: \" + PrintUtil.printTimestamp(maximumTimestamp));System.out.println(\"timestamp range: \" + String.format(\"%.3f\", (maximumTimestamp - minimumTimestamp) / 1000.0));receivedResponse.set(true);}});while (!receivedResponse.get()) {try {Thread.sleep(300L);} catch (Exception ignored) {}}UpdateUtil.terminate();}\n", "public Time(String formattedTime) throws IllegalArgumentException {final Pattern minorTimeString = Pattern.compile(\"^\\\\d+$\");final Pattern timeString = Pattern.compile(\"^((\\\\d+)w)?((\\\\d+)d)?((\\\\d+)h)?((\\\\d+)m)?((\\\\d+)s)?$\");if (minorTimeString.matcher(formattedTime).matches()) {this.time += Long.parseUnsignedLong(formattedTime);return;}Matcher m = timeString.matcher(formattedTime);if (m.matches()) {this.time = amount(m.group(2), secondsPerWeek);this.time += amount(m.group(4), secondsPerDay);this.time += amount(m.group(6), secondsPerHour);this.time += amount(m.group(8), secondsPerMinute);this.time += amount(m.group(10), 1);}}\n", "private void save() {String nameString = name.getText().toString();String timeString = time.getText().toString();String upsString = where.getText().toString();String descriptionString = description.getText().toString();AWSAppSyncClient awsAppSyncClient = ClientFactory.getInstance(this.getApplicationContext());AddEventMutation addEventMutation = AddEventMutation.builder().name(nameString).when(timeString).where(upsString).description(descriptionString).build();awsAppSyncClient.mutate(addEventMutation).refetchQueries(ListEventsQuery.builder().build()).enqueue(addEventsCallback);List<Event.Item> items = new ArrayList<>();String tempID = UUID.randomUUID().toString();Event event = new Event(\"Event\", tempID, descriptionString, nameString, timeString, upsString, new Event.Comments(\"Comment\", items));addEventOffline(new ListEventsQuery.Item(\"Event\", new ListEventsQuery.Item.Fragments(event)));ConnectivityManager cm = (ConnectivityManager) getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetwork = cm.getActiveNetworkInfo();boolean isConnected = activeNetwork != null && activeNetwork.isConnectedOrConnecting();if (!isConnected) {finish();}}\n"]}
{"name": "HumanEval_51_remove_vowels", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_51_remove_vowels.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_51_remove_vowels", "test": "    }\n    public static void main(String[] args) {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n", "description": "remove_vowels is a function that takes string and returns string without vowels.", "codematcher_results": ["public static void main(String[] args) {Basic main to execute the connexion functionString str;str = \"\";Scanner sc = new Scanner(System.in);str = sc.nextLine();Connexion(str);}\n", "public Object clone() {Function function = new Function();function.setAddStyleOpt(this.addStyleOpt);function.setColor(color);function.setConstants((ArrayList<Constant>) ((ArrayList<Constant>) constants).clone());function.setEnabled(enabled);function.setFunctionString(functionString);function.setStyle(this.style);function.setTitle(title);return function;}\n", "public String simpleString() {String keyString = \"[\" + StringUtils.join(groupingExpressions, ',') + \"]\";String functionString = \"[\" + StringUtils.join(aggregateExpressions, ',') + \"]\";String inputAttrsString = \"[\" + StringUtils.join(aggregateAttributes, \",\") + \"]\";String outputString = \"[\" + StringUtils.join(output(), ',') + \"]\";return String.format(\"physical.TungstenAggregate(key=%s, functions=%s, input=%s, output=%s)\", keyString, functionString, inputAttrsString, outputString);}\n", "public String toPlotString() {String s = \"\" + functionString;if (style != null || addStyleOpt != null || color != null) {s += \" with \";if (style != null)s += style.name() + \" \";if (addStyleOpt != null)s += addStyleOpt + \" \";if (color != null) {s += \"lc rgb '#\" + color.getHexString() + \"'\";}if (title != null && !title.equals(\"\"))s += \"title '\" + title + \"' \";}return s;}\n", "private SyntaxNode parseFunction(StringFunctionTokenQueue tokenQueue) {String functionString = tokenQueue.consumeFunction();StringFunctionTokenQueue tempTokenQueue = new StringFunctionTokenQueue(functionString);String functionName = tempTokenQueue.consumeIdentify();StringFunction function = StringFunctionEnv.findFunction(functionName);if (function == null) {throw new IllegalStateException(\"not such function: \" + functionName);}tempTokenQueue.consumeWhitespace();if (tempTokenQueue.isEmpty() || tempTokenQueue.peek() != '(') {throw new IllegalStateException(\"can not parse token: \" + functionString + \" ,it is not same to a function\");}String paramsStr = StringUtils.trimToEmpty(tempTokenQueue.chompBalanced('(', ')'));StringFunctionTokenQueue paramTokenQueue = new StringFunctionTokenQueue(paramsStr);String parameter;List<SyntaxNode> params = Lists.newLinkedList();while ((parameter = paramTokenQueue.consumeIgnoreQuote(',')) != null) {params.add(new ExpressionParser(new StringFunctionTokenQueue(parameter)).parse());}paramTokenQueue.consumeWhitespace();if (!paramTokenQueue.isEmpty()) {params.add(new ExpressionParser(new StringFunctionTokenQueue(paramTokenQueue.remainder())).parse());}return new FunctionSyntaxNode(function, params);}\n", "public static String getFindFunction(Node root, Node node, String linestart) {root.setParentAndDepth(0);if (linestart == null) {linestart = \"\";}String linestart2 = linestart + \" \";Node parent = getTheOnlyParent(root, node);String functionString = \"function(){\";String by = parent.getBy();String findNode = linestart2 + \"var node = findBiew(\" + by + \")\";String getChild = \"\";Node temp = node;System.out.println(\"start fucntion\");for () {if (temp == parent || temp == null) {break;}getChild = linestart2 + \"if(node!=null){\" + linestart2 + \" node = node.getChildren().get(\" + temp.index + \");\" + linestart2 + \"}\" + getChild;temp = temp.parent;}functionString += findNode + getChild;functionString += linestart + \"}\";System.out.println(\"end fucntion\");return functionString;}\n", "public Map<String, Integer> getColumnTypeMap(String table) {if (!mapType.isEmpty())return mapType;returnCols.clear();List<SelectItem> cols = this.getSelectItems();Iterator colItterator = cols.iterator();Map<String, Class> lclcolumnTypeMap = (LinkedHashMap<String, Class>) ethTableTypeMap.get(table);while (colItterator.hasNext()) {SelectItem col = (SelectItem) colItterator.next();if (col.hasChildType(StarNode.class)) {for (Map.Entry<String, Class> entry : lclcolumnTypeMap.entrySet()) {if (entry.getValue() instanceof Class) {mapType.put(entry.getKey(), getSQLType(entry.getValue()));}}returnCols.addAll(ethTableColumnMap.get(table));break;} else if (col.hasChildType(Column.class)) {String colName = ((IdentifierNode) ((Column) col.getChildType(Column.class, 0)).getChildType(IdentifierNode.class, 0)).getValue();if (lclcolumnTypeMap.containsKey(colName)) {mapType.put(colName, getSQLType((Class) lclcolumnTypeMap.get(colName)));returnCols.add(colName);} else {mapType.put(colName, getSQLType(Object.class));returnCols.add(colName);}} else if (col.hasChildType(FunctionNode.class)) {String func = ((IdentifierNode) ((FunctionNode) col.getChildType(FunctionNode.class, 0)).getChildType(IdentifierNode.class, 0)).getValue();String functionString = Utilities.createFunctionColName((FunctionNode) col.getChildType(FunctionNode.class, 0));switch(func) {case \"sum\":mapType.put(functionString, getSQLType(Double.class));returnCols.add(functionString);break;case \"count\":mapType.put(functionString, getSQLType(int.class));returnCols.add(functionString);}}}return mapType;}\n", "private void generateAssigners(final PrintWriter pw, final TypeElement typeElement) {Types typeUtils = processingEnv.getTypeUtils();final List<AnnotatedField> annotatedFields = new ArrayList<>();for (Element element : typeElement.getEnclosedElements()) {if (element instanceof VariableElement && element.getKind() == ElementKind.FIELD) {boolean annotationFound = false;for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {if (annotationMirror.getAnnotationType().toString().equals(\"org.apache.qpid.server.protocol.v1_0.CompositeTypeField\")) {if (annotationFound) {processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format(\"More than one CompositeTypeField annotations on field '%s.%s'\", typeElement.getSimpleName(), element.getSimpleName()));}annotationFound = true;annotatedFields.add(new AnnotatedField((VariableElement) element, annotationMirror));}}}}annotatedFields.sort(Comparator.comparingInt(AnnotatedField::getIndex));for (int index@ index = 0@ index < annotatedFields.size()++){AnnotatedField annotatedField = annotatedFields.get(index);final VariableElement variableElement = annotatedField.getVariableElement();final String fieldName = stripUnderscore(variableElement.getSimpleName().toString());if (annotatedField.getIndex() != index) {processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format(\"Unexpected CompositeTypeField index '%d' is specified on field '%s' of '%s'. Expected %d.\", annotatedField.getIndex(), fieldName, typeElement.getSimpleName(), index));}final String baseIndent = \" \";if (variableElement.asType().getKind() == TypeKind.ARRAY) {final TypeMirror componentType = ((ArrayType) variableElement.asType()).getComponentType();final String functionString;if (annotatedField.getFactory() != null) {functionString = \"x -> \" + annotatedField.getFactory() + \"(x)\";} else if (RESTRICTED_TYPES.contains(componentType)) {functionString = variableElement.asType().toString() + \"::valueOf\";} else {functionString = \"x -> (\" + componentType + \") x\";}pw.println(String.format(\" %s %s = fieldValueReader.readArrayValue(%d, \\\"%s\\\", %s, %s.class, %s)\", annotatedField.getVariableElement().asType(), fieldName, index, fieldName, annotatedField.isMandatory(), componentType, functionString));optionallyWrapInNullCheck(!annotatedField.isMandatory(), pw, baseIndent, fieldName, indent -> {pw.println(indent + \"obj.\" + getSetterName(variableElement) + \"(\" + fieldName + \")\");});} else if (annotatedField.getFactory() != null || RESTRICTED_TYPES.contains(variableElement.asType().toString())) {String functionName = annotatedField.getFactory() != null ? annotatedField.getFactory() : variableElement.asType().toString() + \".valueOf\";pw.println(String.format(\" Object %s = fieldValueReader.readValue(%d, \\\"%s\\\", %s, Object.class)\", fieldName, index, fieldName, annotatedField.isMandatory()));optionallyWrapInNullCheck(!annotatedField.isMandatory(), pw, baseIndent, fieldName, indent -> {pw.println(indent + \"try\");pw.println(indent + \"{\");pw.println(indent + \" obj.\" + getSetterName(variableElement) + \"(\" + functionName + \"(\" + fieldName + \"))\");pw.println(indent + \"}\");pw.println(indent + \"catch (RuntimeException e)\");pw.println(indent + \"{\");pw.println(indent + \" Error error = new Error(AmqpError.DECODE_ERROR, \\\"Could not decode value field '\" + fieldName + \"' of '\" + typeElement.getSimpleName() + \"'\\\")\");pw.println(indent + \" throw new AmqpErrorException(error, e)\");pw.println(indent + \"}\");});} else if (typeUtils.isSameType(typeUtils.erasure(variableElement.asType()), getErasure(processingEnv, \"java.util.Map\"))) {List<? extends TypeMirror> args = ((DeclaredType) variableElement.asType()).getTypeArguments();if (args.size() != 2) {processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, \"Map types must have exactly two type arguments\");}pw.println(String.format(\" %s %s = fieldValueReader.readMapValue(%d, \\\"%s\\\", %s, %s.class, %s.class)\", annotatedField.getVariableElement().asType(), fieldName, index, fieldName, annotatedField.isMandatory(), args.get(0), args.get(1)));optionallyWrapInNullCheck(!annotatedField.isMandatory(), pw, baseIndent, fieldName, indent -> {pw.println(indent + \"obj.\" + getSetterName(variableElement) + \"(\" + fieldName + \")\");});} else {pw.println(String.format(\" %s %s = fieldValueReader.readValue(%d, \\\"%s\\\", %s, %s.class)\", annotatedField.getVariableElement().asType(), fieldName, index, fieldName, annotatedField.isMandatory(), annotatedField.getVariableElement().asType()));optionallyWrapInNullCheck(!annotatedField.isMandatory(), pw, baseIndent, fieldName, indent -> {pw.println(indent + \"obj.\" + getSetterName(variableElement) + \"(\" + fieldName + \")\");});}pw.println();}}\n", "public String getFunctionString() {return functionString;}\n", "public void setFunctionString(String functionString) {this.functionString = functionString;}\n"]}
{"name": "HumanEval_70_strange_sort_list", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_70_strange_sort_list.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_70_strange_sort_list", "test": "    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n", "description": "Given array list of integers, return array list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. Examples:", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_20_find_closest_elements", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_20_find_closest_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(3.9f, 4.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f)))).equals((Pair.with(5.0f, 5.9f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(2.0f, 2.2f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f)))).equals((Pair.with(2.0f, 2.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f)))).equals((Pair.with(2.2f, 3.1f))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_20_find_closest_elements", "test": "    }\n    public static void main(String[] args) {\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(3.9f, 4.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f)))).equals((Pair.with(5.0f, 5.9f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(2.0f, 2.2f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f)))).equals((Pair.with(2.0f, 2.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f)))).equals((Pair.with(2.2f, 3.1f))));\n    }\n\n}\n", "description": "From a supplied array list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).", "codematcher_results": ["public static void main(String[] args) {Scanner input = new Scanner(System.in);int[] listNumber = new int[3];for (int i@ i = 0@ i < 3@ i++) listNumber[@ i] = @ input.nextInt();Arrays.sort(listNumber);System.out.println(lstNumber[1]);\n", "public static void main(String[] args) throws IOException {String filename = \"to_do_list.txt\";ArrayList<String> todo = new ArrayList<String>();todo.add(\"Grading\");todo.add(\"Pay water bill\");todo.add(\"Grocery shopping\");BufferedWriter bufWriter = new BufferedWriter(new FileWriter(filename));int listNumber = 1;for (String item : todo) {bufWriter.write(\"To do item \" + listNumber + \" is: \" + item + \"\");listNumber++;}bufWriter.close();System.out.println(\"Created sample to-do list and wrote to \" + filename);BufferedReader bReader = new BufferedReader(new FileReader(filename));ArrayList<String> numberedToDoList = new ArrayList<String>();String line = bReader.readLine();while (line != null) {numberedToDoList.add(line);line = bReader.readLine();}System.out.println(\"Here is your to do list, read from the file\");System.out.println(numberedToDoList);}\n", "public void prepare(ResponseBuilder rb, ComponentFields mtasFields) throws IOException {Set<String> ids = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_DOCUMENT);if (!ids.isEmpty()) {int tmpCounter = 0;String[] fields = new String[ids.size()];String[] keys = new String[ids.size()];String[] prefixes = new String[ids.size()];String[] types = new String[ids.size()];String[] regexps = new String[ids.size()];String[] lists = new String[ids.size()];Boolean[] listRegexps = new Boolean[ids.size()];Boolean[] listExpands = new Boolean[ids.size()];int[] listExpandNumbers = new int[ids.size()];String[] ignoreRegexps = new String[ids.size()];String[] ignoreLists = new String[ids.size()];Boolean[] ignoreListRegexps = new Boolean[ids.size()];String[] listNumbers = new String[ids.size()];for (String id : ids) {fields[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_FIELD, null);keys[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_KEY, String.valueOf(tmpCounter)).trim();prefixes[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_PREFIX, null);types[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_TYPE, null);regexps[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_REGEXP, null);lists[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_LIST, null);listRegexps[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_LIST_REGEXP, false);listExpands[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_LIST_EXPAND, false);listExpandNumbers[tmpCounter] = rb.req.getParams().getInt(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_LIST_EXPAND_NUMBER, 10);ignoreRegexps[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_IGNORE_REGEXP, null);ignoreLists[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_IGNORE_LIST, null);ignoreListRegexps[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_IGNORE_LIST_REGEXP, false);listNumbers[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_NUMBER, null);tmpCounter++;}String uniqueKeyField = rb.req.getSchema().getUniqueKeyField().getName();mtasFields.doDocument = true;rb.setNeedDocList(true);for (String field : fields) {if (field == null || field.isEmpty()) {throw new IOException(\"no (valid) field in mtas document\");} else if (!mtasFields.list.containsKey(field)) {mtasFields.list.put(field, new ComponentField(uniqueKeyField));}}MtasSolrResultUtil.compareAndCheck(keys, fields, NAME_MTAS_DOCUMENT_KEY, NAME_MTAS_DOCUMENT_FIELD, true);MtasSolrResultUtil.compareAndCheck(prefixes, fields, NAME_MTAS_DOCUMENT_PREFIX, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(types, fields, NAME_MTAS_DOCUMENT_TYPE, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(regexps, fields, NAME_MTAS_DOCUMENT_REGEXP, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(lists, fields, NAME_MTAS_DOCUMENT_LIST, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(ignoreRegexps, fields, NAME_MTAS_DOCUMENT_IGNORE_REGEXP, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(ignoreLists, fields, NAME_MTAS_DOCUMENT_IGNORE_LIST, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(listNumbers, fields, NAME_MTAS_DOCUMENT_NUMBER, NAME_MTAS_DOCUMENT_FIELD, false);for (int i@ i = 0@ i < fields.length++){String key = (keys[i] == null) || (keys[i].isEmpty()) ? String.valueOf(i) + \":\" + fields[i] + \":\" + prefixes[i] : keys[i].trim();String prefix = prefixes[i];if (prefix == null || prefix.isEmpty()) {throw new IOException(\"no (valid) prefix in mtas document\");}String type = types[i];String regexp = regexps[i];String[] list = null;Boolean listRegexp = listRegexps[i];Boolean listExpand = listExpands[i];int listExpandNumber = listExpandNumbers[i];if (lists[i] != null) {ArrayList<String> tmpList = new ArrayList<>();String[] subList = lists[i].split(\"(?<!\\\\\\\\),\");for (int j@ j = 0@ j < subList.length++){tmpList.add(subList[j].replace(\"\\\\,\", \",\").replace(\"\\\\\\\\\", \"\\\\\"));}list = tmpList.toArray(new String[tmpList.size()]);}int listNumber = Math.max(0, (listNumbers[i] == null) || (listNumbers[i].isEmpty()) ? 0 : Integer.parseInt(listNumbers[i]));String ignoreRegexp = ignoreRegexps[i];String[] ignoreList = null;Boolean ignoreListRegexp = ignoreListRegexps[i];if (ignoreLists[i] != null) {ArrayList<String> tmpList = new ArrayList<>();String[] subList = ignoreLists[i].split(\"(?<!\\\\\\\\),\");for (int j@ j = 0@ j < subList.length++){tmpList.add(subList[j].replace(\"\\\\,\", \",\").replace(\"\\\\\\\\\", \"\\\\\"));}ignoreList = tmpList.toArray(new String[tmpList.size()]);}mtasFields.list.get(fields[i]).documentList.add(new ComponentDocument(key, prefix, type, regexp, list, listNumber, listRegexp, listExpand, listExpandNumber, ignoreRegexp, ignoreList, ignoreListRegexp));}}}\n", "public void prepare(ResponseBuilder rb, ComponentFields mtasFields) throws IOException {Set<String> ids = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_TERMVECTOR);if (!ids.isEmpty()) {int tmpCounter = 0;String[] fields = new String[ids.size()];String[] keys = new String[ids.size()];String[] prefixes = new String[ids.size()];String[][] distanceKeys = new String[ids.size()][];String[][] distanceTypes = new String[ids.size()][];String[][] distanceBases = new String[ids.size()][];Map<String, String>[][] distanceParameters = new Map[ids.size()][];String[][] distanceMinimums = new String[ids.size()][];String[][] distanceMaximums = new String[ids.size()][];String[] regexps = new String[ids.size()];String[] fulls = new String[ids.size()];String[] sortTypes = new String[ids.size()];String[] sortDirections = new String[ids.size()];String[] types = new String[ids.size()];String[] startValues = new String[ids.size()];String[] numbers = new String[ids.size()];String[] numberShards = new String[ids.size()];String[][] functionExpressions = new String[ids.size()][];String[][] functionKeys = new String[ids.size()][];String[][] functionTypes = new String[ids.size()][];String[] boundaries = new String[ids.size()];String[] lists = new String[ids.size()];Boolean[] listRegexps = new Boolean[ids.size()];String[] ignoreRegexps = new String[ids.size()];String[] ignoreLists = new String[ids.size()];Boolean[] ignoreListRegexps = new Boolean[ids.size()];for (String id : ids) {fields[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FIELD, null);keys[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_KEY, String.valueOf(tmpCounter)).trim();prefixes[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_PREFIX, null);Set<String> distanceIds = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE);distanceKeys[tmpCounter] = new String[distanceIds.size()];distanceTypes[tmpCounter] = new String[distanceIds.size()];distanceBases[tmpCounter] = new String[distanceIds.size()];distanceParameters[tmpCounter] = new Map[distanceIds.size()];distanceMinimums[tmpCounter] = new String[distanceIds.size()];distanceMaximums[tmpCounter] = new String[distanceIds.size()];int tmpSubDistanceCounter = 0;for (String distanceId : distanceIds) {distanceKeys[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_KEY, String.valueOf(tmpSubDistanceCounter)).trim();distanceTypes[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_TYPE, null);distanceBases[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_BASE, null);distanceParameters[tmpCounter][tmpSubDistanceCounter] = new HashMap<>();Set<String> parameters = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_PARAMETER);for (String parameter : parameters) {distanceParameters[tmpCounter][tmpSubDistanceCounter].put(parameter, rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_PARAMETER + \".\" + parameter));}distanceMinimums[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_MINIMUM, null);distanceMaximums[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_MAXIMUM, null);tmpSubDistanceCounter++;}regexps[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_REGEXP, null);fulls[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FULL, null);sortTypes[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_SORT_TYPE, null);sortDirections[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_SORT_DIRECTION, null);startValues[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_START, null);numbers[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_NUMBER, null);numberShards[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_NUMBER_SHARDS, null);types[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_TYPE, null);Set<String> functionIds = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION);functionExpressions[tmpCounter] = new String[functionIds.size()];functionKeys[tmpCounter] = new String[functionIds.size()];functionTypes[tmpCounter] = new String[functionIds.size()];int tmpSubFunctionCounter = 0;for (String functionId : functionIds) {functionKeys[tmpCounter][tmpSubFunctionCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION + \".\" + functionId + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION_KEY, String.valueOf(tmpSubFunctionCounter)).trim();functionExpressions[tmpCounter][tmpSubFunctionCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION + \".\" + functionId + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION_EXPRESSION, null);functionTypes[tmpCounter][tmpSubFunctionCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION + \".\" + functionId + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION_TYPE, null);tmpSubFunctionCounter++;}boundaries[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_BOUNDARY, null);lists[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_LIST);listRegexps[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_LIST_REGEXP, false);ignoreRegexps[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_IGNORE_REGEXP, null);ignoreLists[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_IGNORE_LIST, null);ignoreListRegexps[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_IGNORE_LIST_REGEXP, false);tmpCounter++;}String uniqueKeyField = rb.req.getSchema().getUniqueKeyField().getName();mtasFields.doTermVector = true;rb.setNeedDocSet(true);for (String field : fields) {if (field == null || field.isEmpty()) {throw new IOException(\"no (valid) field in mtas termvector\");} else if (!mtasFields.list.containsKey(field)) {mtasFields.list.put(field, new ComponentField(uniqueKeyField));}}MtasSolrResultUtil.compareAndCheck(keys, fields, NAME_MTAS_TERMVECTOR_KEY, NAME_MTAS_TERMVECTOR_FIELD, true);MtasSolrResultUtil.compareAndCheck(prefixes, fields, NAME_MTAS_TERMVECTOR_PREFIX, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(regexps, fields, NAME_MTAS_TERMVECTOR_REGEXP, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(types, fields, NAME_MTAS_TERMVECTOR_TYPE, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(sortTypes, fields, NAME_MTAS_TERMVECTOR_SORT_TYPE, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(sortDirections, fields, NAME_MTAS_TERMVECTOR_SORT_DIRECTION, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(numbers, fields, NAME_MTAS_TERMVECTOR_NUMBER, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(boundaries, fields, NAME_MTAS_TERMVECTOR_BOUNDARY, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(lists, fields, NAME_MTAS_TERMVECTOR_LIST, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(ignoreRegexps, fields, NAME_MTAS_TERMVECTOR_IGNORE_REGEXP, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(ignoreLists, fields, NAME_MTAS_TERMVECTOR_IGNORE_LIST, NAME_MTAS_TERMVECTOR_FIELD, false);for (int i@ i = 0@ i < fields.length++){if (!rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {numberShards[i] = null;boundaries[i] = null;}String field = fields[i];String prefix = (prefixes[i] == null) || (prefixes[i].isEmpty()) ? null : prefixes[i].trim();String key = (keys[i] == null) || (keys[i].isEmpty()) ? String.valueOf(i) + \":\" + field + \":\" + prefix : keys[i].trim();String[] distanceKey = distanceKeys[i];String[] distanceType = distanceTypes[i];String[] distanceBase = distanceBases[i];Map<String, String>[] distanceParameter = distanceParameters[i];String[] distanceMinimum = distanceMinimums[i];String[] distanceMaximum = distanceMaximums[i];String regexp = (regexps[i] == null) || (regexps[i].isEmpty()) ? null : regexps[i].trim();Boolean full = (fulls[i] == null) || (!fulls[i].equals(\"true\")) ? false : true;String startValue = (startValues[i] == null) || (startValues[i].isEmpty()) ? null : startValues[i].trim();int listNumber = (numbers[i] == null) || (numbers[i].isEmpty()) ? DEFAULT_NUMBER : Integer.parseInt(numbers[i]);int numberFinal = (numberShards[i] == null) || (numberShards[i].isEmpty()) ? listNumber : Integer.parseInt(numberShards[i]);String type = (types[i] == null) || (types[i].isEmpty()) ? null : types[i].trim();String sortType = (sortTypes[i] == null) || (sortTypes[i].isEmpty()) ? null : sortTypes[i].trim();String sortDirection = (sortDirections[i] == null) || (sortDirections[i].isEmpty()) ? null : sortDirections[i].trim();String[] functionKey = functionKeys[i];String[] functionExpression = functionExpressions[i];String[] functionType = functionTypes[i];String boundary = boundaries[i];String[] list = null;Boolean listRegexp = listRegexps[i];if (lists[i] != null) {ArrayList<String> tmpList = new ArrayList<>();String[] subList = lists[i].split(\"(?<!\\\\\\\\),\");for (int j@ j = 0@ j < subList.length++){tmpList.add(subList[j].replace(\"\\\\,\", \",\").replace(\"\\\\\\\\\", \"\\\\\"));}list = tmpList.toArray(new String[tmpList.size()]);}String ignoreRegexp = ignoreRegexps[i];String[] ignoreList = null;Boolean ignoreListRegexp = ignoreListRegexps[i];if (ignoreLists[i] != null) {ArrayList<String> tmpList = new ArrayList<>();String[] subList = ignoreLists[i].split(\"(?<!\\\\\\\\),\");for (int j@ j = 0@ j < subList.length++){tmpList.add(subList[j].replace(\"\\\\,\", \",\").replace(\"\\\\\\\\\", \"\\\\\"));}ignoreList = tmpList.toArray(new String[tmpList.size()]);}if (prefix == null || prefix.isEmpty()) {throw new IOException(\"no (valid) prefix in mtas termvector\");} else {try {mtasFields.list.get(field).termVectorList.add(new ComponentTermVector(key, prefix, distanceKey, distanceType, distanceBase, distanceParameter, distanceMinimum, distanceMaximum, regexp, full, type, sortType, sortDirection, startValue, numberFinal, functionKey, functionExpression, functionType, boundary, list, listRegexp, ignoreRegexp, ignoreList, ignoreListRegexp));} catch (ParseException e) {throw new IOException(e);}}}}}\n", "private void option1() {mToolbar = this.findViewById(R.id.areToolbar);IARE_ToolItem bold = new ARE_ToolItem_Bold();IARE_ToolItem italic = new ARE_ToolItem_Italic();IARE_ToolItem underline = new ARE_ToolItem_Underline();IARE_ToolItem strikethrough = new ARE_ToolItem_Strikethrough();IARE_ToolItem quote = new ARE_ToolItem_Quote();IARE_ToolItem listNumber = new ARE_ToolItem_ListNumber();IARE_ToolItem listBullet = new ARE_ToolItem_ListBullet();IARE_ToolItem hr = new ARE_ToolItem_Hr();IARE_ToolItem link = new ARE_ToolItem_Link();IARE_ToolItem subscript = new ARE_ToolItem_Subscript();IARE_ToolItem superscript = new ARE_ToolItem_Superscript();IARE_ToolItem left = new ARE_ToolItem_AlignmentLeft();IARE_ToolItem center = new ARE_ToolItem_AlignmentCenter();IARE_ToolItem right = new ARE_ToolItem_AlignmentRight();IARE_ToolItem image = new ARE_ToolItem_Image();IARE_ToolItem video = new ARE_ToolItem_Video();IARE_ToolItem at = new ARE_ToolItem_At();mToolbar.addToolbarItem(bold);mToolbar.addToolbarItem(italic);mToolbar.addToolbarItem(underline);mToolbar.addToolbarItem(strikethrough);mToolbar.addToolbarItem(quote);mToolbar.addToolbarItem(listNumber);mToolbar.addToolbarItem(listBullet);mToolbar.addToolbarItem(hr);mToolbar.addToolbarItem(link);mToolbar.addToolbarItem(subscript);mToolbar.addToolbarItem(superscript);mToolbar.addToolbarItem(left);mToolbar.addToolbarItem(center);mToolbar.addToolbarItem(right);mToolbar.addToolbarItem(image);mToolbar.addToolbarItem(video);mToolbar.addToolbarItem(at);mEditText = this.findViewById(R.id.yView);mEditText.setToolbar(mToolbar);initToolbarArrow();}\n", "public String toString() {return //\"{\" + \"testResponseId:\" + //testResponseId + \",date:\" + //date + \",listBoolean:\" + //listBoolean + \",listData:\" + //listData + \",listDate:\" + //listDate + \",listString:\" + //listString + \",listNumber:\" + //listNumber + \",listPrice:\" + //listPrice + \",userInfo:\" + //userInfo + \"}\";}\n", "private void initialize() {;this.mainBorder.setLeft(alphabetBar);centerStackPane.getChildren().add(normal_mode_mediaTableViewer);normal_mode_mediaTableViewer.toBack();loadingProgressBar.setVisible(true);loadingVBox.setVisible(false);cancelButton.setVisible(true);cancelButton.setDisable(true);searchFieldStackPane.getChildren().add(0, searchService);normalSearchButton.visibleProperty().bind(alphabetBar.letterPressedProperty());normalSearchButton.setOnAction(a -> {alphabetBar.setLetterPressed(false);getSearchService().reSearch();});previous.disableProperty().bind(currentPage.isEqualTo(0));previous.setOnAction(a -> goPrevious());next.setDisable(true);next.setOnAction(a -> goNext());EventHandler<ActionEvent> handler = ac -> {if (!pageField.getText().isEmpty() && !loadService.isRunning() && !searchService.getService().isRunning() && totalInDataBase.get() != 0) {int listNumber = Integer.parseInt(pageField.getText());if (listNumber <= getMaximumList()) {currentPage.set(listNumber);loadService.startService(false, true, false);} else {pageField.setText(Integer.toString(listNumber));pageField.selectEnd();}}};goToPage.setOnAction(handler);pageField.textProperty().addListener((observable, oldValue, newValue) -> {if (!newValue.matches(\"\\\\d\"))pageField.setText(newValue.replaceAll(\"\\\\D\", \"\"));if (!pageField.getText().isEmpty()) {int maximumPage = getMaximumList();if (Integer.parseInt(pageField.getText()) > maximumPage)Platform.runLater(() -> {pageField.setText(Integer.toString(maximumPage));pageField.selectEnd();});}});pageField.setOnAction(handler);pageField.setOnScroll(// SCROLLscroll -> {int current = Integer.parseInt(pageField.getText());if (scroll.getDeltaY() > 0 && current < getMaximumList())++current;else if (scroll.getDeltaY() < 0 && current >= 1)--current;pageField.setText(String.valueOf(current));pageField.selectEnd();pageField.deselect();});pageField.hoverProperty().addListener(l -> {if (!pageField.isHover())focusOwner.requestFocus();else {focusOwner = Main.window.getScene().getFocusOwner();pageField.requestFocus();pageField.selectEnd();}});settings.setOnAction(a -> {Main.settingsWindow.getPlayListsSettingsController().getInnerTabPane().getSelectionModel().select(0);Main.settingsWindow.showWindow(SettingsTab.PLAYLISTS);});importFolder.setOnAction(a -> {File file = Main.specialChooser.selectFolder(Main.window);if (file != null)inputService.start(Arrays.asList(file));});importFiles.setOnAction(a -> {List<File> list = Main.specialChooser.prepareToImportSongFiles(Main.window);if (list != null && !list.isEmpty())inputService.start(list);});exportFiles.setOnAction(a -> Main.exportWindow.show(this));clearAll.setOnAction(ac -> {if (AlertTool.doQuestion(null, \"You want to remove all the Files from ->\" + this + \";This of course doesn't mean that they will be deleted from your computer\", null, Main.window))clearDataBaseTable();});toolsMenuButton.setOnMouseReleased(m -> {Bounds bounds = toolsMenuButton.localToScreen(toolsMenuButton.getBoundsInLocal());toolsContextMenu.show(toolsMenuButton, bounds.getMaxX(), bounds.getMinY());});if (genre == Genre.SEARCHWINDOW) {navigationHBox.setVisible(false);toolsMenuButton.setVisible(false);navigationHBox.setManaged(false);toolsMenuButton.setManaged(false);}if (genre == Genre.EMOTIONSMEDIA) {importFolder.setVisible(false);importFiles.setVisible(false);}foldersModeTab.setContent(foldersMode);filtersModeTab.setContent(filtersMode);normalModeTab.setOnSelectionChanged(l -> {if (normalModeTab.isSelected()) {System.out.println(\"Normal Mode selected\");filtersMode.getService().cancel();foldersMode.getService().cancel();filtersMode.getService().cancel();filtersModeSelected = false;}});foldersModeTab.setOnSelectionChanged(l -> {if (foldersModeTab.isSelected()) {System.out.println(\"Folders Mode selected\");filtersMode.getService().cancel();foldersMode.recreateTree();filtersMode.getService().cancel();filtersModeSelected = false;}});filtersModeTab.setOnSelectionChanged(l -> {if (filtersModeTab.isSelected()) {System.out.println(\"Filters Mode selected\");foldersMode.getService().cancel();filtersMode.regenerate();filtersModeSelected = true;} else {filtersModeSelected = false;}});reloadVBox.setVisible(false);reloadPlayListButton.setOnAction(a -> {if (isFree(true)) {loadService.startService(false, true, false);reloadVBox.setVisible(false);}});reloadPlayListButton.hoverProperty().addListener(l -> {if (isFree(true)) {loadService.startService(false, true, false);reloadVBox.setVisible(false);}});((StackPane) viewerBorderPane.getCenter()).getChildren().add(0, mediaViewer);viewerNext.setOnAction(a -> mediaViewer.next());viewerPrevious.setOnAction(a -> mediaViewer.previous());mediaViewerVBox.visibleProperty().bind(mediaViewerService.runningProperty());mediaViewerProgress.progressProperty().bind(mediaViewerService.progressProperty());mediaViewerLabel.textProperty().bind(mediaViewerService.messageProperty());}\n", "public int getFirstId(int listNumber) {Cursor cursor = null;int id = -1;try {switch(listNumber) {case Constant.ALLMUSIC:cursor = database.rawQuery(\"select min(id) from \" + DbOpenHelper.MUSIC_TABLE, null);break;default:break;}if (cursor.moveToFirst()) {id = cursor.getInt(0);}} catch (Exception e) {e.printStackTrace();} finally {if (cursor != null) {cursor.close();}}return id;}\n", "public int getFirstId(int listNumber) {Cursor cursor = null;int id = -1;try {switch(listNumber) {case Constant.LIST_ALLMUSIC:cursor = db.rawQuery(\"select min(id) from \" + DatabaseHelper.MUSIC_TABLE, null);break;default:Log.i(TAG, \"getFirstId: default\");break;}if (cursor.moveToFirst()) {id = cursor.getInt(0);Log.d(TAG, \"getFirstId min id = \" + id);}} catch (Exception e) {e.printStackTrace();} finally {if (cursor != null) {cursor.close();}}return id;}\n", "private void initToolbar() {mToolbar = this.findViewById(R.id.areToolbar);IARE_ToolItem bold = new ARE_ToolItem_Bold();IARE_ToolItem italic = new ARE_ToolItem_Italic();IARE_ToolItem underline = new ARE_ToolItem_Underline();IARE_ToolItem strikethrough = new ARE_ToolItem_Strikethrough();ARE_ToolItem_FontSize fontSize = new ARE_ToolItem_FontSize();IARE_ToolItem quote = new ARE_ToolItem_Quote();IARE_ToolItem listNumber = new ARE_ToolItem_ListNumber();IARE_ToolItem listBullet = new ARE_ToolItem_ListBullet();IARE_ToolItem hr = new ARE_ToolItem_Hr();IARE_ToolItem link = new ARE_ToolItem_Link();IARE_ToolItem subscript = new ARE_ToolItem_Subscript();IARE_ToolItem superscript = new ARE_ToolItem_Superscript();IARE_ToolItem left = new ARE_ToolItem_AlignmentLeft();IARE_ToolItem center = new ARE_ToolItem_AlignmentCenter();IARE_ToolItem right = new ARE_ToolItem_AlignmentRight();IARE_ToolItem image = new ARE_ToolItem_Image();IARE_ToolItem video = new ARE_ToolItem_Video();IARE_ToolItem at = new ARE_ToolItem_At();mToolbar.addToolbarItem(bold);mToolbar.addToolbarItem(italic);mToolbar.addToolbarItem(underline);mToolbar.addToolbarItem(strikethrough);mToolbar.addToolbarItem(fontSize);mToolbar.addToolbarItem(quote);mToolbar.addToolbarItem(listNumber);mToolbar.addToolbarItem(listBullet);mToolbar.addToolbarItem(hr);mToolbar.addToolbarItem(link);mToolbar.addToolbarItem(subscript);mToolbar.addToolbarItem(superscript);mToolbar.addToolbarItem(left);mToolbar.addToolbarItem(center);mToolbar.addToolbarItem(right);mToolbar.addToolbarItem(image);mToolbar.addToolbarItem(video);mToolbar.addToolbarItem(at);mEditText = this.findViewById(R.id.arEditText);mEditText.setToolbar(mToolbar);mEditText.setImageStrategy(imageStrategy);setHtml();initToolbarArrow();}\n"]}
{"name": "HumanEval_76_is_simple_power", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> isSimplePower((1l), (4l))\n    // (true)\n    // >>> isSimplePower((2l), (2l))\n    // (true)\n    // >>> isSimplePower((8l), (2l))\n    // (true)\n    // >>> isSimplePower((3l), (2l))\n    // (false)\n    // >>> isSimplePower((3l), (1l))\n    // (false)\n    // >>> isSimplePower((5l), (3l))\n    // (false)\n    public static boolean isSimplePower(long x, long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_76_is_simple_power.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_76_is_simple_power", "test": "    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n", "description": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x For example:", "codematcher_results": ["protected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.activity_example);Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);setSupportActionBar(toolbar);final FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);final TextView functionNumber = (TextView) findViewById(R.id.functions_number);final Spinner themeSpinner = (Spinner) findViewById(R.id.theme_spinner);ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.debugkit_themes, android.R.layout.simple_spinner_item);adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);themeSpinner.setAdapter(adapter);themeSpinner.setOnItemSelectedListener(this);mSeekbar = (SeekBar) findViewById(R.id.seekBar);mSeekbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {;public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {functionNumber.setText(Integer.toString(progress));};public void onStartTrackingTouch(SeekBar seekBar) {};public void onStopTrackingTouch(SeekBar seekBar) {}});functionNumber.setText(Integer.toString(mSeekbar.getProgress()));fab.setOnClickListener(new View.OnClickListener() {;public void onClick(View v) {final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);if (mSeekbar != null) {for (int i@ i = 0@ i < mSeekbar.getProgress()++){builder.addFunction(doSomeStuff());}}builder.setTextSize(mTextSize).setTheme(mTheme).build();}});final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);builder.addFunction(new DebugFunction(\"Do some stuff\") {;public String call() throws Exception {return \"This function has a title\";}}).addFunction(new DebugFunction.Clear(\"Clear\")).addFunction(new DebugFunction(\"Make ShPrf\") {;public String call() throws Exception {SharedPreferences.Editor editor = ExampleActivity.this.getSharedPreferences(PREFS_FILE_NAME, Context.MODE_PRIVATE).edit();editor.putString(\"UpdatedAt\", new Date(System.currentTimeMillis()).toString());editor.putBoolean(\"Key 1\", true);editor.putString(\"Key 2\", \"value\");editor.putString(\"Key 3\", \"value 2\");editor.apply();return \"Preferences file has been created.\";}}).addFunction(new DebugFunction.DumpSharedPreferences(\"Shared prefs\", PREFS_FILE_NAME));builder.setTextSize(mTextSize).displayAt(50, 200).setTheme(mTheme).build();}\n", "public String toString() {return \"FileMeasures [functionNumber=\" + functionNumber + \", contractNumber=\" + contractNumber + \", statementNumber=\" + statementNumber + \", contractComplexity=\" + contractComplexity + \", functionComplexity=\" + functionComplexity + \", fileComplexity=\" + fileComplexity + \", fileCognitiveComplexity=\" + fileCognitiveComplexity + \", linesOfCodeNumber=\" + linesOfCodeNumber + \", commentLinesNumber=\" + commentLinesNumber + \"]\";}\n", "public PlayerInputs(int functionNumber) {mInputs = new CopyOnWriteArrayList<Object>();mFunctionNumber = functionNumber;mFinishedNumber = new AtomicInteger();}\n", "public PlayerInputs(List<Object> list, int functionNumber) {if (list instanceof CopyOnWriteArrayList<?>) {mInputs = (CopyOnWriteArrayList<Object>) list;} else {mInputs = new CopyOnWriteArrayList<Object>(list);}mFunctionNumber = functionNumber;mFinishedNumber = new AtomicInteger();}\n", "public OrderStateMap(int stateId, String stateTitle, String stateDesc, String stateTime, String stateIcon, String functionNumber, String phoneNumType) {this.stateId = stateId;this.stateTitle = stateTitle;this.stateDesc = stateDesc;this.stateTime = stateTime;this.stateIcon = stateIcon;this.functionNumber = functionNumber;this.phoneNumType = phoneNumType;}\n", "private static void createFacetBase(ComponentFacet cf, int level, MtasDataCollector<?, ?> dataCollector, Map<Integer, Integer> positionsData, Map<MtasSpanQuery, Map<Integer, Integer>> spansNumberData, Map<String, SortedMap<String, int[]>> facetData, Integer[] docSet) throws IOException {for (MtasFunctionParserFunction function : cf.baseFunctionParserFunctions[level]) {if (function.needArgumentsNumber() > cf.spanQueries.length) {throw new IOException(\"function \" + function + \" expects (at least) \" + function.needArgumentsNumber() + \" queries\");}}Map<String, int[]> list = facetData.get(cf.baseFields[level]);if (dataCollector != null) {MtasDataCollector<?, ?> subDataCollector = null;dataCollector.initNewList(1);if (cf.baseFunctionList[level] != null) {SubComponentFunction[] tmpList;if (!cf.baseFunctionList[level].containsKey(dataCollector)) {tmpList = new SubComponentFunction[cf.baseFunctionParserFunctions[level].length];cf.baseFunctionList[level].put(dataCollector, tmpList);for (int i@ i = 0@ i < cf.baseFunctionParserFunctions[level].length++){try {tmpList[i] = new SubComponentFunction(DataCollector.COLLECTOR_TYPE_LIST, cf.baseFunctionKeys[level][i], cf.baseFunctionTypes[level][i], cf.baseFunctionParserFunctions[level][i], null, null, 0, Integer.MAX_VALUE, null, null);} catch (ParseException e) {throw new IOException(e.getMessage());}}} else {tmpList = cf.baseFunctionList[level].get(dataCollector);}for (SubComponentFunction function : tmpList) {function.dataCollector.initNewList(1);}}if (dataCollector.getCollectorType().equals(DataCollector.COLLECTOR_TYPE_LIST)) {dataCollector.setWithTotal();if (docSet.length > 0 && list.size() > 0) {HashMap<String, Integer[]> docLists = new HashMap<>();HashMap<String, String> groupedKeys = new HashMap<>();boolean documentsInFacets = false;for (Entry<String, int[]> entry : list.entrySet()) {if (!groupedKeys.containsKey(entry.getKey())) {groupedKeys.put(entry.getKey(), groupedKeyName(entry.getKey(), cf.baseRangeSizes[level], cf.baseRangeBases[level]));}Integer[] docList = intersectedDocList(entry.getValue(), docSet);if (docList != null && docList.length > 0) {documentsInFacets = true;}if (docLists.containsKey(groupedKeys.get(entry.getKey()))) {docLists.put(groupedKeys.get(entry.getKey()), mergeDocLists(docLists.get(groupedKeys.get(entry.getKey())), docList));} else {docLists.put(groupedKeys.get(entry.getKey()), docList);}}if (documentsInFacets) {Map<Integer, long[]> args = computeArguments(spansNumberData, cf.spanQueries, docSet);if (cf.baseDataTypes[level].equals(CodecUtil.DATA_TYPE_LONG)) {boolean applySumRule = false;if (cf.baseStatsTypes[level].equals(CodecUtil.STATS_BASIC) && cf.baseParsers[level].sumRule() && (cf.baseMinimumLongs[level] == null) && (cf.baseMaximumLongs[level] == null)) {applySumRule = true;if (cf.baseFunctionList[level].get(dataCollector) != null) {for (SubComponentFunction function : cf.baseFunctionList[level].get(dataCollector)) {if (!function.statsType.equals(CodecUtil.STATS_BASIC) || !function.parserFunction.sumRule() || function.parserFunction.needPositions()) {applySumRule = false;break;}}}}if (applySumRule) {for (String key : new LinkedHashSet<String>(groupedKeys.values())) {if (docLists.get(key).length > 0) {Integer[] subDocSet = docLists.get(key);int length = cf.baseParsers[level].needArgumentsNumber();long[] valueSum = new long[length];long valuePositions = 0;if (subDocSet.length > 0) {long[] tmpArgs;for (int docId : subDocSet){tmpArgs = args.get(docId);if (positionsData != null && positionsData.containsKey(docId) && positionsData.get(docId) != null) {valuePositions += positionsData.get(docId).longValue();}if (tmpArgs != null) {for (int i@ i = 0@ i < length++){valueSum[i] += tmpArgs[i];}}}long value;try {value = cf.baseParsers[level].getValueLong(valueSum, valuePositions);subDataCollector = dataCollector.add(key, value, subDocSet.length);} catch (IOException e) {log.debug(e);dataCollector.error(key, e.getMessage());subDataCollector = null;}if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {SubComponentFunction[] functionList = cf.baseFunctionList[level].get(dataCollector);for (SubComponentFunction function : functionList) {if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {try {long valueLong = function.parserFunction.getValueLong(valueSum, valuePositions);function.dataCollector.add(key, valueLong, subDocSet.length);} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {try {double valueDouble = function.parserFunction.getValueDouble(valueSum, valuePositions);function.dataCollector.add(key, valueDouble, subDocSet.length);} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}}}}if (subDataCollector != null) {createFacetBase(cf, (level + 1), subDataCollector, positionsData, spansNumberData, facetData, subDocSet);}}}}} else {for (String key : new LinkedHashSet<String>(groupedKeys.values())) {if (docLists.get(key).length > 0) {Integer[] subDocSet = docLists.get(key);if (subDocSet.length > 0 && cf.baseDataTypes[level].equals(CodecUtil.DATA_TYPE_LONG)) {long[][] functionValuesLong = null;double[][] functionValuesDouble = null;int[] functionNumber = null;SubComponentFunction[] functionList = null;if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {functionList = cf.baseFunctionList[level].get(dataCollector);functionValuesLong = new long[functionList.length][];functionValuesDouble = new double[functionList.length][];functionNumber = new int[functionList.length];for (int i@ i = 0@ i < functionList.length++){functionValuesLong[i] = new long[subDocSet.length];functionValuesDouble[i] = new double[subDocSet.length];}}int number = 0;Integer[] restrictedSubDocSet = new Integer[subDocSet.length];long[] values = new long[subDocSet.length];for (int docId : subDocSet){long[] tmpArgs = args.get(docId);int tmpPositions = (positionsData == null) ? 0 : (positionsData.get(docId) == null ? 0 : positionsData.get(docId));long value = cf.baseParsers[level].getValueLong(tmpArgs, tmpPositions);if ((cf.baseMinimumLongs[level] == null || value >= cf.baseMinimumLongs[level]) && (cf.baseMaximumLongs[level] == null || value <= cf.baseMaximumLongs[level])) {values[number] = value;restrictedSubDocSet[number] = docId;number++;if (functionList != null) {for (int i@ i = 0@ i < functionList.length++){SubComponentFunction function = functionList[i];if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {try {functionValuesLong[i][functionNumber[i]] = function.parserFunction.getValueLong(tmpArgs, tmpPositions);functionNumber[i]++;} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {try {functionValuesDouble[i][functionNumber[i]] = function.parserFunction.getValueDouble(tmpArgs, tmpPositions);functionNumber[i]++;} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}}}}}}if (number > 0) {subDataCollector = dataCollector.add(key, values, number);if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {for (int i@ i = 0@ i < functionList.length++){SubComponentFunction function = functionList[i];if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {function.dataCollector.add(key, functionValuesLong[i], functionNumber[i]);} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {function.dataCollector.add(key, functionValuesDouble[i], functionNumber[i]);}}}if (subDataCollector != null) {createFacetBase(cf, (level + 1), subDataCollector, positionsData, spansNumberData, facetData, Arrays.copyOfRange(restrictedSubDocSet, 0, number));}}}}}}} else {throw new IOException(\"unexpected dataType \" + cf.baseDataTypes[level]);}}}} else {throw new IOException(\"unexpected type \" + dataCollector.getCollectorType());}dataCollector.closeNewList();if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {SubComponentFunction[] tmpList = cf.baseFunctionList[level].get(dataCollector);for (SubComponentFunction function : tmpList) {function.dataCollector.closeNewList();}}}}\n", "public String getFunctionNumber() {return functionNumber;}\n", "public void setFunctionNumber(String functionNumber) {this.functionNumber = functionNumber;}\n", "public int getFunctionNumber() {return functionNumber;}\n", "public void setFunctionNumber(int functionNumber) {this.functionNumber = functionNumber;}\n"]}
{"name": "HumanEval_39_prime_fib", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    // >>> primeFib((1l))\n    // (2l)\n    // >>> primeFib((2l))\n    // (3l)\n    // >>> primeFib((3l))\n    // (5l)\n    // >>> primeFib((4l))\n    // (13l)\n    // >>> primeFib((5l))\n    // (89l)\n    public static long primeFib(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_39_prime_fib.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_39_prime_fib", "test": "    }\n    public static void main(String[] args) {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n", "description": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.", "codematcher_results": ["public String toString() {return \"ImageEntity{\" + \"col='\" + col + '\\'' + \", tag='\" + tag + '\\'' + \", tag3='\" + tag3 + '\\'' + \", sort='\" + sort + '\\'' + \", totalNum=\" + totalNum + \", startIndex=\" + startIndex + \", returnNumber=\" + returnNumber + \", imgs=\" + imgs + '}';}\n", "private void injectJS(WebView webView) {if (legacyMode) {injectJSOld(webView);return;}try {webView.loadUrl(\"javascript:\" + \"var linksLength = document.head.getElementsByTagName('link').length\" + \"for(var i=0i<linksLengthi++){document.head.getElementsByTagName('link')[0].remove()}\" + \"var isInGame = false\" + \"var isVerified = false\" + \"function isSmashing(returnNumber){if(isInGame){if(isVerified){return 'gv'+returnNumber}else{return 'g'+returnNumber}}return returnNumber}\" + \"function takeNextStep(gamePin,name,answer,returnVal,verify){if($('#inputSession').length==1){isVerified=falseisInGame=false$('#inputSession').val(gamePin)$('#inputSession').trigger('change')setTimeout(function(){$('#inputSession').submit()},10)}else if($('#username').length == 1){isInGame = true$('#username').val(name)$('#username').trigger('change')setTimeout(function(){$('#username').submit()},10)}else if($('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--0').length!=0){isVerified=falseif(verify==''){return 'v'+returnVal}else if($('.two-factor-auth__sub-heading.ng-binding').html() != 'Match the pattern on screen'){return 'i'+returnVal}else{for(var i=0i<4i++){$('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--' + verify[i]).mousedown()}}} else if($('.answer').length!=0){isVerified=true$('.answer.answer'+answer).mousedown()}else{isVerified=true}return 'n'+returnVal}\");} catch (Exception e) {e.printStackTrace();}}\n", "void capturePoint(Vector3D beamOrigin, Vector3D beamDir, double distance, double intensity, double echo_width, int returnNumber, int pulseReturnNumber, int fullwaveIndex, String hitObjectId, int classification) {if (distance < detector.cfg_device_rangeMin_m) {return;}double precision = this.detector.cfg_device_accuracy_m / 2;double error = -precision + Math.random() * (precision * 2);error += boxMullerRandom(0.0, this.detector.cfg_device_accuracy_m / 2);distance += error;Vector3D pointPos = beamOrigin.add(beamDir.scalarMultiply(distance));Measurement m = new Measurement();m.position = pointPos;m.distance = distance;m.intensity = intensity;m.echo_width = echo_width;m.returnNumber = returnNumber;m.pulseReturnNumber = pulseReturnNumber;m.fullwaveIndex = fullwaveIndex;m.beamOrigin = beamOrigin;m.beamDirection = beamDir;m.hitObjectId = hitObjectId;m.classification = classification;detector.writeMeasurement(m);detector.mBuffer.add(m);}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");}if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");}String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG)Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));if ((nanpState == NP_NANP_LOCAL) || (nanpState == NP_NANP_AREA_LOCAL) || (nanpState == NP_NANP_NDD_AREA_LOCAL)) {return networkPortionNumber;} else if (nanpState == NP_NANP_NBPCD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK) {return networkPortionNumber.substring(1);} else {return networkPortionNumber;}} else if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK) {return networkPortionNumber;} else if (networkType == GSM_UMTS_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return PLUS_SIGN + networkPortionNumber.substring(iddLength);} else if (networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return networkPortionNumber.substring(iddLength);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG)Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK) {returnNumber = networkPortionNumber.substring(1);}break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(1);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK || networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;returnNumber = NANP_IDD + networkPortionNumber.substring(iddLength);}break;case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!inExceptionListForNpCcAreaLocal(numberEntry) && networkPortionNumber.length() >= 11 && countryCode != NANP_CC) {returnNumber = NANP_IDD + networkPortionNumber;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK)) {if (networkPortionNumber.startsWith(PLUS_SIGN + NANP_IDD)) {returnNumber = networkPortionNumber.substring(1);} else {returnNumber = NANP_IDD + networkPortionNumber.substring(1);}}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");} else if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");} else {String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG) {Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));}if (nanpState == NP_NANP_LOCAL || nanpState == NP_NANP_AREA_LOCAL || nanpState == NP_NANP_NDD_AREA_LOCAL) {return networkPortionNumber;}if (nanpState != NP_NANP_NBPCD_CC_AREA_LOCAL) {if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == NP_NANP_LOCAL) {return networkPortionNumber;}if (networkType == 0) {return PLUS_SIGN + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);} else if (networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG) {Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));}String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == 0) {returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == 0 || networkType == NP_NANP_AREA_LOCAL) {returnNumber = NANP_IDD + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);break;}case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!(inExceptionListForNpCcAreaLocal(numberEntry) || networkPortionNumber.length() < NANP_LONG_LENGTH || countryCode == NP_NANP_LOCAL)) {returnNumber = NANP_IDD + networkPortionNumber;break;}default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL)) {if (!networkPortionNumber.startsWith(\"+011\")) {returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;}returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;} else if (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(NP_NANP_LOCAL);} else {return networkPortionNumber;}}}\n", "private static String getLineNumber(Finding finding) {String returnNumber = null;if (finding.getEntryPointLineNumber() != -1) {returnNumber = finding.getEntryPointLineNumber().toString();} else if (finding.getDataFlowElements() != null && !finding.getDataFlowElements().isEmpty()) {returnNumber = String.valueOf(finding.getDataFlowElements().get(0).getLineNumber());}return returnNumber;}\n", "void returnTheNumberItselfWhenTheNumberIsNotDividedAnyOfThreeAndFive() {assertEquals(\"7\", fizzBuzz.stringFor(7));}\n", "public static final List itemReturnQuery(String itemName, int categoryId, int selectedReceiverType, int receiverId, int returnedStatus, String transferNumber, String returnNumber, Date fromDate, Date toDate) throws Exception {Criteria c = getSession().createCriteria(ItemReturn.class);c.add(Restrictions.eq(\"dFlag\", 1));c.createAlias(\"transfer\", \"nik\");c.createAlias(\"transfer.item\", \"it\");if (!StringUtils.isEmpty(transferNumber)) {c.add(Restrictions.eq(\"nik.transferPanaNumber\", transferNumber));}if (!StringUtils.isEmpty(returnNumber)) {c.add(Restrictions.eq(\"returnNumber\", returnNumber));}if (selectedReceiverType > 0) {c.add(Restrictions.eq(\"nik.transferType\", selectedReceiverType));}if (returnedStatus >= 0) {c.add(Restrictions.eq(\"nik.status\", returnedStatus));}if (receiverId > 0) {if (selectedReceiverType == Transfer.PERSONNAL) {c.createAlias(\"transfer.person\", \"per\");c.add(Restrictions.eq(\"per.id\", receiverId));} else if (selectedReceiverType == Transfer.OFFICIAL) {c.createAlias(\"transfer.branchOffice\", \"bro\");c.add(Restrictions.eq(\"bro.id\", receiverId));}}if (!StringUtils.isEmpty(itemName)) {c.add(Restrictions.ilike(\"it.name\", \"%\" + itemName.toLowerCase() + \"%\", MatchMode.ANYWHERE));}c.createAlias(\"it.category\", \"cat\");c.add(Restrictions.eq(\"cat.categoryType\", Category.TYPE_RETURNABLE));if (categoryId > 0) {c.add(Restrictions.eq(\"cat.id\", categoryId));}if (!DateTimeUtils.isEmpty(fromDate)) {c.add(Restrictions.ge(\"addedDate\", fromDate));}if (!DateTimeUtils.isEmpty(toDate)) {c.add(Restrictions.le(\"addedDate\", toDate));}return c.list();}\n", "public void setReturnNumber(String returnNumber) {this.returnNumber = returnNumber;}\n", "public String getReturnnumber() {return returnnumber;}\n"]}
{"name": "HumanEval_145_order_by_points", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which sorts the given array list of integers\n    // in ascending order according to the sum of their digits.\n    // Note: if there are several items with similar sum of their digits,\n    // order them based on their index in original array list.\n    // For example:\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_145_order_by_points.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_145_order_by_points", "test": "    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\n}\n", "description": "Write a function which sorts the given array list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original array list. For example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_0_has_close_elements", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if in given array list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    // (false)\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    // (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_0_has_close_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.3f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.05f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.95f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.8f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.1f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (1.0f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (0.5f)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_0_has_close_elements", "test": "    }\n    public static void main(String[] args) {\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.3f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.05f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.95f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.8f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.1f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (1.0f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (0.5f)) == (false));\n    }\n\n}\n", "description": "Check if in given array list of numbers, are any two numbers closer to each other than given threshold.", "codematcher_results": ["public static void main(String[] args) {Scanner input = new Scanner(System.in);int[] listNumber = new int[3];for (int i@ i = 0@ i < 3@ i++) listNumber[@ i] = @ input.nextInt();Arrays.sort(listNumber);System.out.println(lstNumber[1]);\n", "public static void main(String[] args) throws IOException {String filename = \"to_do_list.txt\";ArrayList<String> todo = new ArrayList<String>();todo.add(\"Grading\");todo.add(\"Pay water bill\");todo.add(\"Grocery shopping\");BufferedWriter bufWriter = new BufferedWriter(new FileWriter(filename));int listNumber = 1;for (String item : todo) {bufWriter.write(\"To do item \" + listNumber + \" is: \" + item + \"\");listNumber++;}bufWriter.close();System.out.println(\"Created sample to-do list and wrote to \" + filename);BufferedReader bReader = new BufferedReader(new FileReader(filename));ArrayList<String> numberedToDoList = new ArrayList<String>();String line = bReader.readLine();while (line != null) {numberedToDoList.add(line);line = bReader.readLine();}System.out.println(\"Here is your to do list, read from the file\");System.out.println(numberedToDoList);}\n", "public void prepare(ResponseBuilder rb, ComponentFields mtasFields) throws IOException {Set<String> ids = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_DOCUMENT);if (!ids.isEmpty()) {int tmpCounter = 0;String[] fields = new String[ids.size()];String[] keys = new String[ids.size()];String[] prefixes = new String[ids.size()];String[] types = new String[ids.size()];String[] regexps = new String[ids.size()];String[] lists = new String[ids.size()];Boolean[] listRegexps = new Boolean[ids.size()];Boolean[] listExpands = new Boolean[ids.size()];int[] listExpandNumbers = new int[ids.size()];String[] ignoreRegexps = new String[ids.size()];String[] ignoreLists = new String[ids.size()];Boolean[] ignoreListRegexps = new Boolean[ids.size()];String[] listNumbers = new String[ids.size()];for (String id : ids) {fields[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_FIELD, null);keys[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_KEY, String.valueOf(tmpCounter)).trim();prefixes[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_PREFIX, null);types[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_TYPE, null);regexps[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_REGEXP, null);lists[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_LIST, null);listRegexps[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_LIST_REGEXP, false);listExpands[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_LIST_EXPAND, false);listExpandNumbers[tmpCounter] = rb.req.getParams().getInt(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_LIST_EXPAND_NUMBER, 10);ignoreRegexps[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_IGNORE_REGEXP, null);ignoreLists[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_IGNORE_LIST, null);ignoreListRegexps[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_IGNORE_LIST_REGEXP, false);listNumbers[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_DOCUMENT + \".\" + id + \".\" + NAME_MTAS_DOCUMENT_NUMBER, null);tmpCounter++;}String uniqueKeyField = rb.req.getSchema().getUniqueKeyField().getName();mtasFields.doDocument = true;rb.setNeedDocList(true);for (String field : fields) {if (field == null || field.isEmpty()) {throw new IOException(\"no (valid) field in mtas document\");} else if (!mtasFields.list.containsKey(field)) {mtasFields.list.put(field, new ComponentField(uniqueKeyField));}}MtasSolrResultUtil.compareAndCheck(keys, fields, NAME_MTAS_DOCUMENT_KEY, NAME_MTAS_DOCUMENT_FIELD, true);MtasSolrResultUtil.compareAndCheck(prefixes, fields, NAME_MTAS_DOCUMENT_PREFIX, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(types, fields, NAME_MTAS_DOCUMENT_TYPE, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(regexps, fields, NAME_MTAS_DOCUMENT_REGEXP, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(lists, fields, NAME_MTAS_DOCUMENT_LIST, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(ignoreRegexps, fields, NAME_MTAS_DOCUMENT_IGNORE_REGEXP, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(ignoreLists, fields, NAME_MTAS_DOCUMENT_IGNORE_LIST, NAME_MTAS_DOCUMENT_FIELD, false);MtasSolrResultUtil.compareAndCheck(listNumbers, fields, NAME_MTAS_DOCUMENT_NUMBER, NAME_MTAS_DOCUMENT_FIELD, false);for (int i@ i = 0@ i < fields.length++){String key = (keys[i] == null) || (keys[i].isEmpty()) ? String.valueOf(i) + \":\" + fields[i] + \":\" + prefixes[i] : keys[i].trim();String prefix = prefixes[i];if (prefix == null || prefix.isEmpty()) {throw new IOException(\"no (valid) prefix in mtas document\");}String type = types[i];String regexp = regexps[i];String[] list = null;Boolean listRegexp = listRegexps[i];Boolean listExpand = listExpands[i];int listExpandNumber = listExpandNumbers[i];if (lists[i] != null) {ArrayList<String> tmpList = new ArrayList<>();String[] subList = lists[i].split(\"(?<!\\\\\\\\),\");for (int j@ j = 0@ j < subList.length++){tmpList.add(subList[j].replace(\"\\\\,\", \",\").replace(\"\\\\\\\\\", \"\\\\\"));}list = tmpList.toArray(new String[tmpList.size()]);}int listNumber = Math.max(0, (listNumbers[i] == null) || (listNumbers[i].isEmpty()) ? 0 : Integer.parseInt(listNumbers[i]));String ignoreRegexp = ignoreRegexps[i];String[] ignoreList = null;Boolean ignoreListRegexp = ignoreListRegexps[i];if (ignoreLists[i] != null) {ArrayList<String> tmpList = new ArrayList<>();String[] subList = ignoreLists[i].split(\"(?<!\\\\\\\\),\");for (int j@ j = 0@ j < subList.length++){tmpList.add(subList[j].replace(\"\\\\,\", \",\").replace(\"\\\\\\\\\", \"\\\\\"));}ignoreList = tmpList.toArray(new String[tmpList.size()]);}mtasFields.list.get(fields[i]).documentList.add(new ComponentDocument(key, prefix, type, regexp, list, listNumber, listRegexp, listExpand, listExpandNumber, ignoreRegexp, ignoreList, ignoreListRegexp));}}}\n", "public void prepare(ResponseBuilder rb, ComponentFields mtasFields) throws IOException {Set<String> ids = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_TERMVECTOR);if (!ids.isEmpty()) {int tmpCounter = 0;String[] fields = new String[ids.size()];String[] keys = new String[ids.size()];String[] prefixes = new String[ids.size()];String[][] distanceKeys = new String[ids.size()][];String[][] distanceTypes = new String[ids.size()][];String[][] distanceBases = new String[ids.size()][];Map<String, String>[][] distanceParameters = new Map[ids.size()][];String[][] distanceMinimums = new String[ids.size()][];String[][] distanceMaximums = new String[ids.size()][];String[] regexps = new String[ids.size()];String[] fulls = new String[ids.size()];String[] sortTypes = new String[ids.size()];String[] sortDirections = new String[ids.size()];String[] types = new String[ids.size()];String[] startValues = new String[ids.size()];String[] numbers = new String[ids.size()];String[] numberShards = new String[ids.size()];String[][] functionExpressions = new String[ids.size()][];String[][] functionKeys = new String[ids.size()][];String[][] functionTypes = new String[ids.size()][];String[] boundaries = new String[ids.size()];String[] lists = new String[ids.size()];Boolean[] listRegexps = new Boolean[ids.size()];String[] ignoreRegexps = new String[ids.size()];String[] ignoreLists = new String[ids.size()];Boolean[] ignoreListRegexps = new Boolean[ids.size()];for (String id : ids) {fields[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FIELD, null);keys[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_KEY, String.valueOf(tmpCounter)).trim();prefixes[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_PREFIX, null);Set<String> distanceIds = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE);distanceKeys[tmpCounter] = new String[distanceIds.size()];distanceTypes[tmpCounter] = new String[distanceIds.size()];distanceBases[tmpCounter] = new String[distanceIds.size()];distanceParameters[tmpCounter] = new Map[distanceIds.size()];distanceMinimums[tmpCounter] = new String[distanceIds.size()];distanceMaximums[tmpCounter] = new String[distanceIds.size()];int tmpSubDistanceCounter = 0;for (String distanceId : distanceIds) {distanceKeys[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_KEY, String.valueOf(tmpSubDistanceCounter)).trim();distanceTypes[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_TYPE, null);distanceBases[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_BASE, null);distanceParameters[tmpCounter][tmpSubDistanceCounter] = new HashMap<>();Set<String> parameters = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_PARAMETER);for (String parameter : parameters) {distanceParameters[tmpCounter][tmpSubDistanceCounter].put(parameter, rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_PARAMETER + \".\" + parameter));}distanceMinimums[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_MINIMUM, null);distanceMaximums[tmpCounter][tmpSubDistanceCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE + \".\" + distanceId + \".\" + NAME_MTAS_TERMVECTOR_DISTANCE_MAXIMUM, null);tmpSubDistanceCounter++;}regexps[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_REGEXP, null);fulls[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FULL, null);sortTypes[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_SORT_TYPE, null);sortDirections[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_SORT_DIRECTION, null);startValues[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_START, null);numbers[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_NUMBER, null);numberShards[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_NUMBER_SHARDS, null);types[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_TYPE, null);Set<String> functionIds = MtasSolrResultUtil.getIdsFromParameters(rb.req.getParams(), PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION);functionExpressions[tmpCounter] = new String[functionIds.size()];functionKeys[tmpCounter] = new String[functionIds.size()];functionTypes[tmpCounter] = new String[functionIds.size()];int tmpSubFunctionCounter = 0;for (String functionId : functionIds) {functionKeys[tmpCounter][tmpSubFunctionCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION + \".\" + functionId + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION_KEY, String.valueOf(tmpSubFunctionCounter)).trim();functionExpressions[tmpCounter][tmpSubFunctionCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION + \".\" + functionId + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION_EXPRESSION, null);functionTypes[tmpCounter][tmpSubFunctionCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION + \".\" + functionId + \".\" + NAME_MTAS_TERMVECTOR_FUNCTION_TYPE, null);tmpSubFunctionCounter++;}boundaries[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_BOUNDARY, null);lists[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_LIST);listRegexps[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_LIST_REGEXP, false);ignoreRegexps[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_IGNORE_REGEXP, null);ignoreLists[tmpCounter] = rb.req.getParams().get(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_IGNORE_LIST, null);ignoreListRegexps[tmpCounter] = rb.req.getParams().getBool(PARAM_MTAS_TERMVECTOR + \".\" + id + \".\" + NAME_MTAS_TERMVECTOR_IGNORE_LIST_REGEXP, false);tmpCounter++;}String uniqueKeyField = rb.req.getSchema().getUniqueKeyField().getName();mtasFields.doTermVector = true;rb.setNeedDocSet(true);for (String field : fields) {if (field == null || field.isEmpty()) {throw new IOException(\"no (valid) field in mtas termvector\");} else if (!mtasFields.list.containsKey(field)) {mtasFields.list.put(field, new ComponentField(uniqueKeyField));}}MtasSolrResultUtil.compareAndCheck(keys, fields, NAME_MTAS_TERMVECTOR_KEY, NAME_MTAS_TERMVECTOR_FIELD, true);MtasSolrResultUtil.compareAndCheck(prefixes, fields, NAME_MTAS_TERMVECTOR_PREFIX, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(regexps, fields, NAME_MTAS_TERMVECTOR_REGEXP, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(types, fields, NAME_MTAS_TERMVECTOR_TYPE, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(sortTypes, fields, NAME_MTAS_TERMVECTOR_SORT_TYPE, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(sortDirections, fields, NAME_MTAS_TERMVECTOR_SORT_DIRECTION, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(numbers, fields, NAME_MTAS_TERMVECTOR_NUMBER, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(boundaries, fields, NAME_MTAS_TERMVECTOR_BOUNDARY, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(lists, fields, NAME_MTAS_TERMVECTOR_LIST, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(ignoreRegexps, fields, NAME_MTAS_TERMVECTOR_IGNORE_REGEXP, NAME_MTAS_TERMVECTOR_FIELD, false);MtasSolrResultUtil.compareAndCheck(ignoreLists, fields, NAME_MTAS_TERMVECTOR_IGNORE_LIST, NAME_MTAS_TERMVECTOR_FIELD, false);for (int i@ i = 0@ i < fields.length++){if (!rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {numberShards[i] = null;boundaries[i] = null;}String field = fields[i];String prefix = (prefixes[i] == null) || (prefixes[i].isEmpty()) ? null : prefixes[i].trim();String key = (keys[i] == null) || (keys[i].isEmpty()) ? String.valueOf(i) + \":\" + field + \":\" + prefix : keys[i].trim();String[] distanceKey = distanceKeys[i];String[] distanceType = distanceTypes[i];String[] distanceBase = distanceBases[i];Map<String, String>[] distanceParameter = distanceParameters[i];String[] distanceMinimum = distanceMinimums[i];String[] distanceMaximum = distanceMaximums[i];String regexp = (regexps[i] == null) || (regexps[i].isEmpty()) ? null : regexps[i].trim();Boolean full = (fulls[i] == null) || (!fulls[i].equals(\"true\")) ? false : true;String startValue = (startValues[i] == null) || (startValues[i].isEmpty()) ? null : startValues[i].trim();int listNumber = (numbers[i] == null) || (numbers[i].isEmpty()) ? DEFAULT_NUMBER : Integer.parseInt(numbers[i]);int numberFinal = (numberShards[i] == null) || (numberShards[i].isEmpty()) ? listNumber : Integer.parseInt(numberShards[i]);String type = (types[i] == null) || (types[i].isEmpty()) ? null : types[i].trim();String sortType = (sortTypes[i] == null) || (sortTypes[i].isEmpty()) ? null : sortTypes[i].trim();String sortDirection = (sortDirections[i] == null) || (sortDirections[i].isEmpty()) ? null : sortDirections[i].trim();String[] functionKey = functionKeys[i];String[] functionExpression = functionExpressions[i];String[] functionType = functionTypes[i];String boundary = boundaries[i];String[] list = null;Boolean listRegexp = listRegexps[i];if (lists[i] != null) {ArrayList<String> tmpList = new ArrayList<>();String[] subList = lists[i].split(\"(?<!\\\\\\\\),\");for (int j@ j = 0@ j < subList.length++){tmpList.add(subList[j].replace(\"\\\\,\", \",\").replace(\"\\\\\\\\\", \"\\\\\"));}list = tmpList.toArray(new String[tmpList.size()]);}String ignoreRegexp = ignoreRegexps[i];String[] ignoreList = null;Boolean ignoreListRegexp = ignoreListRegexps[i];if (ignoreLists[i] != null) {ArrayList<String> tmpList = new ArrayList<>();String[] subList = ignoreLists[i].split(\"(?<!\\\\\\\\),\");for (int j@ j = 0@ j < subList.length++){tmpList.add(subList[j].replace(\"\\\\,\", \",\").replace(\"\\\\\\\\\", \"\\\\\"));}ignoreList = tmpList.toArray(new String[tmpList.size()]);}if (prefix == null || prefix.isEmpty()) {throw new IOException(\"no (valid) prefix in mtas termvector\");} else {try {mtasFields.list.get(field).termVectorList.add(new ComponentTermVector(key, prefix, distanceKey, distanceType, distanceBase, distanceParameter, distanceMinimum, distanceMaximum, regexp, full, type, sortType, sortDirection, startValue, numberFinal, functionKey, functionExpression, functionType, boundary, list, listRegexp, ignoreRegexp, ignoreList, ignoreListRegexp));} catch (ParseException e) {throw new IOException(e);}}}}}\n", "private void option1() {mToolbar = this.findViewById(R.id.areToolbar);IARE_ToolItem bold = new ARE_ToolItem_Bold();IARE_ToolItem italic = new ARE_ToolItem_Italic();IARE_ToolItem underline = new ARE_ToolItem_Underline();IARE_ToolItem strikethrough = new ARE_ToolItem_Strikethrough();IARE_ToolItem quote = new ARE_ToolItem_Quote();IARE_ToolItem listNumber = new ARE_ToolItem_ListNumber();IARE_ToolItem listBullet = new ARE_ToolItem_ListBullet();IARE_ToolItem hr = new ARE_ToolItem_Hr();IARE_ToolItem link = new ARE_ToolItem_Link();IARE_ToolItem subscript = new ARE_ToolItem_Subscript();IARE_ToolItem superscript = new ARE_ToolItem_Superscript();IARE_ToolItem left = new ARE_ToolItem_AlignmentLeft();IARE_ToolItem center = new ARE_ToolItem_AlignmentCenter();IARE_ToolItem right = new ARE_ToolItem_AlignmentRight();IARE_ToolItem image = new ARE_ToolItem_Image();IARE_ToolItem video = new ARE_ToolItem_Video();IARE_ToolItem at = new ARE_ToolItem_At();mToolbar.addToolbarItem(bold);mToolbar.addToolbarItem(italic);mToolbar.addToolbarItem(underline);mToolbar.addToolbarItem(strikethrough);mToolbar.addToolbarItem(quote);mToolbar.addToolbarItem(listNumber);mToolbar.addToolbarItem(listBullet);mToolbar.addToolbarItem(hr);mToolbar.addToolbarItem(link);mToolbar.addToolbarItem(subscript);mToolbar.addToolbarItem(superscript);mToolbar.addToolbarItem(left);mToolbar.addToolbarItem(center);mToolbar.addToolbarItem(right);mToolbar.addToolbarItem(image);mToolbar.addToolbarItem(video);mToolbar.addToolbarItem(at);mEditText = this.findViewById(R.id.yView);mEditText.setToolbar(mToolbar);initToolbarArrow();}\n", "public String toString() {return //\"{\" + \"testResponseId:\" + //testResponseId + \",date:\" + //date + \",listBoolean:\" + //listBoolean + \",listData:\" + //listData + \",listDate:\" + //listDate + \",listString:\" + //listString + \",listNumber:\" + //listNumber + \",listPrice:\" + //listPrice + \",userInfo:\" + //userInfo + \"}\";}\n", "private void initialize() {;this.mainBorder.setLeft(alphabetBar);centerStackPane.getChildren().add(normal_mode_mediaTableViewer);normal_mode_mediaTableViewer.toBack();loadingProgressBar.setVisible(true);loadingVBox.setVisible(false);cancelButton.setVisible(true);cancelButton.setDisable(true);searchFieldStackPane.getChildren().add(0, searchService);normalSearchButton.visibleProperty().bind(alphabetBar.letterPressedProperty());normalSearchButton.setOnAction(a -> {alphabetBar.setLetterPressed(false);getSearchService().reSearch();});previous.disableProperty().bind(currentPage.isEqualTo(0));previous.setOnAction(a -> goPrevious());next.setDisable(true);next.setOnAction(a -> goNext());EventHandler<ActionEvent> handler = ac -> {if (!pageField.getText().isEmpty() && !loadService.isRunning() && !searchService.getService().isRunning() && totalInDataBase.get() != 0) {int listNumber = Integer.parseInt(pageField.getText());if (listNumber <= getMaximumList()) {currentPage.set(listNumber);loadService.startService(false, true, false);} else {pageField.setText(Integer.toString(listNumber));pageField.selectEnd();}}};goToPage.setOnAction(handler);pageField.textProperty().addListener((observable, oldValue, newValue) -> {if (!newValue.matches(\"\\\\d\"))pageField.setText(newValue.replaceAll(\"\\\\D\", \"\"));if (!pageField.getText().isEmpty()) {int maximumPage = getMaximumList();if (Integer.parseInt(pageField.getText()) > maximumPage)Platform.runLater(() -> {pageField.setText(Integer.toString(maximumPage));pageField.selectEnd();});}});pageField.setOnAction(handler);pageField.setOnScroll(// SCROLLscroll -> {int current = Integer.parseInt(pageField.getText());if (scroll.getDeltaY() > 0 && current < getMaximumList())++current;else if (scroll.getDeltaY() < 0 && current >= 1)--current;pageField.setText(String.valueOf(current));pageField.selectEnd();pageField.deselect();});pageField.hoverProperty().addListener(l -> {if (!pageField.isHover())focusOwner.requestFocus();else {focusOwner = Main.window.getScene().getFocusOwner();pageField.requestFocus();pageField.selectEnd();}});settings.setOnAction(a -> {Main.settingsWindow.getPlayListsSettingsController().getInnerTabPane().getSelectionModel().select(0);Main.settingsWindow.showWindow(SettingsTab.PLAYLISTS);});importFolder.setOnAction(a -> {File file = Main.specialChooser.selectFolder(Main.window);if (file != null)inputService.start(Arrays.asList(file));});importFiles.setOnAction(a -> {List<File> list = Main.specialChooser.prepareToImportSongFiles(Main.window);if (list != null && !list.isEmpty())inputService.start(list);});exportFiles.setOnAction(a -> Main.exportWindow.show(this));clearAll.setOnAction(ac -> {if (AlertTool.doQuestion(null, \"You want to remove all the Files from ->\" + this + \";This of course doesn't mean that they will be deleted from your computer\", null, Main.window))clearDataBaseTable();});toolsMenuButton.setOnMouseReleased(m -> {Bounds bounds = toolsMenuButton.localToScreen(toolsMenuButton.getBoundsInLocal());toolsContextMenu.show(toolsMenuButton, bounds.getMaxX(), bounds.getMinY());});if (genre == Genre.SEARCHWINDOW) {navigationHBox.setVisible(false);toolsMenuButton.setVisible(false);navigationHBox.setManaged(false);toolsMenuButton.setManaged(false);}if (genre == Genre.EMOTIONSMEDIA) {importFolder.setVisible(false);importFiles.setVisible(false);}foldersModeTab.setContent(foldersMode);filtersModeTab.setContent(filtersMode);normalModeTab.setOnSelectionChanged(l -> {if (normalModeTab.isSelected()) {System.out.println(\"Normal Mode selected\");filtersMode.getService().cancel();foldersMode.getService().cancel();filtersMode.getService().cancel();filtersModeSelected = false;}});foldersModeTab.setOnSelectionChanged(l -> {if (foldersModeTab.isSelected()) {System.out.println(\"Folders Mode selected\");filtersMode.getService().cancel();foldersMode.recreateTree();filtersMode.getService().cancel();filtersModeSelected = false;}});filtersModeTab.setOnSelectionChanged(l -> {if (filtersModeTab.isSelected()) {System.out.println(\"Filters Mode selected\");foldersMode.getService().cancel();filtersMode.regenerate();filtersModeSelected = true;} else {filtersModeSelected = false;}});reloadVBox.setVisible(false);reloadPlayListButton.setOnAction(a -> {if (isFree(true)) {loadService.startService(false, true, false);reloadVBox.setVisible(false);}});reloadPlayListButton.hoverProperty().addListener(l -> {if (isFree(true)) {loadService.startService(false, true, false);reloadVBox.setVisible(false);}});((StackPane) viewerBorderPane.getCenter()).getChildren().add(0, mediaViewer);viewerNext.setOnAction(a -> mediaViewer.next());viewerPrevious.setOnAction(a -> mediaViewer.previous());mediaViewerVBox.visibleProperty().bind(mediaViewerService.runningProperty());mediaViewerProgress.progressProperty().bind(mediaViewerService.progressProperty());mediaViewerLabel.textProperty().bind(mediaViewerService.messageProperty());}\n", "public int getFirstId(int listNumber) {Cursor cursor = null;int id = -1;try {switch(listNumber) {case Constant.ALLMUSIC:cursor = database.rawQuery(\"select min(id) from \" + DbOpenHelper.MUSIC_TABLE, null);break;default:break;}if (cursor.moveToFirst()) {id = cursor.getInt(0);}} catch (Exception e) {e.printStackTrace();} finally {if (cursor != null) {cursor.close();}}return id;}\n", "public int getFirstId(int listNumber) {Cursor cursor = null;int id = -1;try {switch(listNumber) {case Constant.LIST_ALLMUSIC:cursor = db.rawQuery(\"select min(id) from \" + DatabaseHelper.MUSIC_TABLE, null);break;default:Log.i(TAG, \"getFirstId: default\");break;}if (cursor.moveToFirst()) {id = cursor.getInt(0);Log.d(TAG, \"getFirstId min id = \" + id);}} catch (Exception e) {e.printStackTrace();} finally {if (cursor != null) {cursor.close();}}return id;}\n", "private void initToolbar() {mToolbar = this.findViewById(R.id.areToolbar);IARE_ToolItem bold = new ARE_ToolItem_Bold();IARE_ToolItem italic = new ARE_ToolItem_Italic();IARE_ToolItem underline = new ARE_ToolItem_Underline();IARE_ToolItem strikethrough = new ARE_ToolItem_Strikethrough();ARE_ToolItem_FontSize fontSize = new ARE_ToolItem_FontSize();IARE_ToolItem quote = new ARE_ToolItem_Quote();IARE_ToolItem listNumber = new ARE_ToolItem_ListNumber();IARE_ToolItem listBullet = new ARE_ToolItem_ListBullet();IARE_ToolItem hr = new ARE_ToolItem_Hr();IARE_ToolItem link = new ARE_ToolItem_Link();IARE_ToolItem subscript = new ARE_ToolItem_Subscript();IARE_ToolItem superscript = new ARE_ToolItem_Superscript();IARE_ToolItem left = new ARE_ToolItem_AlignmentLeft();IARE_ToolItem center = new ARE_ToolItem_AlignmentCenter();IARE_ToolItem right = new ARE_ToolItem_AlignmentRight();IARE_ToolItem image = new ARE_ToolItem_Image();IARE_ToolItem video = new ARE_ToolItem_Video();IARE_ToolItem at = new ARE_ToolItem_At();mToolbar.addToolbarItem(bold);mToolbar.addToolbarItem(italic);mToolbar.addToolbarItem(underline);mToolbar.addToolbarItem(strikethrough);mToolbar.addToolbarItem(fontSize);mToolbar.addToolbarItem(quote);mToolbar.addToolbarItem(listNumber);mToolbar.addToolbarItem(listBullet);mToolbar.addToolbarItem(hr);mToolbar.addToolbarItem(link);mToolbar.addToolbarItem(subscript);mToolbar.addToolbarItem(superscript);mToolbar.addToolbarItem(left);mToolbar.addToolbarItem(center);mToolbar.addToolbarItem(right);mToolbar.addToolbarItem(image);mToolbar.addToolbarItem(video);mToolbar.addToolbarItem(at);mEditText = this.findViewById(R.id.arEditText);mEditText.setToolbar(mToolbar);mEditText.setImageStrategy(imageStrategy);setHtml();initToolbarArrow();}\n"]}
{"name": "HumanEval_10_make_palindrome", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    public static String makePalindrome(String string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_10_make_palindrome.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_10_make_palindrome", "test": "    }\n    public static void main(String[] args) {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n", "description": "Find the shortest palindrome that begins with a supplied string. Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.", "codematcher_results": ["protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {;File fileBufferedImage waterimg=null} //StringString message = \"\";String sort = \"\";FileOutputStream out = null;try {System.out.println(\"\u5f00\u59cb\u63a5\u53d7\u56fe\u7247\");DiskFileItemFactory factory = new DiskFileItemFactory();ServletFileUpload upload = new ServletFileUpload(factory);upload.setHeaderEncoding(\"UTF-8\");if (!ServletFileUpload.isMultipartContent(request)) {System.out.println(\"\u89e3\u6790\u51fa\u9519\");return;}List<FileItem> list = upload.parseRequest(request);for (FileItem item : list) {if (item.isFormField()) {String name = item.getFieldName();String value = item.getString(\"UTF-8\");sort = value;System.out.println(name + \"=\" + value);} else {String filename = item.getName();System.out.println(filename);System.out.println(sort);if (filename == null || filename.trim().equals(\"\")) {continue;};InputStream in = item.getInputStream();out = new FileOutputStream(new File(\"d:\\\\hahahha.txt\"));byte[] b = new byte[1024];while (in.read(b) != -1) {String msg = new String(new String(b));System.out.println(msg);out.write(b);};}in.close();item.delete();message = \"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\";}}} catch (Exception e) {message = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\";e.printStackTrace();} finally {if (out != null) {out.close();}}}\n", "private Map<String, String> getMap(final List<StringString> sample) {HashMap<String, String> map = new HashMap<String, String>();for (int i@ i = 0@ i < sample.size()++){map.put(sample.get(i).key, sample.get(i).value);}return (Map) map;}\n", "public Circle(// sets k, u, v, w by StringString coeffString, // sets k, u, v, w by StringString radXString, // sets k, u, v, w by StringString radYString, // sets k, u, v, w by StringString radZString) {HomogenousPolynomial coeff = new HomogenousPolynomial(coeffString);HomogenousVector radCoeffs = new HomogenousVector(radXString, radYString, radZString);if (coeff.equalsZero())throw new IllegalArgumentException(\"coefficient must be nonzero\");if (coeff.degree() + 2 != radCoeffs.degree())throw new IllegalArgumentException(\"degree of radical coefficients must be two more than degree of coefficient\");this.coeff = coeff;this.radCoeffs = radCoeffs;}\n", "public ArrayList<StringString> getData(String dataName) {return getList(getDataMap(dataName));}\n", "private ArrayList<StringString> getList(final Map<String, String> sample) {ArrayList<StringString> StringString_sample = new ArrayList<StringString>();for (Map.Entry<String, String> x : sample.entrySet()) {StringString v = new StringString();v.key = x.getKey();v.value = x.getValue();StringString_sample.add(v);}return StringString_sample;}\n", "public static Transform<String, String> transform(List<String> transforms, Map<String, Transform<String, String>> stringToStringTransforms, Map<String, Transform<Object, String>> objectToStringTransforms, Map<String, Transform<String, Object>> stringToObjectTransforms, Map<String, Transform<Object, Object>> objectToObjectTransforms) throws ConfigurationException {int state = STRING_STATE;Transform<String, String> stringIdentity = (s) -> s;Transform<String, String> stringString = stringIdentity;Transform<String, Object> stringObject = null;for (String t : transforms) {String op = parseOperationNameFromTransform(t);Map<String, String> parameters = parseParametersFrom(t);switch(state) {case STRING_STATE:if (stringToStringTransforms.containsKey(op)) {Transform<String, String> transform = stringToStringTransforms.get(op);stringString = stringString.andThen(transform);} else if (stringToObjectTransforms.containsKey(op)) {Transform<String, Object> transform = stringToObjectTransforms.get(t);stringObject = stringString.andThen(transform);state = OBJECT_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from string state\");}break;case OBJECT_STATE:if (objectToObjectTransforms.containsKey(op)) {Transform<Object, Object> transform = objectToObjectTransforms.get(op);stringObject = transform.compose(stringObject);} else if (objectToStringTransforms.containsKey(op)) {Transform<Object, String> transform = objectToStringTransforms.get(op);stringString = stringObject.andThen(transform);state = STRING_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from obj state\");}break;}}return stringString;}\n", "' stringString readString(DataInputStream stream) throws IOException {String line = stream.readLine();if (line == null)return null;int len = Integer.parseInt(line);byte[] buffer = new byte[len];stream.readFully(buffer);return new String(buffer, StandardCharsets.ISO_8859_1);}\n", "HttpURLConnection conn = initHttp(url,if;String valueString = nullStringBuffer bufferRes =while ((valueString = read.readLine()) != null) {} in.close();} else { BufferedInputStream bis =String ds =String fullName =StringString suffix;att.setFileName(relName);} return att}public static String initParams(String url, Map<String, String> params) throws UnsupportedEncodingException {if (null == params || params.isEmpty()) {return url;}StringBuilder sb = new StringBuilder(url);if (url.indexOf(\"?\") == -1) {sb.append(\"?\");}sb.append(map2Url(params));return sb.toString();}\n", "public void testOptInt() {assertEquals(33, somenil.optint(33));throwsError(sometrue, \"optint\", int.class, new Integer(33));throwsError(somefalse, \"optint\", int.class, new Integer(33));assertEquals(0, zero.optint(33));assertEquals(sampleint, intint.optint(33));assertEquals((int) samplelong, longdouble.optint(33));assertEquals((int) sampledouble, doubledouble.optint(33));throwsError(somefunc, \"optint\", int.class, new Integer(33));throwsError(someclosure, \"optint\", int.class, new Integer(33));throwsError(stringstring, \"optint\", int.class, new Integer(33));assertEquals(sampleint, stringint.optint(33));assertEquals((int) samplelong, stringlong.optint(33));assertEquals((int) sampledouble, stringdouble.optint(33));throwsError(thread, \"optint\", int.class, new Integer(33));throwsError(table, \"optint\", int.class, new Integer(33));throwsError(userdataobj, \"optint\", int.class, new Integer(33));throwsError(userdatacls, \"optint\", int.class, new Integer(33));}\n", "String pomPath =SAXReaderDocument document = reader.read(pomPath);Element rootElement13 =map.remove(\"rootElement\")StringString dpversionSystem.out.println(dpname)}private void pushCommit(Git git, String title) throws Exception {try {AddCommand add = git.add();add.addFilepattern(\".\").call();CommitCommand commit = git.commit();commit.setCommitter(\"zhairuiping\", \"zhairuiping@scm.cfets.com\");commit.setAuthor(\"zhairuiping\", \"zhairuiping@scm.cfets.com\");commit.setAll(true);RevCommit revCommit = commit.setMessage(\" dev2 user jgit::\" + title).call();String commitId = revCommit.getId().name();logger.info(\"commitId:\" + commitId);PushCommand push = git.push();push.call();} catch (Exception e) {logger.error(\"\u4e0a\u4f20\u7248\u672c\u5931\u8d25\", e);}}\n"]}
{"name": "HumanEval_11_string_xor", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static String stringXor(String a, String b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_11_string_xor.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_11_string_xor", "test": "    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n", "description": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.", "codematcher_results": ["protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {;File fileBufferedImage waterimg=null} //StringString message = \"\";String sort = \"\";FileOutputStream out = null;try {System.out.println(\"\u5f00\u59cb\u63a5\u53d7\u56fe\u7247\");DiskFileItemFactory factory = new DiskFileItemFactory();ServletFileUpload upload = new ServletFileUpload(factory);upload.setHeaderEncoding(\"UTF-8\");if (!ServletFileUpload.isMultipartContent(request)) {System.out.println(\"\u89e3\u6790\u51fa\u9519\");return;}List<FileItem> list = upload.parseRequest(request);for (FileItem item : list) {if (item.isFormField()) {String name = item.getFieldName();String value = item.getString(\"UTF-8\");sort = value;System.out.println(name + \"=\" + value);} else {String filename = item.getName();System.out.println(filename);System.out.println(sort);if (filename == null || filename.trim().equals(\"\")) {continue;};InputStream in = item.getInputStream();out = new FileOutputStream(new File(\"d:\\\\hahahha.txt\"));byte[] b = new byte[1024];while (in.read(b) != -1) {String msg = new String(new String(b));System.out.println(msg);out.write(b);};}in.close();item.delete();message = \"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\";}}} catch (Exception e) {message = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\";e.printStackTrace();} finally {if (out != null) {out.close();}}}\n", "private Map<String, String> getMap(final List<StringString> sample) {HashMap<String, String> map = new HashMap<String, String>();for (int i@ i = 0@ i < sample.size()++){map.put(sample.get(i).key, sample.get(i).value);}return (Map) map;}\n", "public Circle(// sets k, u, v, w by StringString coeffString, // sets k, u, v, w by StringString radXString, // sets k, u, v, w by StringString radYString, // sets k, u, v, w by StringString radZString) {HomogenousPolynomial coeff = new HomogenousPolynomial(coeffString);HomogenousVector radCoeffs = new HomogenousVector(radXString, radYString, radZString);if (coeff.equalsZero())throw new IllegalArgumentException(\"coefficient must be nonzero\");if (coeff.degree() + 2 != radCoeffs.degree())throw new IllegalArgumentException(\"degree of radical coefficients must be two more than degree of coefficient\");this.coeff = coeff;this.radCoeffs = radCoeffs;}\n", "public ArrayList<StringString> getData(String dataName) {return getList(getDataMap(dataName));}\n", "private ArrayList<StringString> getList(final Map<String, String> sample) {ArrayList<StringString> StringString_sample = new ArrayList<StringString>();for (Map.Entry<String, String> x : sample.entrySet()) {StringString v = new StringString();v.key = x.getKey();v.value = x.getValue();StringString_sample.add(v);}return StringString_sample;}\n", "public static Transform<String, String> transform(List<String> transforms, Map<String, Transform<String, String>> stringToStringTransforms, Map<String, Transform<Object, String>> objectToStringTransforms, Map<String, Transform<String, Object>> stringToObjectTransforms, Map<String, Transform<Object, Object>> objectToObjectTransforms) throws ConfigurationException {int state = STRING_STATE;Transform<String, String> stringIdentity = (s) -> s;Transform<String, String> stringString = stringIdentity;Transform<String, Object> stringObject = null;for (String t : transforms) {String op = parseOperationNameFromTransform(t);Map<String, String> parameters = parseParametersFrom(t);switch(state) {case STRING_STATE:if (stringToStringTransforms.containsKey(op)) {Transform<String, String> transform = stringToStringTransforms.get(op);stringString = stringString.andThen(transform);} else if (stringToObjectTransforms.containsKey(op)) {Transform<String, Object> transform = stringToObjectTransforms.get(t);stringObject = stringString.andThen(transform);state = OBJECT_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from string state\");}break;case OBJECT_STATE:if (objectToObjectTransforms.containsKey(op)) {Transform<Object, Object> transform = objectToObjectTransforms.get(op);stringObject = transform.compose(stringObject);} else if (objectToStringTransforms.containsKey(op)) {Transform<Object, String> transform = objectToStringTransforms.get(op);stringString = stringObject.andThen(transform);state = STRING_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from obj state\");}break;}}return stringString;}\n", "' stringString readString(DataInputStream stream) throws IOException {String line = stream.readLine();if (line == null)return null;int len = Integer.parseInt(line);byte[] buffer = new byte[len];stream.readFully(buffer);return new String(buffer, StandardCharsets.ISO_8859_1);}\n", "HttpURLConnection conn = initHttp(url,if;String valueString = nullStringBuffer bufferRes =while ((valueString = read.readLine()) != null) {} in.close();} else { BufferedInputStream bis =String ds =String fullName =StringString suffix;att.setFileName(relName);} return att}public static String initParams(String url, Map<String, String> params) throws UnsupportedEncodingException {if (null == params || params.isEmpty()) {return url;}StringBuilder sb = new StringBuilder(url);if (url.indexOf(\"?\") == -1) {sb.append(\"?\");}sb.append(map2Url(params));return sb.toString();}\n", "public void testOptInt() {assertEquals(33, somenil.optint(33));throwsError(sometrue, \"optint\", int.class, new Integer(33));throwsError(somefalse, \"optint\", int.class, new Integer(33));assertEquals(0, zero.optint(33));assertEquals(sampleint, intint.optint(33));assertEquals((int) samplelong, longdouble.optint(33));assertEquals((int) sampledouble, doubledouble.optint(33));throwsError(somefunc, \"optint\", int.class, new Integer(33));throwsError(someclosure, \"optint\", int.class, new Integer(33));throwsError(stringstring, \"optint\", int.class, new Integer(33));assertEquals(sampleint, stringint.optint(33));assertEquals((int) samplelong, stringlong.optint(33));assertEquals((int) sampledouble, stringdouble.optint(33));throwsError(thread, \"optint\", int.class, new Integer(33));throwsError(table, \"optint\", int.class, new Integer(33));throwsError(userdataobj, \"optint\", int.class, new Integer(33));throwsError(userdatacls, \"optint\", int.class, new Integer(33));}\n", "String pomPath =SAXReaderDocument document = reader.read(pomPath);Element rootElement13 =map.remove(\"rootElement\")StringString dpversionSystem.out.println(dpname)}private void pushCommit(Git git, String title) throws Exception {try {AddCommand add = git.add();add.addFilepattern(\".\").call();CommitCommand commit = git.commit();commit.setCommitter(\"zhairuiping\", \"zhairuiping@scm.cfets.com\");commit.setAuthor(\"zhairuiping\", \"zhairuiping@scm.cfets.com\");commit.setAll(true);RevCommit revCommit = commit.setMessage(\" dev2 user jgit::\" + title).call();String commitId = revCommit.getId().name();logger.info(\"commitId:\" + commitId);PushCommand push = git.push();push.call();} catch (Exception e) {logger.error(\"\u4e0a\u4f20\u7248\u672c\u5931\u8d25\", e);}}\n"]}
{"name": "HumanEval_139_special_factorial", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    public static long specialFactorial(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_139_special_factorial.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_139_special_factorial", "test": "    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n", "description": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For example:", "codematcher_results": ["public static int log2(double x, RoundingMode mode) {checkArgument(x > 0.0 && isFinite(x), \"x must be positive and finite\");int exponent = getExponent(x);if (!isNormal(x)) {return log2(x * IMPLICIT_BIT, mode) - SIGNIFICAND_BITS;}boolean increment;switch(mode) {case UNNECESSARY:checkRoundingUnnecessary(isPowerOfTwo(x));case FLOOR:increment = false;break;case CEILING:increment = !isPowerOfTwo(x);break;case DOWN:increment = exponent < 0 & !isPowerOfTwo(x);break;case UP:increment = exponent >= 0 & !isPowerOfTwo(x);break;case HALF_DOWN:case HALF_EVEN:case HALF_UP:double xScaled = scaleNormalize(x);increment = (xScaled * xScaled) > 2.0;break;default:throw new AssertionError();}return increment ? exponent + 1 : exponent;}\n", "public void init() {AtomicReference<CursorState> cursorState = new AtomicReference<>();MouseMotionAdapter cursorChanger = new MouseMotionAdapter() {;public void mouseMoved(MouseEvent e) {int width = frame.getWidth();int height = frame.getHeight();boolean isNormal = true;WindowEnhance.disableDragable();if (e.getX() <= 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.W_RESIZE_CURSOR));frame.getContentPane().setCursor(new Cursor(Cursor.W_RESIZE_CURSOR));cursorState.set(CursorState.west);isNormal = false;}if (e.getX() >= width - 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.E_RESIZE_CURSOR));frame.getContentPane().setCursor(new Cursor(Cursor.E_RESIZE_CURSOR));cursorState.set(CursorState.east);isNormal = false;}if (e.getY() <= 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.N_RESIZE_CURSOR));cursorState.set(CursorState.north);isNormal = false;}if (e.getX() <= 3 && e.getY() <= 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.NW_RESIZE_CURSOR));cursorState.set(CursorState.nw);isNormal = false;}if (e.getX() >= width - 3 && e.getY() <= 3) {frame.getJMenuBar().setCursor(new Cursor(Cursor.NE_RESIZE_CURSOR));cursorState.set(CursorState.ne);isNormal = false;}if (e.getY() >= height - 3) {frame.setCursor(new Cursor(Cursor.S_RESIZE_CURSOR));cursorState.set(CursorState.south);isNormal = false;}if (e.getX() <= 3 && e.getY() >= height - 3) {frame.setCursor(new Cursor(Cursor.SW_RESIZE_CURSOR));cursorState.set(CursorState.sw);isNormal = false;}if (e.getX() >= width - 3 && e.getY() >= height - 3) {frame.setCursor(new Cursor(Cursor.SE_RESIZE_CURSOR));cursorState.set(CursorState.se);isNormal = false;}if (isNormal) {frame.getJMenuBar().setCursor(Cursor.getDefaultCursor());frame.getContentPane().setCursor(Cursor.getDefaultCursor());WindowEnhance.enableDragable();}};public void mouseDragged(MouseEvent e) {if (WindowUtils.isMaximize(frame)) {WindowStateManager.updateStateIcon(frame, false);}if (WindowEnhance.draging || cursorState.get() == null) {return;}switch(cursorState.get()) {case west:frame.setBounds(frame.getX() + (e.getX() - x), frame.getY(), frame.getWidth() - (e.getX() - x), frame.getHeight());break;case east:frame.setBounds(frame.getX(), frame.getY(), frame.getWidth() - (x - e.getX()), frame.getHeight());x = e.getX();break;case north:frame.setBounds(frame.getX(), frame.getY() + (e.getY() - y), frame.getWidth(), frame.getHeight() - (e.getY() - y));break;case nw:frame.setBounds(frame.getX() + (e.getX() - x), frame.getY() + (e.getY() - y), frame.getWidth() - (e.getX() - x), frame.getHeight() - (e.getY() - y));break;case ne:frame.setBounds(frame.getX(), frame.getY() + (e.getY() - y), frame.getWidth() - (x - e.getX()), frame.getHeight() - (e.getY() - y));x = e.getX();break;case south:frame.setBounds(frame.getX(), frame.getY(), frame.getWidth(), frame.getHeight() - (y - e.getY()));y = e.getY();break;case sw:frame.setBounds(frame.getX() + (e.getX() - x), frame.getY(), frame.getWidth() - (e.getX() - x), frame.getHeight() - (y - e.getY()));break;case se:frame.setBounds(frame.getX(), frame.getY(), frame.getWidth() - (x - e.getX()), frame.getHeight() - (y - e.getY()));x = e.getX();break;}WindowStateManager.saveWindowState(frame);}};MouseAdapter windowChanger = new MouseAdapter() {;public void mousePressed(MouseEvent e) {x = e.getX();y = e.getY();}};frame.getContentPane().addMouseListener(windowChanger);frame.getContentPane().addMouseMotionListener(cursorChanger);frame.getJMenuBar().addMouseListener(windowChanger);frame.getJMenuBar().addMouseMotionListener(cursorChanger);}\n", "public void bind(RichQuestionHolder holder) {final Context context = holder.itemView.getContext();glide.load(post.getAvatarUrl()).bitmapTransform(bitmapTransformation).placeholder(R.drawable.ic_player_72dp).into(holder.ivUserAvatar);holder.tvUsername.setText(post.getUsername());holder.tvTime.setTimeStamp(post.getCreated().getTime() / 1000);holder.tvBounty.setVisibility(post.getBounty() == 0 ? View.GONE : View.VISIBLE);holder.tvBounty.setText(String.valueOf(post.getBounty()));holder.tvContent.setText(isNormal() ? ReadMoreUtil.addReadMore(context, post.getContent(), 190) : post.getContent());final int w = isNormal() ? 80 : 320;final int h = isNormal() ? 80 : 180;if (isNormal()) {glide.load(post.getMedias().get(0).getThumbSizeUrl()).asBitmap().override(w, h).diskCacheStrategy(DiskCacheStrategy.ALL).centerCrop().into(new SimpleTarget<Bitmap>() {;public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) {RoundedBitmapDrawable rbd = RoundedBitmapDrawableFactory.create(context.getResources(), resource);rbd.setCornerRadius(6f);holder.ivContentImage.setImageDrawable(rbd);}});} else {glide.load(post.getMedias().get(0).getMediumSizeUrl()).override(w, h).into(holder.ivContentImage);}holder.tvComment.setText(CountUtil.formatCount(post.getCommentCount()));if (isNormal()) {ConstraintLayout cl = (ConstraintLayout) holder.itemView;holder.itemView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {;public boolean onPreDraw() {int layoutRes = isContentTextExceedsImage(holder) ? R.id.tv_item_feed_rich_content : R.id.iv_item_feed_rich_cover;set.clone(cl);set.connect(R.id.tv_item_feed_share, ConstraintSet.TOP, layoutRes, ConstraintSet.BOTTOM, 0);set.applyTo(cl);holder.itemView.getViewTreeObserver().removeOnPreDrawListener(this);return true;}});}holder.voteView.setVoteCount(post.getVoteCount());holder.voteView.setVoteDirection(post.getVoteDir());final int drawableIconRes = isSelf() ? R.drawable.ic_more_vert_black_24dp : R.drawable.ic_bookmark_black_24dp;holder.ibOptions.setImageDrawable(AppCompatResources.getDrawable(context, drawableIconRes));if (!isSelf()) {final int colorRes = post.isBookmarked() ? R.color.primary : android.R.color.secondary_text_dark;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, colorRes), PorterDuff.Mode.SRC_IN);}if (holder.tagContainer != null) {Stream.of(post.getTagNames()).forEach(tagName -> {final TextView tag = new TextView(YolooApp.getAppContext());tag.setText(context.getString(R.string.label_tag, tagName));tag.setGravity(Gravity.CENTER);tag.setPadding(16, 10, 16, 10);TextViewUtil.setTextAppearance(tag, context, R.style.TextAppearance_AppCompat);holder.tagContainer.addView(tag);});}tintDrawables(holder, context);holder.ivUserAvatar.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));holder.tvUsername.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));if (onItemClickListener != null && post.shouldShowReadMore()) {holder.itemView.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));holder.tvContent.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));}holder.tvShare.setOnClickListener(v -> onShareClickListener.onShareClick(v, post));holder.tvComment.setOnClickListener(v -> onCommentClickListener.onCommentClick(v, post));holder.ibOptions.setOnClickListener(v -> {if (isSelf()) {onPostOptionsClickListener.onPostOptionsClick(v, this, post);} else {final int reversedColorRes = post.isBookmarked() ? android.R.color.secondary_text_dark : R.color.primary;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, reversedColorRes), PorterDuff.Mode.SRC_IN);post.setBookmarked(!post.isBookmarked());onBookmarkClickListener.onBookmarkClick(post.getId(), post.isBookmarked());}});holder.voteView.setOnVoteEventListener(direction -> {post.setVoteDir(direction);onVoteClickListener.onVoteClick(post.getId(), direction, OnVoteClickListener.Type.POST);});holder.ivContentImage.setOnClickListener(v -> {if (VersionUtil.hasL()) {holder.ivContentImage.setTransitionName(\"transition.\" + post.getMedias().get(0).getId());}onContentImageClickListener.onContentImageClick(v, post.getMedias().get(0));});}\n", "public void bind(QuestionHolder holder) {final Context context = holder.itemView.getContext();glide.load(post.getAvatarUrl().replace(\"s96-c\", \"s64-c-rw\")).bitmapTransform(bitmapTransformation).placeholder(R.drawable.ic_player_72dp).into(holder.ivUserAvatar);holder.tvUsername.setText(post.getUsername());holder.tvTime.setTimeStamp(post.getCreated().getTime() / 1000);holder.tvBounty.setVisibility(post.getBounty() == 0 ? View.GONE : View.VISIBLE);holder.tvBounty.setText(String.valueOf(post.getBounty()));holder.tvContent.setText(isNormal() ? ReadMoreUtil.addReadMore(context, post.getContent(), 200) : post.getContent());holder.tvComment.setText(CountUtil.formatCount(post.getCommentCount()));holder.voteView.setVoteCount(post.getVoteCount());holder.voteView.setVoteDirection(post.getVoteDir());final int drawableIconRes = isSelf() ? R.drawable.ic_more_vert_black_24dp : R.drawable.ic_bookmark_black_24dp;holder.ibOptions.setImageDrawable(AppCompatResources.getDrawable(context, drawableIconRes));if (!isSelf()) {final int colorRes = post.isBookmarked() ? R.color.primary : android.R.color.secondary_text_dark;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, colorRes), PorterDuff.Mode.SRC_IN);}if (holder.tagContainer != null) {Stream.of(post.getTagNames()).forEach(tagName -> {final TextView tag = new TextView(YolooApp.getAppContext());tag.setText(context.getString(R.string.label_tag, tagName));tag.setGravity(Gravity.CENTER);tag.setPadding(16, 10, 16, 10);TextViewUtil.setTextAppearance(tag, context, R.style.TextAppearance_AppCompat);holder.tagContainer.addView(tag);});}tintDrawables(holder, context);if (VersionUtil.hasL()) {holder.ivUserAvatar.setTransitionName(context.getResources().getString(R.string.transition_avatar));holder.tvUsername.setTransitionName(context.getResources().getString(R.string.transition_username, post.getOwnerId()));}holder.ivUserAvatar.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));holder.tvUsername.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));if (onItemClickListener != null && post.shouldShowReadMore()) {holder.itemView.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));holder.tvContent.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));}holder.tvShare.setOnClickListener(v -> onShareClickListener.onShareClick(v, post));holder.tvComment.setOnClickListener(v -> onCommentClickListener.onCommentClick(v, post));holder.ibOptions.setOnClickListener(v -> {if (isSelf()) {onPostOptionsClickListener.onPostOptionsClick(v, this, post);} else {final int reversedColorRes = post.isBookmarked() ? android.R.color.secondary_text_dark : R.color.primary;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, reversedColorRes), PorterDuff.Mode.SRC_IN);post.setBookmarked(!post.isBookmarked());onBookmarkClickListener.onBookmarkClick(post.getId(), post.isBookmarked());}});holder.voteView.setOnVoteEventListener(direction -> {post.setVoteDir(direction);onVoteClickListener.onVoteClick(post.getId(), direction, OnVoteClickListener.Type.POST);});}\n", "public static void main(String[] args) throws IOException {int n = readInt();for (int x@ x = 0@ x < n++){String next = readLine();String[] s = next.split(\" \");boolean isRare = false, isSet = false, isMagic = false, isNormal = false;if (s.length == 2) {isRare = true;if (!s[0].equalsIgnoreCase(\"of\"))isMagic = true;}if (s.length >= 3 && s.length <= 4 && next.length() >= 2 && s[s.length - 2].equalsIgnoreCase(\"of\")) {isMagic = true;}if (s.length > 0) {String first = s[0];if (first.length() >= 2 && first.substring(first.length() - 2).equalsIgnoreCase(\"'s\"))isSet = true;if (first.equalsIgnoreCase(\"damaged\"))isNormal = true;}if ((!isRare && !isSet && !isMagic))isNormal = true;if (isSet) {System.out.println(\"Set\");} else if (isNormal) {System.out.println(\"Normal\");} else if (isRare && isMagic) {System.out.println(\"Not sure, take anyways\");} else if (isRare) {System.out.println(\"Rare\");} else if (isMagic) {System.out.println(\"Magic\");}}}\n", "public void bind(BlogHolder holder) {final Context context = holder.itemView.getContext();glide.load(post.getAvatarUrl()).bitmapTransform(bitmapTransformation).placeholder(R.drawable.ic_player_72dp).into(holder.ivUserAvatar);holder.tvUsername.setText(post.getUsername());holder.tvTime.setTimeStamp(post.getCreated().getTime() / 1000);holder.tvBounty.setVisibility(View.GONE);holder.tvTitle.setText(post.getTitle());holder.tvContent.setText(isNormal() ? ReadMoreUtil.addReadMore(context, post.getContent(), 135) : post.getContent());glide.load(post.getMedias().get(0).getMediumSizeUrl()).into(holder.ivBlogCover);holder.tvComment.setText(CountUtil.formatCount(post.getCommentCount()));holder.voteView.setVoteCount(post.getVoteCount());holder.voteView.setVoteDirection(post.getVoteDir());final int drawableIconRes = isSelf() ? R.drawable.ic_more_vert_black_24dp : R.drawable.ic_bookmark_black_24dp;holder.ibOptions.setImageDrawable(AppCompatResources.getDrawable(context, drawableIconRes));if (!isSelf()) {final int colorRes = post.isBookmarked() ? R.color.primary : android.R.color.secondary_text_dark;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, colorRes), PorterDuff.Mode.SRC_IN);}if (holder.tagContainer != null) {Stream.of(post.getTagNames()).forEach(tagName -> {final TextView tag = new TextView(YolooApp.getAppContext());tag.setText(context.getString(R.string.label_tag, tagName));tag.setGravity(Gravity.CENTER);tag.setPadding(16, 10, 16, 10);TextViewUtil.setTextAppearance(tag, context, R.style.TextAppearance_AppCompat);holder.tagContainer.addView(tag);});}tintDrawables(holder, context);holder.ivUserAvatar.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));holder.tvUsername.setOnClickListener(v -> onProfileClickListener.onProfileClick(v, post.getOwnerId()));if (onItemClickListener != null && post.shouldShowReadMore()) {holder.itemView.setOnClickListener(v -> onItemClickListener.onItemClick(v, this, post));}holder.tvShare.setOnClickListener(v -> onShareClickListener.onShareClick(v, post));holder.tvComment.setOnClickListener(v -> onCommentClickListener.onCommentClick(v, post));holder.ibOptions.setOnClickListener(v -> {if (isSelf()) {onPostOptionsClickListener.onPostOptionsClick(v, this, post);} else {final int reversedColorRes = post.isBookmarked() ? android.R.color.secondary_text_dark : R.color.primary;holder.ibOptions.setColorFilter(ContextCompat.getColor(context, reversedColorRes), PorterDuff.Mode.SRC_IN);post.setBookmarked(!post.isBookmarked());onBookmarkClickListener.onBookmarkClick(post.getId(), post.isBookmarked());}});holder.voteView.setOnVoteEventListener(direction -> {post.setVoteDir(direction);onVoteClickListener.onVoteClick(post.getId(), direction, OnVoteClickListener.Type.POST);});}\n", "public Throwable apply(final Throwable chain) {int limit = 0;Throwable root = chain;Throwable high = null;Throwable normal = null;for (Throwable cause = chaincause != nullcause = cause.getCause()) {root = cause;if (isNormal(cause)) {normal = cause;}if (normal == null && cause instanceof Error) {high = cause;}if (++limit == (1 << 16)) {break;}}return high != null ? high : normal != null ? normal : root;}\n", "public void reset() {final int position = sb.getProgress();if (position != 0) {ValueAnimator animator = ValueAnimator.ofFloat(1f, 0);animator.setDuration(animeTime).start();animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {;public void onAnimationUpdate(ValueAnimator animation) {float f = (Float) animation.getAnimatedValue();sb.setProgress((int) (position * f));}});}tipsShowAnime(false);tips2ShowAnime(true);sb.setEnabled(true);ivBlock.setVisibility(GONE);vFlash.setVisibility(GONE);ivCover.setImageBitmap(completeCover);isNormal = true;}\n", "public boolean isBoth(String id) {return isRelational(id) && isNormal(id);}\n", "public boolean normal() {return isNormal;}\n"]}
{"name": "HumanEval_122_add_elements", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty array array list of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    public static long addElements(ArrayList<Long> arr, long k) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_122_add_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))), (1l)) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_122_add_elements", "test": "    }\n    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))), (1l)) == (1l));\n    }\n\n}\n", "description": "Given a non-empty array array list of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. Example:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_46_fib4", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_46_fib4.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_46_fib4", "test": "    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n", "description": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static String doHttpAction(String data, boolean json, boolean post, String url) {HttpURLConnection connection = null;DataOutputStream os = null;InputStream is = null;try {URL sUrl = new URL(url);connection = (HttpURLConnection) sUrl.openConnection();connection.setConnectTimeout(CONNECT_TIMEOUT_TIME);connection.setReadTimeout(READ_TIMEOUT_TIME);if (post) {connection.setRequestMethod(\"POST\");} else {connection.setRequestMethod(\"GET\");}connection.setDoInput(true);connection.setDoOutput(true);connection.setUseCaches(false);connection.setInstanceFollowRedirects(true);if (json) {connection.setRequestProperty(\"Content-Type\", \"application/json\");} else {connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");connection.setRequestProperty(\"Content-Length\", data.length() + \"\");}connection.connect();os = new DataOutputStream(connection.getOutputStream());os.write(data.getBytes(), 0, data.getBytes().length);os.flush();os.close();is = connection.getInputStream();Scanner scan = new Scanner(is);scan.useDelimiter(\"\\\\A\");if (scan.hasNext())return scan.next();} catch (Exception e) {e.printStackTrace();} finally {if (connection != null)connection.disconnect();if (os != null) {try {os.close();} catch (IOException e) {e.printStackTrace();}}if (is != null) {try {is.close();} catch (IOException e) {e.printStackTrace();}}}return null;}\n", "private static boolean startActivity(final Intent intent, final Context context, final Bundle options) {if (!isIntentAvailable(intent)) {Log.e(\"ActivityUtils\", \"intent is unavailable\");return false;}if (!(context instanceof Activity)) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);}if (options != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {context.startActivity(intent, options);} else {context.startActivity(intent);}return true;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private static Activity getActivityByView(@NonNull final View view) {Context context = view.getContext();while (context instanceof ContextWrapper) {if (context instanceof Activity) {return (Activity) context;}context = ((ContextWrapper) context).getBaseContext();}Log.e(\"BarUtils\", \"the view's Context is not an Activity.\");return null;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean startActivityForResult(final Intent intent, final Activity activity, final int requestCode, final Bundle options) {if (!isIntentAvailable(intent)) {Log.e(\"ActivityUtils\", \"intent is unavailable\");return false;}if (options != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {activity.startActivityForResult(intent, requestCode, options);} else {activity.startActivityForResult(intent, requestCode);}return true;}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_104_unique_digits", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of positive integers x. return a sorted array list of all \n    // elements that hasn't any even digit.\n    // Note: Returned array list should be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))\n    // >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l))))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_104_unique_digits.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)12345l, (long)2033l, (long)111l, (long)151l)))).equals((new ArrayList<Long>(Arrays.asList((long)111l, (long)151l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)135l, (long)103l, (long)31l)))).equals((new ArrayList<Long>(Arrays.asList((long)31l, (long)135l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_104_unique_digits", "test": "    }\n    public static void main(String[] args) {\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)12345l, (long)2033l, (long)111l, (long)151l)))).equals((new ArrayList<Long>(Arrays.asList((long)111l, (long)151l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)135l, (long)103l, (long)31l)))).equals((new ArrayList<Long>(Arrays.asList((long)31l, (long)135l)))));\n    }\n\n}\n", "description": "Given an array array list of positive integers x. return a sorted array list of all elements that hasn't any even digit. Note: Returned array list should be sorted in increasing order. For example:", "codematcher_results": ["public List<List<List<String>>> listListListString(@RequestBody List<List<List<String>>> value) {return value;}\n", "public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n"]}
{"name": "HumanEval_117_select_words", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_117_select_words.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_117_select_words", "test": "    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n", "description": "Given a string s and a natural number n, you have been tasked to implement a function that returns an array array list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty array list. Note: you may assume the input string contains only letters and spaces. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_72_will_it_fly", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic array list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_72_will_it_fly.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))), (5l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_72_will_it_fly", "test": "    }\n    public static void main(String[] args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))), (5l)) == (true));\n    }\n\n}\n", "description": "Write a function that returns true if the object q will fly, and false otherwise. The object q will fly if it's balanced (it is a palindromic array list) and the sum of its elements is less than or equal the maximum possible weight w. Example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_55_fib", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    public static long fib(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_55_fib.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_55_fib", "test": "    }\n    public static void main(String[] args) {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n", "description": "Return n-th Fibonacci number.", "codematcher_results": ["public String toString() {return \"ImageEntity{\" + \"col='\" + col + '\\'' + \", tag='\" + tag + '\\'' + \", tag3='\" + tag3 + '\\'' + \", sort='\" + sort + '\\'' + \", totalNum=\" + totalNum + \", startIndex=\" + startIndex + \", returnNumber=\" + returnNumber + \", imgs=\" + imgs + '}';}\n", "private void injectJS(WebView webView) {if (legacyMode) {injectJSOld(webView);return;}try {webView.loadUrl(\"javascript:\" + \"var linksLength = document.head.getElementsByTagName('link').length\" + \"for(var i=0i<linksLengthi++){document.head.getElementsByTagName('link')[0].remove()}\" + \"var isInGame = false\" + \"var isVerified = false\" + \"function isSmashing(returnNumber){if(isInGame){if(isVerified){return 'gv'+returnNumber}else{return 'g'+returnNumber}}return returnNumber}\" + \"function takeNextStep(gamePin,name,answer,returnVal,verify){if($('#inputSession').length==1){isVerified=falseisInGame=false$('#inputSession').val(gamePin)$('#inputSession').trigger('change')setTimeout(function(){$('#inputSession').submit()},10)}else if($('#username').length == 1){isInGame = true$('#username').val(name)$('#username').trigger('change')setTimeout(function(){$('#username').submit()},10)}else if($('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--0').length!=0){isVerified=falseif(verify==''){return 'v'+returnVal}else if($('.two-factor-auth__sub-heading.ng-binding').html() != 'Match the pattern on screen'){return 'i'+returnVal}else{for(var i=0i<4i++){$('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--' + verify[i]).mousedown()}}} else if($('.answer').length!=0){isVerified=true$('.answer.answer'+answer).mousedown()}else{isVerified=true}return 'n'+returnVal}\");} catch (Exception e) {e.printStackTrace();}}\n", "void capturePoint(Vector3D beamOrigin, Vector3D beamDir, double distance, double intensity, double echo_width, int returnNumber, int pulseReturnNumber, int fullwaveIndex, String hitObjectId, int classification) {if (distance < detector.cfg_device_rangeMin_m) {return;}double precision = this.detector.cfg_device_accuracy_m / 2;double error = -precision + Math.random() * (precision * 2);error += boxMullerRandom(0.0, this.detector.cfg_device_accuracy_m / 2);distance += error;Vector3D pointPos = beamOrigin.add(beamDir.scalarMultiply(distance));Measurement m = new Measurement();m.position = pointPos;m.distance = distance;m.intensity = intensity;m.echo_width = echo_width;m.returnNumber = returnNumber;m.pulseReturnNumber = pulseReturnNumber;m.fullwaveIndex = fullwaveIndex;m.beamOrigin = beamOrigin;m.beamDirection = beamDir;m.hitObjectId = hitObjectId;m.classification = classification;detector.writeMeasurement(m);detector.mBuffer.add(m);}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");}if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");}String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG)Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));if ((nanpState == NP_NANP_LOCAL) || (nanpState == NP_NANP_AREA_LOCAL) || (nanpState == NP_NANP_NDD_AREA_LOCAL)) {return networkPortionNumber;} else if (nanpState == NP_NANP_NBPCD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK) {return networkPortionNumber.substring(1);} else {return networkPortionNumber;}} else if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK) {return networkPortionNumber;} else if (networkType == GSM_UMTS_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return PLUS_SIGN + networkPortionNumber.substring(iddLength);} else if (networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return networkPortionNumber.substring(iddLength);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG)Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK) {returnNumber = networkPortionNumber.substring(1);}break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(1);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK || networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;returnNumber = NANP_IDD + networkPortionNumber.substring(iddLength);}break;case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!inExceptionListForNpCcAreaLocal(numberEntry) && networkPortionNumber.length() >= 11 && countryCode != NANP_CC) {returnNumber = NANP_IDD + networkPortionNumber;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK)) {if (networkPortionNumber.startsWith(PLUS_SIGN + NANP_IDD)) {returnNumber = networkPortionNumber.substring(1);} else {returnNumber = NANP_IDD + networkPortionNumber.substring(1);}}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");} else if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");} else {String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG) {Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));}if (nanpState == NP_NANP_LOCAL || nanpState == NP_NANP_AREA_LOCAL || nanpState == NP_NANP_NDD_AREA_LOCAL) {return networkPortionNumber;}if (nanpState != NP_NANP_NBPCD_CC_AREA_LOCAL) {if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == NP_NANP_LOCAL) {return networkPortionNumber;}if (networkType == 0) {return PLUS_SIGN + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);} else if (networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG) {Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));}String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == 0) {returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == 0 || networkType == NP_NANP_AREA_LOCAL) {returnNumber = NANP_IDD + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);break;}case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!(inExceptionListForNpCcAreaLocal(numberEntry) || networkPortionNumber.length() < NANP_LONG_LENGTH || countryCode == NP_NANP_LOCAL)) {returnNumber = NANP_IDD + networkPortionNumber;break;}default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL)) {if (!networkPortionNumber.startsWith(\"+011\")) {returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;}returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;} else if (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(NP_NANP_LOCAL);} else {return networkPortionNumber;}}}\n", "private static String getLineNumber(Finding finding) {String returnNumber = null;if (finding.getEntryPointLineNumber() != -1) {returnNumber = finding.getEntryPointLineNumber().toString();} else if (finding.getDataFlowElements() != null && !finding.getDataFlowElements().isEmpty()) {returnNumber = String.valueOf(finding.getDataFlowElements().get(0).getLineNumber());}return returnNumber;}\n", "public static final List itemReturnQuery(String itemName, int categoryId, int selectedReceiverType, int receiverId, int returnedStatus, String transferNumber, String returnNumber, Date fromDate, Date toDate) throws Exception {Criteria c = getSession().createCriteria(ItemReturn.class);c.add(Restrictions.eq(\"dFlag\", 1));c.createAlias(\"transfer\", \"nik\");c.createAlias(\"transfer.item\", \"it\");if (!StringUtils.isEmpty(transferNumber)) {c.add(Restrictions.eq(\"nik.transferPanaNumber\", transferNumber));}if (!StringUtils.isEmpty(returnNumber)) {c.add(Restrictions.eq(\"returnNumber\", returnNumber));}if (selectedReceiverType > 0) {c.add(Restrictions.eq(\"nik.transferType\", selectedReceiverType));}if (returnedStatus >= 0) {c.add(Restrictions.eq(\"nik.status\", returnedStatus));}if (receiverId > 0) {if (selectedReceiverType == Transfer.PERSONNAL) {c.createAlias(\"transfer.person\", \"per\");c.add(Restrictions.eq(\"per.id\", receiverId));} else if (selectedReceiverType == Transfer.OFFICIAL) {c.createAlias(\"transfer.branchOffice\", \"bro\");c.add(Restrictions.eq(\"bro.id\", receiverId));}}if (!StringUtils.isEmpty(itemName)) {c.add(Restrictions.ilike(\"it.name\", \"%\" + itemName.toLowerCase() + \"%\", MatchMode.ANYWHERE));}c.createAlias(\"it.category\", \"cat\");c.add(Restrictions.eq(\"cat.categoryType\", Category.TYPE_RETURNABLE));if (categoryId > 0) {c.add(Restrictions.eq(\"cat.id\", categoryId));}if (!DateTimeUtils.isEmpty(fromDate)) {c.add(Restrictions.ge(\"addedDate\", fromDate));}if (!DateTimeUtils.isEmpty(toDate)) {c.add(Restrictions.le(\"addedDate\", toDate));}return c.list();}\n", "public void setReturnNumber(String returnNumber) {this.returnNumber = returnNumber;}\n", "public String getReturnnumber() {return returnnumber;}\n", "public void setReturnnumber(String returnnumber) {this.returnnumber = returnnumber;}\n"]}
{"name": "HumanEval_153_Strongest_Extension", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given the name of a class (a string) and an array array list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the array list.\n    // For example, if you are given \"Slices\" as the class and an array array list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\", (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_153_Strongest_Extension.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_153_Strongest_Extension", "test": "    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n", "description": "You will be given the name of a class (a string) and an array array list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the array list. For example, if you are given \"Slices\" as the class and an array array list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1). Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_119_match_parens", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array array list of two strings, both strings consist of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is to check if it is possible to concatenate the two strings in\n    // some order, that the resulting string will be good.\n    // A string S is considered to be good if and only if all parentheses in S\n    // are balanced. For example: the string '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n    // >>> matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\"))))\n    // (\"Yes\")\n    // >>> matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\"))))\n    // (\"No\")\n    public static String matchParens(ArrayList<String> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_119_match_parens.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_119_match_parens", "test": "    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n", "description": "You are given an array array list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_90_next_smallest", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array array list of integers.\n    // Write a function next_smallest() that returns the 2nd smallest element of the array list.\n    // Return null if there is no such element.\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    // Optional.of(2l)\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l))))\n    // Optional.of(2l)\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList())))\n    // Optional.empty()\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l))))\n    // Optional.empty()\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_90_next_smallest.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(1l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l, (long)34l, (long)12l, (long)-45l)))).equals(Optional.of(-35l)));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_90_next_smallest", "test": "    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(1l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l, (long)34l, (long)12l, (long)-45l)))).equals(Optional.of(-35l)));\n    }\n\n}\n", "description": "You are given an array array list of integers. Write a function next_smallest() that returns the 2nd smallest element of the array list. Return null if there is no such element.", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_92_any_int", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes 3 numbers.\n    // Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt((float)5l, (float)2l, (float)7l)\n    // (true)\n    // >>> anyInt((float)3l, (float)2l, (float)2l)\n    // (false)\n    // >>> anyInt((float)3l, (float)-2l, (float)1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), (float)2l)\n    // (false)\n    public static boolean anyInt(float x, float y, float z) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_92_any_int.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(anyInt((float)2l, (float)3l, (float)1l) == (true));\n    assert(anyInt((2.5f), (float)2l, (float)3l) == (false));\n    assert(anyInt((1.5f), (float)5l, (3.5f)) == (false));\n    assert(anyInt((float)2l, (float)6l, (float)2l) == (false));\n    assert(anyInt((float)4l, (float)2l, (float)2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt((float)-4l, (float)6l, (float)2l) == (true));\n    assert(anyInt((float)2l, (float)1l, (float)1l) == (true));\n    assert(anyInt((float)3l, (float)4l, (float)7l) == (true));\n    assert(anyInt((3.0f), (float)4l, (float)7l) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_92_any_int", "test": "    }\n    public static void main(String[] args) {\n    assert(anyInt((float)2l, (float)3l, (float)1l) == (true));\n    assert(anyInt((2.5f), (float)2l, (float)3l) == (false));\n    assert(anyInt((1.5f), (float)5l, (3.5f)) == (false));\n    assert(anyInt((float)2l, (float)6l, (float)2l) == (false));\n    assert(anyInt((float)4l, (float)2l, (float)2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt((float)-4l, (float)6l, (float)2l) == (true));\n    assert(anyInt((float)2l, (float)1l, (float)1l) == (true));\n    assert(anyInt((float)3l, (float)4l, (float)7l) == (true));\n    assert(anyInt((3.0f), (float)4l, (float)7l) == (false));\n    }\n\n}\n", "description": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. Examples", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_2_truncate_number", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive floating point number, it can be decomposed into\n    // and integer part (largest integer smaller than given number) and decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal part of the number.\n    // >>> truncateNumber((3.5f))\n    // (0.5f)\n    public static float truncateNumber(float number) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_2_truncate_number.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_2_truncate_number", "test": "    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n", "description": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_42_incr_list", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return array list with elements incremented by 1.\n    // >>> incrList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))\n    // >>> incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_42_incr_list.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(incrList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l)))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)2l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)3l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_42_incr_list", "test": "    }\n    public static void main(String[] args) {\n    assert(incrList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l)))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)2l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)3l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))));\n    }\n\n}\n", "description": "Return array list with elements incremented by 1.", "codematcher_results": ["public static void main(String[] a) {final CountDownLatch firstLatch = new CountDownLatch(1);final CountDownLatch secondLatch = new CountDownLatch(1);final BuildFactory.Builder builder = new BuildFactory.Builder();CopyOnWriteArrayList<BuildFactory> elements = new CopyOnWriteArrayList<>();elements.add(builder.name(\"myth\").addr(\"local\").build());elements.add(builder.name(\"roll\").addr(\"remote\").build());ReentrantLock lock = new ReentrantLock();ElementList<BuildFactory> list = new ElementList<>(elements, lock, \"list1 > \");ElementList<BuildFactory> list2 = new ElementList<>(elements, lock, \"list2 > \");Thread thread1 = new Thread(() -> {System.out.println(\"\u8fdb\u5165 \u7ebf\u7a0b 1\");elements.add(builder.name(\"dyn 1\").addr(\"89\").build());list.prep();firstLatch.countDown();try {secondLatch.await();} catch (InterruptedException e) {System.out.println(\"first inter error\");}list.listElement(\"first \");});Thread thread2 = new Thread(() -> {System.out.println(\"\u8fdb\u5165 \u7ebf\u7a0b 2\");try {Thread.sleep(2000);firstLatch.await();elements.add(builder.name(\"dyn 2\").addr(\"00\").build());list2.prep();secondLatch.countDown();} catch (InterruptedException e) {System.out.println(\"second inter error\");}list2.listElement(\"second\");});thread1.start();thread2.start();}\n", "public static ListElement list(InlineElement... elements) {return new ListElement(Arrays.asList(elements));}\n", "public List() {start = new ListElement(\"Kopf\");}\n", "public List<RuleOutput> sort(List<RuleOutput> matchedResults) {if (matchedResults == null || matchedResults.isEmpty()) {return matchedResults;}Object listElement = ((InterpretedRuleOutput) matchedResults.get(0)).getResult();if (listElement instanceof Pair) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) interpretedRule.getResult());});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, decisionPairs.get(i)));}return (List) newList;} else if (listElement instanceof Context) {Context skeleton = (Context) listElement;List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, new Context()));}for (Object key : skeleton.keySet()) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) ((Context) interpretedRule.getResult()).get(key));});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());for (int i@ i = 0@ i < decisionPairs.size()++){((Context) newList.get(i).getResult()).put(key, decisionPairs.get(i));}}return (List) newList;} else {return matchedResults;}}\n", "public static GirlListModel parse(Element listElement, int type) {GirlListModel listModel = new GirlListModel(type);if (listElement != null) {Elements girlElements = listElement.children();for (Element girlElement : girlElements) {GirlModel girlModel = GirlModel.parse(girlElement, type);listModel.getList().add(girlModel);}}Logger.log(\"GirlListModel parse... \" + listModel.getList().size());return listModel;}\n", "public static PicListModel parse(Element listElement) throws Exception {PicListModel picListModel = new PicListModel();if (listElement != null) {for (Element picElement : listElement.children()) {PicModel picModel = PicModel.parse(picElement);picListModel.getList().add(picModel);}}return picListModel;}\n", "public void addDir(File target) {if (target == null) {return;}File setDir = target.getParentFile();if (target.isDirectory()) {setDir = target;}for (File listElement : searchTargetList) {if (setDir.getPath().equals(listElement.getPath())) {return;}}searchTargetList.add(setDir);searchTargetMap = null;mibValueCache = new MibValueCache();}\n", "public void delete(int n) {if (n < 1) {return;}ListElement nth = findIndex(n);if (nth == null) {return;}ListElement pre = findIndex(n - 1);pre.next = nth.next;}\n", "public void format(ListElement element) {String[] inlineElements = element.getEntries().stream().map(el -> {Formatter formatter = newInstance();el.format(formatter);return formatter.finalizeFormatting();}).toArray(String[]::new);formatList(state, inlineElements);}\n", "public void returnAListOfElementsByClassName() {List<WebElement> elements;elements = driver.findElements(By.className(\"normal\"));Set<String> foundTags = new HashSet<String>();for (WebElement e : elements) {foundTags.add(e.getTagName().toLowerCase());}assertTrue(\"expected p tag\", foundTags.contains(\"p\"));assertTrue(\"expected ul tag\", foundTags.contains(\"ul\"));assertTrue(\"expected li tag\", foundTags.contains(\"li\"));assertTrue(\"expected a tag\", foundTags.contains(\"a\"));assertFalse(\"did not expect div tag\", foundTags.contains(\"div\"));}\n"]}
{"name": "HumanEval_150_x_or_y", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // A simple program which should return the value of x if n is \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n    // >>> xOrY((7l), (34l), (12l))\n    // (34l)\n    // >>> xOrY((15l), (8l), (5l))\n    // (5l)\n    public static long xOrY(long n, long x, long y) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_150_x_or_y.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_150_x_or_y", "test": "    }\n    public static void main(String[] args) {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n", "description": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise. Examples:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_49_modp", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long modp(long n, long p) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_49_modp.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_49_modp", "test": "    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n", "description": "Return 2^n modulo p (be aware of numerics).", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_155_even_odd_count", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an integer. return a pair that has the number of even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l, 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_155_even_odd_count.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_155_even_odd_count", "test": "    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n", "description": "Given an integer. return a pair that has the number of even and odd digits respectively. Example:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_80_is_happy", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string s.\n    // Your task is to check if the string is hapjava or not.\n    // A string is hapjava if its length is at least 3 and every 3 consecutive letters are distinct\n    // For example:\n    // >>> isHappy((\"a\"))\n    // (false)\n    // >>> isHappy((\"aa\"))\n    // (false)\n    // >>> isHappy((\"abcd\"))\n    // (true)\n    // >>> isHappy((\"aabb\"))\n    // (false)\n    // >>> isHappy((\"adb\"))\n    // (true)\n    // >>> isHappy((\"xyy\"))\n    // (false)\n    public static boolean isHappy(String s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_80_is_happy.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_80_is_happy", "test": "    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n", "description": "You are given a string s. Your task is to check if the string is hapjava or not. A string is hapjava if its length is at least 3 and every 3 consecutive letters are distinct For example:", "codematcher_results": ["protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {;File fileBufferedImage waterimg=null} //StringString message = \"\";String sort = \"\";FileOutputStream out = null;try {System.out.println(\"\u5f00\u59cb\u63a5\u53d7\u56fe\u7247\");DiskFileItemFactory factory = new DiskFileItemFactory();ServletFileUpload upload = new ServletFileUpload(factory);upload.setHeaderEncoding(\"UTF-8\");if (!ServletFileUpload.isMultipartContent(request)) {System.out.println(\"\u89e3\u6790\u51fa\u9519\");return;}List<FileItem> list = upload.parseRequest(request);for (FileItem item : list) {if (item.isFormField()) {String name = item.getFieldName();String value = item.getString(\"UTF-8\");sort = value;System.out.println(name + \"=\" + value);} else {String filename = item.getName();System.out.println(filename);System.out.println(sort);if (filename == null || filename.trim().equals(\"\")) {continue;};InputStream in = item.getInputStream();out = new FileOutputStream(new File(\"d:\\\\hahahha.txt\"));byte[] b = new byte[1024];while (in.read(b) != -1) {String msg = new String(new String(b));System.out.println(msg);out.write(b);};}in.close();item.delete();message = \"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\";}}} catch (Exception e) {message = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\";e.printStackTrace();} finally {if (out != null) {out.close();}}}\n", "private Map<String, String> getMap(final List<StringString> sample) {HashMap<String, String> map = new HashMap<String, String>();for (int i@ i = 0@ i < sample.size()++){map.put(sample.get(i).key, sample.get(i).value);}return (Map) map;}\n", "public Circle(// sets k, u, v, w by StringString coeffString, // sets k, u, v, w by StringString radXString, // sets k, u, v, w by StringString radYString, // sets k, u, v, w by StringString radZString) {HomogenousPolynomial coeff = new HomogenousPolynomial(coeffString);HomogenousVector radCoeffs = new HomogenousVector(radXString, radYString, radZString);if (coeff.equalsZero())throw new IllegalArgumentException(\"coefficient must be nonzero\");if (coeff.degree() + 2 != radCoeffs.degree())throw new IllegalArgumentException(\"degree of radical coefficients must be two more than degree of coefficient\");this.coeff = coeff;this.radCoeffs = radCoeffs;}\n", "public void string_variable_toString_length() {ExecutionContext context = new ExecutionContext();Object result = interpreter.compute(getProgram(\"string_variable_toString_length\"), context);assertThat(result).as(\"correct length value\").isEqualTo(5);assertThat(context.getValueCount()).as(\"context contains a single variable\").isEqualTo(1);assertThat(context.getValue(\"myVar\")).as(\"context contains the declared variable with the correct String \" + \"value\").isEqualTo(\"Value\");}\n", "public ArrayList<StringString> getData(String dataName) {return getList(getDataMap(dataName));}\n", "private ArrayList<StringString> getList(final Map<String, String> sample) {ArrayList<StringString> StringString_sample = new ArrayList<StringString>();for (Map.Entry<String, String> x : sample.entrySet()) {StringString v = new StringString();v.key = x.getKey();v.value = x.getValue();StringString_sample.add(v);}return StringString_sample;}\n", "public static Transform<String, String> transform(List<String> transforms, Map<String, Transform<String, String>> stringToStringTransforms, Map<String, Transform<Object, String>> objectToStringTransforms, Map<String, Transform<String, Object>> stringToObjectTransforms, Map<String, Transform<Object, Object>> objectToObjectTransforms) throws ConfigurationException {int state = STRING_STATE;Transform<String, String> stringIdentity = (s) -> s;Transform<String, String> stringString = stringIdentity;Transform<String, Object> stringObject = null;for (String t : transforms) {String op = parseOperationNameFromTransform(t);Map<String, String> parameters = parseParametersFrom(t);switch(state) {case STRING_STATE:if (stringToStringTransforms.containsKey(op)) {Transform<String, String> transform = stringToStringTransforms.get(op);stringString = stringString.andThen(transform);} else if (stringToObjectTransforms.containsKey(op)) {Transform<String, Object> transform = stringToObjectTransforms.get(t);stringObject = stringString.andThen(transform);state = OBJECT_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from string state\");}break;case OBJECT_STATE:if (objectToObjectTransforms.containsKey(op)) {Transform<Object, Object> transform = objectToObjectTransforms.get(op);stringObject = transform.compose(stringObject);} else if (objectToStringTransforms.containsKey(op)) {Transform<Object, String> transform = objectToStringTransforms.get(op);stringString = stringObject.andThen(transform);state = STRING_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from obj state\");}break;}}return stringString;}\n", "' stringString readString(DataInputStream stream) throws IOException {String line = stream.readLine();if (line == null)return null;int len = Integer.parseInt(line);byte[] buffer = new byte[len];stream.readFully(buffer);return new String(buffer, StandardCharsets.ISO_8859_1);}\n", "HttpURLConnection conn = initHttp(url,if;String valueString = nullStringBuffer bufferRes =while ((valueString = read.readLine()) != null) {} in.close();} else { BufferedInputStream bis =String ds =String fullName =StringString suffix;att.setFileName(relName);} return att}public static String initParams(String url, Map<String, String> params) throws UnsupportedEncodingException {if (null == params || params.isEmpty()) {return url;}StringBuilder sb = new StringBuilder(url);if (url.indexOf(\"?\") == -1) {sb.append(\"?\");}sb.append(map2Url(params));return sb.toString();}\n", "public void testOptInt() {assertEquals(33, somenil.optint(33));throwsError(sometrue, \"optint\", int.class, new Integer(33));throwsError(somefalse, \"optint\", int.class, new Integer(33));assertEquals(0, zero.optint(33));assertEquals(sampleint, intint.optint(33));assertEquals((int) samplelong, longdouble.optint(33));assertEquals((int) sampledouble, doubledouble.optint(33));throwsError(somefunc, \"optint\", int.class, new Integer(33));throwsError(someclosure, \"optint\", int.class, new Integer(33));throwsError(stringstring, \"optint\", int.class, new Integer(33));assertEquals(sampleint, stringint.optint(33));assertEquals((int) samplelong, stringlong.optint(33));assertEquals((int) sampledouble, stringdouble.optint(33));throwsError(thread, \"optint\", int.class, new Integer(33));throwsError(table, \"optint\", int.class, new Integer(33));throwsError(userdataobj, \"optint\", int.class, new Integer(33));throwsError(userdatacls, \"optint\", int.class, new Integer(33));}\n"]}
{"name": "HumanEval_59_largest_prime_factor", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_59_largest_prime_factor.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_59_largest_prime_factor", "test": "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n", "description": "Return the largest prime factor of n. Assume n > 1 and is not a prime.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_66_digitSum", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Task\n    // Write a function that takes a string as input and returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n    // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    public static long digitSum(String s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_66_digitSum.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_66_digitSum", "test": "    }\n    public static void main(String[] args) {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n", "description": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_21_rescale_to_unit", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of numbers (of at least two elements), apply a linear transform to that array list,\n    // such that the smallest number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_21_rescale_to_unit.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_21_rescale_to_unit", "test": "    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n", "description": "Given array list of numbers (of at least two elements), apply a linear transform to that array list, such that the smallest number will become 0 and the largest will become 1", "codematcher_results": ["public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFile(final File zipFile, final File destDir) throws IOException {return unzipFileByKeyword(zipFile, destDir, null);}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n", "public void listIteratorNextOnThreeElementsList_shouldReturnElements() {final ObservableArrayList<String> list = new ObservableArrayList<>(\"1\", \"2\", \"3\");final ListIterator<String> iterator = list.listIterator();assertThat(iterator.next(), is(\"1\"));assertThat(iterator.next(), is(\"2\"));assertThat(iterator.previous(), is(\"2\"));assertThat(iterator.next(), is(\"2\"));assertThat(iterator.next(), is(\"3\"));assertThat(iterator.previous(), is(\"3\"));assertThat(iterator.previous(), is(\"2\"));assertThat(iterator.next(), is(\"2\"));assertThat(iterator.previous(), is(\"2\"));assertThat(iterator.previous(), is(\"1\"));}\n", "public void listIteratorNextOnThreeElementsList_shouldThrowExceptionAtTheEnd() {final ObservableArrayList<String> list = new ObservableArrayList<>(\"1\", \"2\", \"3\");final ListIterator<String> iterator = list.listIterator();iterator.next();iterator.next();iterator.next();iterator.next();}\n", "public void listToSqlStringWithSingleElementInListReturnsSingleQuotesNoCommas() {List<String> singleStringList = ImmutableList.of(\"a\");String expected = \"'a'\";String actual = SqlStringHelpers.listToSQLString(singleStringList);assertThat(actual, is(expected));}\n", "public void listIteratorPreviousOnThreeElementsList_shouldThrowExceptionAtTheBeginning() {final ObservableArrayList<String> list = new ObservableArrayList<>(\"1\", \"2\", \"3\");final ListIterator<String> iterator = list.listIterator();iterator.previous();}\n", "public void listIteratorNextOnThreeElementsListMovingBackAndForth_shouldThrowExceptionAtTheEnd() {final ObservableArrayList<String> list = new ObservableArrayList<>(\"1\", \"2\", \"3\");final ListIterator<String> iterator = list.listIterator();iterator.next();iterator.previous();iterator.next();iterator.next();iterator.previous();iterator.next();iterator.next();iterator.previous();iterator.next();iterator.next();}\n", "public void listIteratorHasNextAndHasPreviousOnThreeElementsList_shouldReturnTrueForEachElement() {final ObservableArrayList<String> list = new ObservableArrayList<>(\"1\", \"2\", \"3\");final ListIterator<String> iterator = list.listIterator();assertThat(iterator.hasNext(), is(true));assertThat(iterator.hasPrevious(), is(false));iterator.next();assertThat(iterator.hasNext(), is(true));assertThat(iterator.hasPrevious(), is(true));iterator.next();assertThat(iterator.hasNext(), is(true));assertThat(iterator.hasPrevious(), is(true));iterator.next();assertThat(iterator.hasNext(), is(false));assertThat(iterator.hasPrevious(), is(true));iterator.previous();assertThat(iterator.hasNext(), is(true));assertThat(iterator.hasPrevious(), is(true));iterator.previous();assertThat(iterator.hasNext(), is(true));assertThat(iterator.hasPrevious(), is(true));iterator.previous();assertThat(iterator.hasNext(), is(true));assertThat(iterator.hasPrevious(), is(false));}\n", "public void listIteratorPreviousOnThreeElementsListMovingBackAndForth_shouldThrowExceptionAtTheBeginning() {final ObservableArrayList<String> list = new ObservableArrayList<>(\"1\", \"2\", \"3\");final ListIterator<String> iterator = list.listIterator();iterator.next();iterator.next();iterator.next();iterator.previous();iterator.next();iterator.previous();iterator.previous();iterator.next();iterator.previous();iterator.previous();iterator.next();iterator.previous();iterator.previous();}\n"]}
{"name": "HumanEval_121_solution", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions.\n    // Examples\n    // >>> solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l))))\n    // (12l)\n    // >>> solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l))))\n    // (9l)\n    // >>> solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l))))\n    // (0l)\n    public static long solution(ArrayList<Long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_121_solution.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l)))) == (12l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l)))) == (9l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l)))) == (5l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)23l, (long)32l)))) == (23l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)13l, (long)2l, (long)9l)))) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_121_solution", "test": "    }\n    public static void main(String[] args) {\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l)))) == (12l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l)))) == (9l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l)))) == (5l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)23l, (long)32l)))) == (23l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)13l, (long)2l, (long)9l)))) == (3l));\n    }\n\n}\n", "description": "Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions. Examples", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public ArrayListOfIntegers(ArrayList<Integer> items) {this.items = items;}\n"]}
{"name": "HumanEval_68_pluck", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // \"Given an array array list representing a branch of a tree that has non-negative integer nodes\n    // your task is to pluck one of the nodes and return it.\n    // The plucked node should be the node with the smallest even value.\n    // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    // The plucked node should be returned in an array array list, [ smalest_value, its index ],\n    // If there are no even values or the given array array list is empty, return [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n    // so we will choose the first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_68_pluck.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_68_pluck", "test": "    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "description": "\"Given an array array list representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in an array array list, [ smalest_value, its index ], If there are no even values or the given array array list is empty, return []. Example 1:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_147_get_max_triples", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a positive integer n. You have to create an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_147_get_max_triples.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_147_get_max_triples", "test": "    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n", "description": "You are given a positive integer n. You have to create an integer array array list a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3. Example :", "codematcher_results": ["public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public BundleBuilder<M> integerArrayList(@NonNull String name, @NonNull ArrayList<Integer> value) {mBundle.putIntegerArrayList(name, value);return this;}\n", "public IntegerArrayList() {this(8);}\n", "public IntegerArrayList(int size) {values = new int[size];}\n", "public B integerArrayListArg(String key, ArrayList<Integer> value) {args.putIntegerArrayList(key, value);return (B) this;}\n", "protected static int[] integerArrayListToArray(ArrayList<Integer> intArrayList) {int[] intArray = new int[intArrayList.size()];for (int i@ i = 0@ i < @ intArrayList.size()++){intArray[i] = intArrayList.get(i).intValue();}return intArray;}\n"]}
{"name": "HumanEval_110_exchange", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this problem, you will implement a function that takes two array lists of numbers,\n    // and determines whether it is possible to perform an exchange of elements\n    // between them to make lst1 an array array list of only even numbers.\n    // There is no limit on the number of exchanged elements between lst1 and lst2.\n    // If it is possible to exchange elements between the lst1 and lst2 to make\n    // all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return \"NO\".\n    // For example:\n    // >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (\"YES\")\n    // >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l))))\n    // (\"NO\")\n    // It is assumed that the input array lists will be non-empty.\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_110_exchange.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)6l, (long)1l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)5l, (long)1l, (long)1l, (long)1l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)100l, (long)200l))), (new ArrayList<Long>(Arrays.asList((long)200l, (long)200l)))).equals((\"YES\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_110_exchange", "test": "    }\n    public static void main(String[] args) {\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)6l, (long)1l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)5l, (long)1l, (long)1l, (long)1l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)100l, (long)200l))), (new ArrayList<Long>(Arrays.asList((long)200l, (long)200l)))).equals((\"YES\")));\n    }\n\n}\n", "description": "In this problem, you will implement a function that takes two array lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 an array array list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\". For example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_47_median", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return median of elements in the array list l.\n    // >>> median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (float)3l\n    // >>> median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l))))\n    // (15.0f)\n    public static float median(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_47_median.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_47_median", "test": "    }\n    public static void main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n", "description": "Return median of elements in the array list l.", "codematcher_results": ["ElementArrayList(ArrayList<Element> elements, ReentrantLock lock, String name) {this.elements = elements;this.lock = lock;this.name = name;}\n", "private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_82_prime_length", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns true if the string\n    // length is a prime number or false otherwise\n    // Examples\n    // >>> primeLength((\"Hello\"))\n    // (true)\n    // >>> primeLength((\"abcdcba\"))\n    // (true)\n    // >>> primeLength((\"kittens\"))\n    // (true)\n    // >>> primeLength((\"orange\"))\n    // (false)\n    public static boolean primeLength(String string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_82_prime_length.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_82_prime_length", "test": "    }\n    public static void main(String[] args) {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n", "description": "Write a function that takes a string and returns true if the string length is a prime number or false otherwise Examples", "codematcher_results": ["protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {;File fileBufferedImage waterimg=null} //StringString message = \"\";String sort = \"\";FileOutputStream out = null;try {System.out.println(\"\u5f00\u59cb\u63a5\u53d7\u56fe\u7247\");DiskFileItemFactory factory = new DiskFileItemFactory();ServletFileUpload upload = new ServletFileUpload(factory);upload.setHeaderEncoding(\"UTF-8\");if (!ServletFileUpload.isMultipartContent(request)) {System.out.println(\"\u89e3\u6790\u51fa\u9519\");return;}List<FileItem> list = upload.parseRequest(request);for (FileItem item : list) {if (item.isFormField()) {String name = item.getFieldName();String value = item.getString(\"UTF-8\");sort = value;System.out.println(name + \"=\" + value);} else {String filename = item.getName();System.out.println(filename);System.out.println(sort);if (filename == null || filename.trim().equals(\"\")) {continue;};InputStream in = item.getInputStream();out = new FileOutputStream(new File(\"d:\\\\hahahha.txt\"));byte[] b = new byte[1024];while (in.read(b) != -1) {String msg = new String(new String(b));System.out.println(msg);out.write(b);};}in.close();item.delete();message = \"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\";}}} catch (Exception e) {message = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\";e.printStackTrace();} finally {if (out != null) {out.close();}}}\n", "private Map<String, String> getMap(final List<StringString> sample) {HashMap<String, String> map = new HashMap<String, String>();for (int i@ i = 0@ i < sample.size()++){map.put(sample.get(i).key, sample.get(i).value);}return (Map) map;}\n", "public Circle(// sets k, u, v, w by StringString coeffString, // sets k, u, v, w by StringString radXString, // sets k, u, v, w by StringString radYString, // sets k, u, v, w by StringString radZString) {HomogenousPolynomial coeff = new HomogenousPolynomial(coeffString);HomogenousVector radCoeffs = new HomogenousVector(radXString, radYString, radZString);if (coeff.equalsZero())throw new IllegalArgumentException(\"coefficient must be nonzero\");if (coeff.degree() + 2 != radCoeffs.degree())throw new IllegalArgumentException(\"degree of radical coefficients must be two more than degree of coefficient\");this.coeff = coeff;this.radCoeffs = radCoeffs;}\n", "public ArrayList<StringString> getData(String dataName) {return getList(getDataMap(dataName));}\n", "private ArrayList<StringString> getList(final Map<String, String> sample) {ArrayList<StringString> StringString_sample = new ArrayList<StringString>();for (Map.Entry<String, String> x : sample.entrySet()) {StringString v = new StringString();v.key = x.getKey();v.value = x.getValue();StringString_sample.add(v);}return StringString_sample;}\n", "public static Transform<String, String> transform(List<String> transforms, Map<String, Transform<String, String>> stringToStringTransforms, Map<String, Transform<Object, String>> objectToStringTransforms, Map<String, Transform<String, Object>> stringToObjectTransforms, Map<String, Transform<Object, Object>> objectToObjectTransforms) throws ConfigurationException {int state = STRING_STATE;Transform<String, String> stringIdentity = (s) -> s;Transform<String, String> stringString = stringIdentity;Transform<String, Object> stringObject = null;for (String t : transforms) {String op = parseOperationNameFromTransform(t);Map<String, String> parameters = parseParametersFrom(t);switch(state) {case STRING_STATE:if (stringToStringTransforms.containsKey(op)) {Transform<String, String> transform = stringToStringTransforms.get(op);stringString = stringString.andThen(transform);} else if (stringToObjectTransforms.containsKey(op)) {Transform<String, Object> transform = stringToObjectTransforms.get(t);stringObject = stringString.andThen(transform);state = OBJECT_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from string state\");}break;case OBJECT_STATE:if (objectToObjectTransforms.containsKey(op)) {Transform<Object, Object> transform = objectToObjectTransforms.get(op);stringObject = transform.compose(stringObject);} else if (objectToStringTransforms.containsKey(op)) {Transform<Object, String> transform = objectToStringTransforms.get(op);stringString = stringObject.andThen(transform);state = STRING_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from obj state\");}break;}}return stringString;}\n", "' stringString readString(DataInputStream stream) throws IOException {String line = stream.readLine();if (line == null)return null;int len = Integer.parseInt(line);byte[] buffer = new byte[len];stream.readFully(buffer);return new String(buffer, StandardCharsets.ISO_8859_1);}\n", "HttpURLConnection conn = initHttp(url,if;String valueString = nullStringBuffer bufferRes =while ((valueString = read.readLine()) != null) {} in.close();} else { BufferedInputStream bis =String ds =String fullName =StringString suffix;att.setFileName(relName);} return att}public static String initParams(String url, Map<String, String> params) throws UnsupportedEncodingException {if (null == params || params.isEmpty()) {return url;}StringBuilder sb = new StringBuilder(url);if (url.indexOf(\"?\") == -1) {sb.append(\"?\");}sb.append(map2Url(params));return sb.toString();}\n", "public void testOptInt() {assertEquals(33, somenil.optint(33));throwsError(sometrue, \"optint\", int.class, new Integer(33));throwsError(somefalse, \"optint\", int.class, new Integer(33));assertEquals(0, zero.optint(33));assertEquals(sampleint, intint.optint(33));assertEquals((int) samplelong, longdouble.optint(33));assertEquals((int) sampledouble, doubledouble.optint(33));throwsError(somefunc, \"optint\", int.class, new Integer(33));throwsError(someclosure, \"optint\", int.class, new Integer(33));throwsError(stringstring, \"optint\", int.class, new Integer(33));assertEquals(sampleint, stringint.optint(33));assertEquals((int) samplelong, stringlong.optint(33));assertEquals((int) sampledouble, stringdouble.optint(33));throwsError(thread, \"optint\", int.class, new Integer(33));throwsError(table, \"optint\", int.class, new Integer(33));throwsError(userdataobj, \"optint\", int.class, new Integer(33));throwsError(userdatacls, \"optint\", int.class, new Integer(33));}\n", "String pomPath =SAXReaderDocument document = reader.read(pomPath);Element rootElement13 =map.remove(\"rootElement\")StringString dpversionSystem.out.println(dpname)}private void pushCommit(Git git, String title) throws Exception {try {AddCommand add = git.add();add.addFilepattern(\".\").call();CommitCommand commit = git.commit();commit.setCommitter(\"zhairuiping\", \"zhairuiping@scm.cfets.com\");commit.setAuthor(\"zhairuiping\", \"zhairuiping@scm.cfets.com\");commit.setAll(true);RevCommit revCommit = commit.setMessage(\" dev2 user jgit::\" + title).call();String commitId = revCommit.getId().name();logger.info(\"commitId:\" + commitId);PushCommand push = git.push();push.call();} catch (Exception e) {logger.error(\"\u4e0a\u4f20\u7248\u672c\u5931\u8d25\", e);}}\n"]}
{"name": "HumanEval_73_smallest_change", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list arr of integers, find the minimum number of elements that\n    // need to be changed to make the array array list palindromic. A palindromic array array list is an array array list that\n    // is read the same backwards and forwards. In one change, you can change one element to any other element.\n    // For example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_73_smallest_change.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_73_smallest_change", "test": "    }\n    public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    }\n\n}\n", "description": "Given an array array list arr of integers, find the minimum number of elements that need to be changed to make the array array list palindromic. A palindromic array array list is an array array list that is read the same backwards and forwards. In one change, you can change one element to any other element. For example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_133_sum_squares", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array array list of numbers.\n    // You need to return the sum of squared numbers in the given array list,\n    // round each element in the array list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n    // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_133_sum_squares.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f, (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_133_sum_squares", "test": "    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f, (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2l));\n    }\n\n}\n", "description": "You are given an array array list of numbers. You need to return the sum of squared numbers in the given array list, round each element in the array list to the upper int(Ceiling) first. Examples:", "codematcher_results": ["public List<List<List<String>>> listListListString(@RequestBody List<List<List<String>>> value) {return value;}\n", "public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n"]}
{"name": "HumanEval_141_file_name_check", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which takes a string representing a file's name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    // A file's name is considered to be valid if and only if all the following conditions \n    // are met:\n    // - There should not be more than three digits ('0'-'9') in the file's name.\n    // - The file's name contains exactly one dot '.'\n    // - The substring before the dot should not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    public static String fileNameCheck(String file_name) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_141_file_name_check.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_141_file_name_check", "test": "    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n", "description": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll'] Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_40_triples_sum_to_zero", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // triples_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are three distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_40_triples_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_40_triples_sum_to_zero", "test": "    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n", "description": "triples_sum_to_zero takes an array array list of integers as an input. it returns true if there are three distinct elements in the array list that sum to zero, and false otherwise.", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_127_intersection", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given two intervals,\n    // where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The given intervals are closed which means that the interval (start, end)\n    // includes both start and end.\n    // For each given interval, it is assumed that its start is less or equal its end.\n    // Your task is to determine whether the length of intersection of these two \n    // intervals is a prime number.\n    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which not a prime number.\n    // If the length of the intersection is a prime number, return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output] samples:\n    // >>> intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l)))\n    // (\"NO\")\n    // >>> intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l)))\n    // (\"NO\")\n    // >>> intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l)))\n    // (\"YES\")\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_127_intersection.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_127_intersection", "test": "    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n", "description": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\". [input/output] samples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_1_separate_paren_groups", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the array list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_1_separate_paren_groups.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\")))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_1_separate_paren_groups", "test": "    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\")))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n", "description": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the array list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_152_compare", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // I think we all remember that feeling when the result of some long-awaited\n    // event is finally known. The feelings and thoughts you have at that moment are\n    // definitely worth noting down and comparing.\n    // Your task is to determine if a person correctly guessed the results of a number of matches.\n    // You are given two array array lists of scores and guesses of equal length, where each index shows a match. \n    // Return an array array list of the same length denoting how far off each guess was. If they have guessed correctly,\n    // the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    // example:\n    // >>> compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))\n    // >>> compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)5l, (long)0l, (long)0l, (long)0l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l, (long)0l, (long)-2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)1l, (long)0l, (long)0l, (long)6l)))\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_152_compare.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l, (long)0l, (long)1l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_152_compare", "test": "    }\n    public static void main(String[] args) {\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l, (long)0l, (long)1l)))));\n    }\n\n}\n", "description": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two array array lists of scores and guesses of equal length, where each index shows a match. Return an array array list of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score. example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_83_starts_one_ends", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static long startsOneEnds(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_83_starts_one_ends.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_83_starts_one_ends", "test": "    }\n    public static void main(String[] args) {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n", "description": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_134_check_if_last_char_is_a_letter", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    public static boolean checkIfLastCharIsALetter(String txt) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_134_check_if_last_char_is_a_letter.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_134_check_if_last_char_is_a_letter", "test": "    }\n    public static void main(String[] args) {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n", "description": "Create a function that returns true if the last character of a given string is an alphabetical character and is not a part of a word, and false otherwise. Note: \"word\" is a group of characters separated by space. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public boolean isCommandSeparator() {return \":\".equals(stringValue);}\n"]}
{"name": "HumanEval_124_valid_date", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static boolean validDate(String date) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_124_valid_date.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_124_valid_date", "test": "    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n", "description": "You have to write a function which validates a given date string and returns true if the date is valid otherwise false. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_108_count_nums", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function count_nums which takes an array array list of integers and returns\n    // the number of elements which has a sum of digits > 0.\n    // If a number is negative, then its first signed digit will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_108_count_nums.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_108_count_nums", "test": "    }\n    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n", "description": "Write a function count_nums which takes an array array list of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_86_anti_shuffle", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n    // (\"Hello !!!Wdlor\")\n    public static String antiShuffle(String s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_86_anti_shuffle.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_86_anti_shuffle", "test": "    }\n    public static void main(String[] args) {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n", "description": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence. For example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "private ZipUtils() {throw new UnsupportedOperationException(\"u can't instantiate me...\");}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n"]}
{"name": "HumanEval_48_is_palindrome", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n    public static boolean isPalindrome(String text) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_48_is_palindrome.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_48_is_palindrome", "test": "    }\n    public static void main(String[] args) {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n", "description": "Checks if given string is a palindrome", "codematcher_results": ["public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public boolean checkStringIsNull(final List<VerifyInfo> verifyInfoList) {int count = 0;for (int i@ i = 0@ i < verifyInfoList.size()++){if (TextUtils.isEmpty(verifyInfoList.get(i).getMsg())) {Toast.makeText(mActivity, verifyInfoList.get(i).getMsgTip(), Toast.LENGTH_SHORT).show();return false;} else {if (!verifyInfoList.get(i).isSuccess()) {Toast.makeText(mActivity, verifyInfoList.get(i).getIsFailTip(), Toast.LENGTH_SHORT).show();return false;}}count++;}if (count == verifyInfoList.size()) {return true;}return false;}\n", "public static boolean checkStringIsEmpty(String var) {if (var == null)return true;if (var.equals(\"\"))return true;return false;}\n", "public static int checkStringIsEmpty(String... values) {int location = -1;if (values.length == 1) {return values[0].isEmpty() ? 0 : -1;}for (int i@ i = 0, size = values.length@ i < size++){if (values[i].isEmpty()) {return i;}}return location;}\n", "protected static void checkByteStringIsUtf8(ByteString byteString) throws IllegalArgumentException {if (!byteString.isValidUtf8()) {throw new IllegalArgumentException(\"Byte string is not UTF-8.\");}}\n", "private String checkIfStringIsNumeric(String val) {if (val == null || val.isEmpty()) {return val;}return allDigits.matcher(val).matches() ? \"\\\\ \" + val : val;}\n", "public boolean checkStringerCollision(Point3d pos) {return (Math.abs(pos.y) - (mDiameter * 10.0 / 2.0)) < mStringerWidth * 10.0;}\n", "private void checkStringPermissionMap(String project) {Assert.notBlank(project);if (stringPermissionMap == null) {stringPermissionMap = new HashMap<>();}if (!stringPermissionMap.containsKey(project)) {stringPermissionMap.put(project, new HashSet<String>());}}\n", "public void checkFixedStringLookupMissing() {runTest(\"classpath*:BadDefinitions/FixedStringLookupMissing.yaml\", containsString(\"Missing lookup\"));}\n", "public void checkFixedStringLookupMissingvalue() {runTest(\"classpath*:BadDefinitions/FixedStringLookupMissingValue.yaml\", containsString(\"Fixed value\"));}\n"]}
{"name": "HumanEval_118_get_closest_vowel", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a word. Your task is to find the closest vowel that stands between \n    // two consonants from the right side of the word (case sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    // find any vowel met the above condition. \n    // You may assume that the given string contains English letter only.\n    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    public static String getClosestVowel(String word) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_118_get_closest_vowel.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_118_get_closest_vowel", "test": "    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n", "description": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only. Example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_31_is_prime", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean isPrime(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_31_is_prime.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_31_is_prime", "test": "    }\n    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n", "description": "Return true if a given number is prime, and false otherwise.", "codematcher_results": ["public String toString() {return \"ImageEntity{\" + \"col='\" + col + '\\'' + \", tag='\" + tag + '\\'' + \", tag3='\" + tag3 + '\\'' + \", sort='\" + sort + '\\'' + \", totalNum=\" + totalNum + \", startIndex=\" + startIndex + \", returnNumber=\" + returnNumber + \", imgs=\" + imgs + '}';}\n", "private void injectJS(WebView webView) {if (legacyMode) {injectJSOld(webView);return;}try {webView.loadUrl(\"javascript:\" + \"var linksLength = document.head.getElementsByTagName('link').length\" + \"for(var i=0i<linksLengthi++){document.head.getElementsByTagName('link')[0].remove()}\" + \"var isInGame = false\" + \"var isVerified = false\" + \"function isSmashing(returnNumber){if(isInGame){if(isVerified){return 'gv'+returnNumber}else{return 'g'+returnNumber}}return returnNumber}\" + \"function takeNextStep(gamePin,name,answer,returnVal,verify){if($('#inputSession').length==1){isVerified=falseisInGame=false$('#inputSession').val(gamePin)$('#inputSession').trigger('change')setTimeout(function(){$('#inputSession').submit()},10)}else if($('#username').length == 1){isInGame = true$('#username').val(name)$('#username').trigger('change')setTimeout(function(){$('#username').submit()},10)}else if($('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--0').length!=0){isVerified=falseif(verify==''){return 'v'+returnVal}else if($('.two-factor-auth__sub-heading.ng-binding').html() != 'Match the pattern on screen'){return 'i'+returnVal}else{for(var i=0i<4i++){$('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--' + verify[i]).mousedown()}}} else if($('.answer').length!=0){isVerified=true$('.answer.answer'+answer).mousedown()}else{isVerified=true}return 'n'+returnVal}\");} catch (Exception e) {e.printStackTrace();}}\n", "void capturePoint(Vector3D beamOrigin, Vector3D beamDir, double distance, double intensity, double echo_width, int returnNumber, int pulseReturnNumber, int fullwaveIndex, String hitObjectId, int classification) {if (distance < detector.cfg_device_rangeMin_m) {return;}double precision = this.detector.cfg_device_accuracy_m / 2;double error = -precision + Math.random() * (precision * 2);error += boxMullerRandom(0.0, this.detector.cfg_device_accuracy_m / 2);distance += error;Vector3D pointPos = beamOrigin.add(beamDir.scalarMultiply(distance));Measurement m = new Measurement();m.position = pointPos;m.distance = distance;m.intensity = intensity;m.echo_width = echo_width;m.returnNumber = returnNumber;m.pulseReturnNumber = pulseReturnNumber;m.fullwaveIndex = fullwaveIndex;m.beamOrigin = beamOrigin;m.beamDirection = beamDir;m.hitObjectId = hitObjectId;m.classification = classification;detector.writeMeasurement(m);detector.mBuffer.add(m);}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");}if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");}String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG)Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));if ((nanpState == NP_NANP_LOCAL) || (nanpState == NP_NANP_AREA_LOCAL) || (nanpState == NP_NANP_NDD_AREA_LOCAL)) {return networkPortionNumber;} else if (nanpState == NP_NANP_NBPCD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK) {return networkPortionNumber.substring(1);} else {return networkPortionNumber;}} else if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK) {return networkPortionNumber;} else if (networkType == GSM_UMTS_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return PLUS_SIGN + networkPortionNumber.substring(iddLength);} else if (networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return networkPortionNumber.substring(iddLength);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG)Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK) {returnNumber = networkPortionNumber.substring(1);}break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(1);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK || networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;returnNumber = NANP_IDD + networkPortionNumber.substring(iddLength);}break;case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!inExceptionListForNpCcAreaLocal(numberEntry) && networkPortionNumber.length() >= 11 && countryCode != NANP_CC) {returnNumber = NANP_IDD + networkPortionNumber;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK)) {if (networkPortionNumber.startsWith(PLUS_SIGN + NANP_IDD)) {returnNumber = networkPortionNumber.substring(1);} else {returnNumber = NANP_IDD + networkPortionNumber.substring(1);}}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");} else if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");} else {String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG) {Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));}if (nanpState == NP_NANP_LOCAL || nanpState == NP_NANP_AREA_LOCAL || nanpState == NP_NANP_NDD_AREA_LOCAL) {return networkPortionNumber;}if (nanpState != NP_NANP_NBPCD_CC_AREA_LOCAL) {if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == NP_NANP_LOCAL) {return networkPortionNumber;}if (networkType == 0) {return PLUS_SIGN + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);} else if (networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG) {Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));}String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == 0) {returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == 0 || networkType == NP_NANP_AREA_LOCAL) {returnNumber = NANP_IDD + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);break;}case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!(inExceptionListForNpCcAreaLocal(numberEntry) || networkPortionNumber.length() < NANP_LONG_LENGTH || countryCode == NP_NANP_LOCAL)) {returnNumber = NANP_IDD + networkPortionNumber;break;}default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL)) {if (!networkPortionNumber.startsWith(\"+011\")) {returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;}returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;} else if (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(NP_NANP_LOCAL);} else {return networkPortionNumber;}}}\n", "private static String getLineNumber(Finding finding) {String returnNumber = null;if (finding.getEntryPointLineNumber() != -1) {returnNumber = finding.getEntryPointLineNumber().toString();} else if (finding.getDataFlowElements() != null && !finding.getDataFlowElements().isEmpty()) {returnNumber = String.valueOf(finding.getDataFlowElements().get(0).getLineNumber());}return returnNumber;}\n", "public static final List itemReturnQuery(String itemName, int categoryId, int selectedReceiverType, int receiverId, int returnedStatus, String transferNumber, String returnNumber, Date fromDate, Date toDate) throws Exception {Criteria c = getSession().createCriteria(ItemReturn.class);c.add(Restrictions.eq(\"dFlag\", 1));c.createAlias(\"transfer\", \"nik\");c.createAlias(\"transfer.item\", \"it\");if (!StringUtils.isEmpty(transferNumber)) {c.add(Restrictions.eq(\"nik.transferPanaNumber\", transferNumber));}if (!StringUtils.isEmpty(returnNumber)) {c.add(Restrictions.eq(\"returnNumber\", returnNumber));}if (selectedReceiverType > 0) {c.add(Restrictions.eq(\"nik.transferType\", selectedReceiverType));}if (returnedStatus >= 0) {c.add(Restrictions.eq(\"nik.status\", returnedStatus));}if (receiverId > 0) {if (selectedReceiverType == Transfer.PERSONNAL) {c.createAlias(\"transfer.person\", \"per\");c.add(Restrictions.eq(\"per.id\", receiverId));} else if (selectedReceiverType == Transfer.OFFICIAL) {c.createAlias(\"transfer.branchOffice\", \"bro\");c.add(Restrictions.eq(\"bro.id\", receiverId));}}if (!StringUtils.isEmpty(itemName)) {c.add(Restrictions.ilike(\"it.name\", \"%\" + itemName.toLowerCase() + \"%\", MatchMode.ANYWHERE));}c.createAlias(\"it.category\", \"cat\");c.add(Restrictions.eq(\"cat.categoryType\", Category.TYPE_RETURNABLE));if (categoryId > 0) {c.add(Restrictions.eq(\"cat.id\", categoryId));}if (!DateTimeUtils.isEmpty(fromDate)) {c.add(Restrictions.ge(\"addedDate\", fromDate));}if (!DateTimeUtils.isEmpty(toDate)) {c.add(Restrictions.le(\"addedDate\", toDate));}return c.list();}\n", "public void setReturnNumber(String returnNumber) {this.returnNumber = returnNumber;}\n", "public String getReturnnumber() {return returnnumber;}\n", "public void setReturnnumber(String returnnumber) {this.returnnumber = returnnumber;}\n"]}
{"name": "HumanEval_144_simplify", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to implement a function that will simplify the expression\n    // x * n. The function returns true if x * n evaluates to a whole number and false\n    // otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    // You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n    // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n    public static boolean simplify(String x, String n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_144_simplify.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\")) == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_144_simplify", "test": "    }\n    public static void main(String[] args) {\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\")) == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n", "description": "Your task is to implement a function that will simplify the expression x * n. The function returns true if x * n evaluates to a whole number and false otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_78_hex_key", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    public static long hexKey(String num) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_78_hex_key.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_78_hex_key", "test": "    }\n    public static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n", "description": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase. Examples:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "private static Activity getActivityByView(@NonNull final View view) {Context context = view.getContext();while (context instanceof ContextWrapper) {if (context instanceof Activity) {return (Activity) context;}context = ((ContextWrapper) context).getBaseContext();}Log.e(\"BarUtils\", \"the view's Context is not an Activity.\");return null;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_143_words_in_sentence", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static String wordsInSentence(String sentence) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_143_words_in_sentence.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_143_words_in_sentence", "test": "    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n", "description": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Example 1:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "private ZipUtils() {throw new UnsupportedOperationException(\"u can't instantiate me...\");}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n"]}
{"name": "HumanEval_111_histogram", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string representing a space separated lowercase letters, return a hash map\n    // of the letter with the most repetition and containing the corresponding count.\n    // If several letters have the same occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n    public static HashMap<String,Long> histogram(String test) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_111_histogram.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_111_histogram", "test": "    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n", "description": "Given a string representing a space separated lowercase letters, return a hash map of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them. Example:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public Map<StorPool, Either<SpaceInfo, ApiRcException>> getAllSpaceInfo(boolean thin) {Map<StorPool, Either<SpaceInfo, ApiRcException>> spaceMap = new HashMap<>();Lock nodesMapReadLock = nodesMapLock.readLock();Lock storPoolDfnMapReadLock = storPoolDfnMapLock.readLock();try {nodesMapReadLock.lock();storPoolDfnMapReadLock.lock();for (StorPool storPool : controllerPeerConnector.getLocalNode().streamStorPools(apiCtx).collect(toList())) {if (storPool.getDeviceProviderKind().usesThinProvisioning() == thin) {spaceMap.put(storPool, getStoragePoolSpaceInfoOrError(storPool));}}} catch (AccessDeniedException exc) {errorReporter.reportError(new ImplementationError(exc));} finally {storPoolDfnMapReadLock.unlock();nodesMapReadLock.unlock();}return spaceMap;}\n", "public Map<StorPool, Either<SpaceInfo, ApiRcException>> getFreeSpaceOfAccessedStoagePools() throws AccessDeniedException {Map<StorPool, Either<SpaceInfo, ApiRcException>> spaceMap = new HashMap<>();Set<StorPool> changedStorPools = new HashSet<>();for (DeviceProvider deviceProvider : deviceProviderMapper.getDriverList()) {changedStorPools.addAll(deviceProvider.getChangedStorPools());}for (StorPool storPool : changedStorPools) {spaceMap.put(storPool, getStoragePoolSpaceInfoOrError(storPool));}return spaceMap;}\n"]}
{"name": "HumanEval_87_get_row", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a 2 dimensional data, as a nested array lists,\n    // which is similar to matrix, however, unlike matrices,\n    // each row may contain a different number of columns.\n    // Given lst, and integer x, find integers x in the array list,\n    // and return array list of pairs, [(x1, y1), (x2, y2) ...] such that\n    // each pair is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n    // >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l))\n    // (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))\n    // >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l))\n    // (new ArrayList<Pair<Long, Long>>(Arrays.asList()))\n    // >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l))\n    // (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))\n    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_87_get_row.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l), (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_87_get_row", "test": "    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l), (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));\n    }\n\n}\n", "description": "You are given a 2 dimensional data, as a nested array lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the array list, and return array list of pairs, [(x1, y1), (x2, y2) ...] such that each pair is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. Examples:", "codematcher_results": ["public static <T> T post(final String name, final Object... objects) {if (name == null || name.length() == 0)return null;Object o = injectShell(name, objects);if (NULL.equals(o)) {Log.e(\"BusUtils\", \"bus of <\" + name + \"> didn\\'t exist.\");return null;}return (T) o;}\n", "public static boolean setBrightness(@IntRange(from = 0, to = 255) final int brightness) {ContentResolver resolver = Utils.getApp().getContentResolver();boolean b = Settings.System.putInt(resolver, Settings.System.SCREEN_BRIGHTNESS, brightness);resolver.notifyChange(Settings.System.getUriFor(\"screen_brightness\"), null);return b;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static int setRedComponent(@ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int red) {return (color & 0xff00ffff) | (red << 16);}\n", "private static DisplayMetrics getMiuiTmpMetrics(Resources resources) {if (!isInitMiui) {DisplayMetrics ret = null;String simpleName = resources.getClass().getSimpleName();if (\"MiuiResources\".equals(simpleName) || \"XResources\".equals(simpleName)) {try {mTmpMetricsField = Resources.class.getDeclaredField(\"mTmpMetrics\");mTmpMetricsField.setAccessible(true);ret = (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {Log.e(\"AdaptScreenUtils\", \"no field of mTmpMetrics in resources.\");}}isInitMiui = true;return ret;}if (mTmpMetricsField == null)return null;try {return (DisplayMetrics) mTmpMetricsField.get(resources);} catch (Exception e) {return null;}}\n", "public static int setAlphaComponent(@ColorInt final int color, @IntRange(from = 0x0, to = 0xFF) int alpha) {return (color & 0x00ffffff) | (alpha << 24);}\n", "public static int setAlphaComponent(@ColorInt int color, @FloatRange(from = 0, to = 1) float alpha) {return (color & 0x00ffffff) | ((int) (alpha * 255.0f + 0.5f) << 24);}\n", "private DiskCacheManager getDiskCacheManager() {if (mCacheDir.exists()) {if (mDiskCacheManager == null) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);}} else {if (mCacheDir.mkdirs()) {mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);} else {Log.e(\"CacheDiskUtils\", \"can't make dirs in \" + mCacheDir.getAbsolutePath());}}return mDiskCacheManager;}\n", "public static void setWindowBrightness(@NonNull final Window window, @IntRange(from = 0, to = 255) final int brightness) {WindowManager.LayoutParams lp = window.getAttributes();lp.screenBrightness = brightness / 255f;window.setAttributes(lp);}\n", "private static String getForegroundProcessName() {ActivityManager am = (ActivityManager) Utils.getApp().getSystemService(Context.ACTIVITY_SERVICE);List<ActivityManager.RunningAppProcessInfo> pInfo = am.getRunningAppProcesses();if (pInfo != null && pInfo.size() > 0) {for (ActivityManager.RunningAppProcessInfo aInfo : pInfo) {if (aInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {return aInfo.processName;}}}if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.LOLLIPOP) {PackageManager pm = Utils.getApp().getPackageManager();Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);Log.i(\"ProcessUtils\", list.toString());if (list.size() <= 0) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: noun of access to usage information.\");return \"\";}try {ApplicationInfo info = pm.getApplicationInfo(Utils.getApp().getPackageName(), 0);AppOpsManager aom = (AppOpsManager) Utils.getApp().getSystemService(Context.APP_OPS_SERVICE);if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);Utils.getApp().startActivity(intent);}if (aom.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, info.uid, info.packageName) != AppOpsManager.MODE_ALLOWED) {Log.i(\"ProcessUtils\", \"getForegroundProcessName: refuse to device usage stats.\");return \"\";}UsageStatsManager usageStatsManager = (UsageStatsManager) Utils.getApp().getSystemService(Context.USAGE_STATS_SERVICE);List<UsageStats> usageStatsList = null;if (usageStatsManager != null) {long endTime = System.currentTimeMillis();long beginTime = endTime - 86400000 * 7;usageStatsList = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, beginTime, endTime);}if (usageStatsList == null || usageStatsList.isEmpty())return null;UsageStats recentStats = null;for (UsageStats usageStats : usageStatsList) {if (recentStats == null || usageStats.getLastTimeUsed() > recentStats.getLastTimeUsed()) {recentStats = usageStats;}}return recentStats == null ? null : recentStats.getPackageName();} catch (PackageManager.NameNotFoundException e) {e.printStackTrace();}}return \"\";}\n"]}
{"name": "HumanEval_123_get_odd_collatz", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return a sorted array list that has the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    // as follows: start with any positive integer n. Then each term is obtained from the \n    // previous term as follows: if the previous term is even, the next term is one half of \n    // the previous term. If the previous term is odd, the next term is 3 times the previous\n    // term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned array list sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))\n    public static ArrayList<Long> getOddCollatz(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_123_get_odd_collatz.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(getOddCollatz((14l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(getOddCollatz((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))));\n    assert(getOddCollatz((12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))));\n    assert(getOddCollatz((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_123_get_odd_collatz", "test": "    }\n    public static void main(String[] args) {\n    assert(getOddCollatz((14l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(getOddCollatz((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))));\n    assert(getOddCollatz((12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))));\n    assert(getOddCollatz((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    }\n\n}\n", "description": "Given a positive integer n, return a sorted array list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned array list sorted in increasing order. For example: get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_135_can_arrange", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given array array list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_135_can_arrange.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_135_can_arrange", "test": "    }\n    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n", "description": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array array list will not contain duplicate values. Examples:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_19_sort_numbers", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_19_sort_numbers.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_19_sort_numbers", "test": "    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n", "description": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest", "codematcher_results": ["protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {;File fileBufferedImage waterimg=null} //StringString message = \"\";String sort = \"\";FileOutputStream out = null;try {System.out.println(\"\u5f00\u59cb\u63a5\u53d7\u56fe\u7247\");DiskFileItemFactory factory = new DiskFileItemFactory();ServletFileUpload upload = new ServletFileUpload(factory);upload.setHeaderEncoding(\"UTF-8\");if (!ServletFileUpload.isMultipartContent(request)) {System.out.println(\"\u89e3\u6790\u51fa\u9519\");return;}List<FileItem> list = upload.parseRequest(request);for (FileItem item : list) {if (item.isFormField()) {String name = item.getFieldName();String value = item.getString(\"UTF-8\");sort = value;System.out.println(name + \"=\" + value);} else {String filename = item.getName();System.out.println(filename);System.out.println(sort);if (filename == null || filename.trim().equals(\"\")) {continue;};InputStream in = item.getInputStream();out = new FileOutputStream(new File(\"d:\\\\hahahha.txt\"));byte[] b = new byte[1024];while (in.read(b) != -1) {String msg = new String(new String(b));System.out.println(msg);out.write(b);};}in.close();item.delete();message = \"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\";}}} catch (Exception e) {message = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\";e.printStackTrace();} finally {if (out != null) {out.close();}}}\n", "private Map<String, String> getMap(final List<StringString> sample) {HashMap<String, String> map = new HashMap<String, String>();for (int i@ i = 0@ i < sample.size()++){map.put(sample.get(i).key, sample.get(i).value);}return (Map) map;}\n", "public Circle(// sets k, u, v, w by StringString coeffString, // sets k, u, v, w by StringString radXString, // sets k, u, v, w by StringString radYString, // sets k, u, v, w by StringString radZString) {HomogenousPolynomial coeff = new HomogenousPolynomial(coeffString);HomogenousVector radCoeffs = new HomogenousVector(radXString, radYString, radZString);if (coeff.equalsZero())throw new IllegalArgumentException(\"coefficient must be nonzero\");if (coeff.degree() + 2 != radCoeffs.degree())throw new IllegalArgumentException(\"degree of radical coefficients must be two more than degree of coefficient\");this.coeff = coeff;this.radCoeffs = radCoeffs;}\n", "void stringProviderMustReturnString() {class Extension implements DataExtension {;public Double method(UUID playerUUID) {return null;}}ExtensionExtractor underTest = new ExtensionExtractor(new Extension());assertEquals(\"Extension.method has invalid return type. was: java.lang.Double, expected: java.lang.String\", assertThrows(IllegalArgumentException.class, underTest::validateAnnotations).getMessage());}\n", "public ArrayList<StringString> getData(String dataName) {return getList(getDataMap(dataName));}\n", "private ArrayList<StringString> getList(final Map<String, String> sample) {ArrayList<StringString> StringString_sample = new ArrayList<StringString>();for (Map.Entry<String, String> x : sample.entrySet()) {StringString v = new StringString();v.key = x.getKey();v.value = x.getValue();StringString_sample.add(v);}return StringString_sample;}\n", "public void stringIsNull_shouldReturnEmptyString() {String string = null;string = StringUtil.notNullOrEmpty(string);assertThat(string).isEqualTo(\"\");}\n", "public static Transform<String, String> transform(List<String> transforms, Map<String, Transform<String, String>> stringToStringTransforms, Map<String, Transform<Object, String>> objectToStringTransforms, Map<String, Transform<String, Object>> stringToObjectTransforms, Map<String, Transform<Object, Object>> objectToObjectTransforms) throws ConfigurationException {int state = STRING_STATE;Transform<String, String> stringIdentity = (s) -> s;Transform<String, String> stringString = stringIdentity;Transform<String, Object> stringObject = null;for (String t : transforms) {String op = parseOperationNameFromTransform(t);Map<String, String> parameters = parseParametersFrom(t);switch(state) {case STRING_STATE:if (stringToStringTransforms.containsKey(op)) {Transform<String, String> transform = stringToStringTransforms.get(op);stringString = stringString.andThen(transform);} else if (stringToObjectTransforms.containsKey(op)) {Transform<String, Object> transform = stringToObjectTransforms.get(t);stringObject = stringString.andThen(transform);state = OBJECT_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from string state\");}break;case OBJECT_STATE:if (objectToObjectTransforms.containsKey(op)) {Transform<Object, Object> transform = objectToObjectTransforms.get(op);stringObject = transform.compose(stringObject);} else if (objectToStringTransforms.containsKey(op)) {Transform<Object, String> transform = objectToStringTransforms.get(op);stringString = stringObject.andThen(transform);state = STRING_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from obj state\");}break;}}return stringString;}\n", "' stringString readString(DataInputStream stream) throws IOException {String line = stream.readLine();if (line == null)return null;int len = Integer.parseInt(line);byte[] buffer = new byte[len];stream.readFully(buffer);return new String(buffer, StandardCharsets.ISO_8859_1);}\n", "HttpURLConnection conn = initHttp(url,if;String valueString = nullStringBuffer bufferRes =while ((valueString = read.readLine()) != null) {} in.close();} else { BufferedInputStream bis =String ds =String fullName =StringString suffix;att.setFileName(relName);} return att}public static String initParams(String url, Map<String, String> params) throws UnsupportedEncodingException {if (null == params || params.isEmpty()) {return url;}StringBuilder sb = new StringBuilder(url);if (url.indexOf(\"?\") == -1) {sb.append(\"?\");}sb.append(map2Url(params));return sb.toString();}\n"]}
{"name": "HumanEval_65_circular_shift", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    public static String circularShift(long x, long shift) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_65_circular_shift.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_65_circular_shift", "test": "    }\n    public static void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n", "description": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_142_sum_squares", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // \"\n    // This function will take an array array list of integers. For all entries in the array list, the function shall square the integer entry if its index is a \n    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    // change the entries in the array list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // (long)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))\n    // >>> lst\n    // (long)new ArrayList<Long>(Arrays.asList())\n    // >>> lst\n    // (long)new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l))\n    public static long sumSquares(ArrayList<Long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_142_sum_squares.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l)))) == (14l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))) == (9l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l)))) == (-3l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)0l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l)))) == (-126l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-56l, (long)-99l, (long)1l, (long)0l, (long)-2l)))) == (3030l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)-1l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-16l, (long)-9l, (long)-2l, (long)36l, (long)36l, (long)26l, (long)-20l, (long)25l, (long)-40l, (long)20l, (long)-4l, (long)12l, (long)-26l, (long)35l, (long)37l)))) == (-14196l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)17l, (long)-1l, (long)-15l, (long)13l, (long)-1l, (long)14l, (long)-14l, (long)-12l, (long)-5l, (long)14l, (long)-14l, (long)6l, (long)13l, (long)11l, (long)16l, (long)16l, (long)4l, (long)10l)))) == (-1448l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_142_sum_squares", "test": "    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l)))) == (14l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))) == (9l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l)))) == (-3l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)0l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l)))) == (-126l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-56l, (long)-99l, (long)1l, (long)0l, (long)-2l)))) == (3030l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)-1l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-16l, (long)-9l, (long)-2l, (long)36l, (long)36l, (long)26l, (long)-20l, (long)25l, (long)-40l, (long)20l, (long)-4l, (long)12l, (long)-26l, (long)35l, (long)37l)))) == (-14196l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)17l, (long)-1l, (long)-15l, (long)13l, (long)-1l, (long)14l, (long)-14l, (long)-12l, (long)-5l, (long)14l, (long)-14l, (long)6l, (long)13l, (long)11l, (long)16l, (long)16l, (long)4l, (long)10l)))) == (-1448l));\n    }\n\n}\n", "description": "\" This function will take an array array list of integers. For all entries in the array list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the array list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. Examples:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_94_skjkasdkd", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array array list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l))))\n    // (10l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l))))\n    // (25l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l))))\n    // (13l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l))))\n    // (11l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l))))\n    // (3l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l))))\n    // (7l)\n    public static long skjkasdkd(ArrayList<Long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_94_skjkasdkd.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l)))) == (10l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l)))) == (25l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l)))) == (13l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l)))) == (11l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l)))) == (3l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l)))) == (7l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l, (long)123456l, (long)127l, (long)7l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)127l, (long)97l, (long)8192l)))) == (10l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_94_skjkasdkd", "test": "    }\n    public static void main(String[] args) {\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l)))) == (10l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l)))) == (25l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l)))) == (13l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l)))) == (11l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l)))) == (3l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l)))) == (7l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l, (long)123456l, (long)127l, (long)7l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)127l, (long)97l, (long)8192l)))) == (10l));\n    }\n\n}\n", "description": "You are given an array array list of integers. You need to find the largest prime value and return the sum of its digits. Examples:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public ArrayListOfIntegers(ArrayList<Integer> items) {this.items = items;}\n"]}
{"name": "HumanEval_8_sum_product", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given array list of integers, return a pair consisting of a sum and a product of all the integers in an array array list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((new ArrayList<Long>(Arrays.asList())))\n    // (Pair.with(0l, 1l))\n    // >>> sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (Pair.with(10l, 24l))\n    public static Pair<Long, Long> sumProduct(ArrayList<Long> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_8_sum_product.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList()))).equals((Pair.with(0l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))).equals((Pair.with(3l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)100l, (long)0l)))).equals((Pair.with(100l, 0l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))).equals((Pair.with(15l, 105l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)10l)))).equals((Pair.with(10l, 10l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_8_sum_product", "test": "    }\n    public static void main(String[] args) {\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList()))).equals((Pair.with(0l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))).equals((Pair.with(3l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)100l, (long)0l)))).equals((Pair.with(100l, 0l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))).equals((Pair.with(15l, 105l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)10l)))).equals((Pair.with(10l, 10l))));\n    }\n\n}\n", "description": "For a given array list of integers, return a pair consisting of a sum and a product of all the integers in an array array list. Empty sum should be equal to 0 and empty product should be equal to 1.", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_102_choose_num", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long x, long y) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_102_choose_num.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_102_choose_num", "test": "    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n", "description": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1. For example:", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_136_largest_smallest_integers", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that returns a pair (a, b), where 'a' is\n    // the largest of negative integers, and 'b' is the smallest\n    // of positive integers in an array array list.\n    // If there is no negative or positive integers, return them as null.\n    // Examples:\n    // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l))))\n    // Pair.with(Optional.of(Optional.empty()), Optional.of(1l))\n    // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList())))\n    // Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l))))\n    // Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_136_largest_smallest_integers.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Optional.of(Pair.with(-2l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Optional.of(Pair.with(-7l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Optional.of(Pair.with(-9l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_136_largest_smallest_integers", "test": "    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Optional.of(Pair.with(-2l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Optional.of(Pair.with(-7l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Optional.of(Pair.with(-9l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    }\n\n}\n", "description": "Create a function that returns a pair (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in an array array list. If there is no negative or positive integers, return them as null. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_16_count_distinct_characters", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n    public static long countDistinctCharacters(String string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_16_count_distinct_characters.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_16_count_distinct_characters", "test": "    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n", "description": "Given a string, find out how many distinct characters (regardless of case) does it consist of", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_100_make_a_pile", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in an array array list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))\n    public static ArrayList<Long> makeAPile(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_100_make_a_pile.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(makeAPile((3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))));\n    assert(makeAPile((4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)10l)))));\n    assert(makeAPile((5l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)11l, (long)13l)))));\n    assert(makeAPile((6l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)16l)))));\n    assert(makeAPile((8l)).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)10l, (long)12l, (long)14l, (long)16l, (long)18l, (long)20l, (long)22l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_100_make_a_pile", "test": "    }\n    public static void main(String[] args) {\n    assert(makeAPile((3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))));\n    assert(makeAPile((4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)10l)))));\n    assert(makeAPile((5l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)11l, (long)13l)))));\n    assert(makeAPile((6l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)16l)))));\n    assert(makeAPile((8l)).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)10l, (long)12l, (long)14l, (long)16l, (long)18l, (long)20l, (long)22l)))));\n    }\n\n}\n", "description": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in an array array list, where element at index i represents the number of stones in the level (i+1). Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n"]}
{"name": "HumanEval_128_prod_signs", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array array list arr of integers and you need to return\n    // sum of magnitudes of integers multiplied by product of all signs\n    // of each number in the array array list, represented by 1, -1 or 0.\n    // Note: return null for empty arr.\n    // Example:\n    // >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l))))\n    // Optional.of(9l)\n    // >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l))))\n    // Optional.of(0l)\n    // >>> prodSigns((new ArrayList<Long>(Arrays.asList())))\n    // Optional.empty()\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_128_prod_signs.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l, (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_128_prod_signs", "test": "    }\n    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l, (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n    }\n\n}\n", "description": "You are given an array array list arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array array list, represented by 1, -1 or 0. Note: return null for empty arr. Example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_114_minSubArraySum", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of integers nums, find the minimum sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n    public static long minSubArraySum(ArrayList<Long> nums) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_114_minSubArraySum.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l, (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l, (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l)))) == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l)))) == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l)))) == (-1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_114_minSubArraySum", "test": "    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l, (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l, (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l)))) == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l)))) == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l)))) == (-1l));\n    }\n\n}\n", "description": "Given an array array list of integers nums, find the minimum sum of any non-empty sub-array array list of nums. Example", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_15_string_sequence", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static String stringSequence(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_15_string_sequence.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_15_string_sequence", "test": "    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n", "description": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.", "codematcher_results": ["public String toString() {return \"ImageEntity{\" + \"col='\" + col + '\\'' + \", tag='\" + tag + '\\'' + \", tag3='\" + tag3 + '\\'' + \", sort='\" + sort + '\\'' + \", totalNum=\" + totalNum + \", startIndex=\" + startIndex + \", returnNumber=\" + returnNumber + \", imgs=\" + imgs + '}';}\n", "private void injectJS(WebView webView) {if (legacyMode) {injectJSOld(webView);return;}try {webView.loadUrl(\"javascript:\" + \"var linksLength = document.head.getElementsByTagName('link').length\" + \"for(var i=0i<linksLengthi++){document.head.getElementsByTagName('link')[0].remove()}\" + \"var isInGame = false\" + \"var isVerified = false\" + \"function isSmashing(returnNumber){if(isInGame){if(isVerified){return 'gv'+returnNumber}else{return 'g'+returnNumber}}return returnNumber}\" + \"function takeNextStep(gamePin,name,answer,returnVal,verify){if($('#inputSession').length==1){isVerified=falseisInGame=false$('#inputSession').val(gamePin)$('#inputSession').trigger('change')setTimeout(function(){$('#inputSession').submit()},10)}else if($('#username').length == 1){isInGame = true$('#username').val(name)$('#username').trigger('change')setTimeout(function(){$('#username').submit()},10)}else if($('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--0').length!=0){isVerified=falseif(verify==''){return 'v'+returnVal}else if($('.two-factor-auth__sub-heading.ng-binding').html() != 'Match the pattern on screen'){return 'i'+returnVal}else{for(var i=0i<4i++){$('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--' + verify[i]).mousedown()}}} else if($('.answer').length!=0){isVerified=true$('.answer.answer'+answer).mousedown()}else{isVerified=true}return 'n'+returnVal}\");} catch (Exception e) {e.printStackTrace();}}\n", "void capturePoint(Vector3D beamOrigin, Vector3D beamDir, double distance, double intensity, double echo_width, int returnNumber, int pulseReturnNumber, int fullwaveIndex, String hitObjectId, int classification) {if (distance < detector.cfg_device_rangeMin_m) {return;}double precision = this.detector.cfg_device_accuracy_m / 2;double error = -precision + Math.random() * (precision * 2);error += boxMullerRandom(0.0, this.detector.cfg_device_accuracy_m / 2);distance += error;Vector3D pointPos = beamOrigin.add(beamDir.scalarMultiply(distance));Measurement m = new Measurement();m.position = pointPos;m.distance = distance;m.intensity = intensity;m.echo_width = echo_width;m.returnNumber = returnNumber;m.pulseReturnNumber = pulseReturnNumber;m.fullwaveIndex = fullwaveIndex;m.beamOrigin = beamOrigin;m.beamDirection = beamDir;m.hitObjectId = hitObjectId;m.classification = classification;detector.writeMeasurement(m);detector.mBuffer.add(m);}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");}if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");}String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG)Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));if ((nanpState == NP_NANP_LOCAL) || (nanpState == NP_NANP_AREA_LOCAL) || (nanpState == NP_NANP_NDD_AREA_LOCAL)) {return networkPortionNumber;} else if (nanpState == NP_NANP_NBPCD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK) {return networkPortionNumber.substring(1);} else {return networkPortionNumber;}} else if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK) {return networkPortionNumber;} else if (networkType == GSM_UMTS_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return PLUS_SIGN + networkPortionNumber.substring(iddLength);} else if (networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return networkPortionNumber.substring(iddLength);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG)Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK) {returnNumber = networkPortionNumber.substring(1);}break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(1);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK || networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;returnNumber = NANP_IDD + networkPortionNumber.substring(iddLength);}break;case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!inExceptionListForNpCcAreaLocal(numberEntry) && networkPortionNumber.length() >= 11 && countryCode != NANP_CC) {returnNumber = NANP_IDD + networkPortionNumber;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK)) {if (networkPortionNumber.startsWith(PLUS_SIGN + NANP_IDD)) {returnNumber = networkPortionNumber.substring(1);} else {returnNumber = NANP_IDD + networkPortionNumber.substring(1);}}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");} else if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");} else {String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG) {Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));}if (nanpState == NP_NANP_LOCAL || nanpState == NP_NANP_AREA_LOCAL || nanpState == NP_NANP_NDD_AREA_LOCAL) {return networkPortionNumber;}if (nanpState != NP_NANP_NBPCD_CC_AREA_LOCAL) {if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == NP_NANP_LOCAL) {return networkPortionNumber;}if (networkType == 0) {return PLUS_SIGN + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);} else if (networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG) {Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));}String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == 0) {returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == 0 || networkType == NP_NANP_AREA_LOCAL) {returnNumber = NANP_IDD + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);break;}case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!(inExceptionListForNpCcAreaLocal(numberEntry) || networkPortionNumber.length() < NANP_LONG_LENGTH || countryCode == NP_NANP_LOCAL)) {returnNumber = NANP_IDD + networkPortionNumber;break;}default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL)) {if (!networkPortionNumber.startsWith(\"+011\")) {returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;}returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;} else if (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(NP_NANP_LOCAL);} else {return networkPortionNumber;}}}\n", "private static String getLineNumber(Finding finding) {String returnNumber = null;if (finding.getEntryPointLineNumber() != -1) {returnNumber = finding.getEntryPointLineNumber().toString();} else if (finding.getDataFlowElements() != null && !finding.getDataFlowElements().isEmpty()) {returnNumber = String.valueOf(finding.getDataFlowElements().get(0).getLineNumber());}return returnNumber;}\n", "public static final List itemReturnQuery(String itemName, int categoryId, int selectedReceiverType, int receiverId, int returnedStatus, String transferNumber, String returnNumber, Date fromDate, Date toDate) throws Exception {Criteria c = getSession().createCriteria(ItemReturn.class);c.add(Restrictions.eq(\"dFlag\", 1));c.createAlias(\"transfer\", \"nik\");c.createAlias(\"transfer.item\", \"it\");if (!StringUtils.isEmpty(transferNumber)) {c.add(Restrictions.eq(\"nik.transferPanaNumber\", transferNumber));}if (!StringUtils.isEmpty(returnNumber)) {c.add(Restrictions.eq(\"returnNumber\", returnNumber));}if (selectedReceiverType > 0) {c.add(Restrictions.eq(\"nik.transferType\", selectedReceiverType));}if (returnedStatus >= 0) {c.add(Restrictions.eq(\"nik.status\", returnedStatus));}if (receiverId > 0) {if (selectedReceiverType == Transfer.PERSONNAL) {c.createAlias(\"transfer.person\", \"per\");c.add(Restrictions.eq(\"per.id\", receiverId));} else if (selectedReceiverType == Transfer.OFFICIAL) {c.createAlias(\"transfer.branchOffice\", \"bro\");c.add(Restrictions.eq(\"bro.id\", receiverId));}}if (!StringUtils.isEmpty(itemName)) {c.add(Restrictions.ilike(\"it.name\", \"%\" + itemName.toLowerCase() + \"%\", MatchMode.ANYWHERE));}c.createAlias(\"it.category\", \"cat\");c.add(Restrictions.eq(\"cat.categoryType\", Category.TYPE_RETURNABLE));if (categoryId > 0) {c.add(Restrictions.eq(\"cat.id\", categoryId));}if (!DateTimeUtils.isEmpty(fromDate)) {c.add(Restrictions.ge(\"addedDate\", fromDate));}if (!DateTimeUtils.isEmpty(toDate)) {c.add(Restrictions.le(\"addedDate\", toDate));}return c.list();}\n", "public void setReturnNumber(String returnNumber) {this.returnNumber = returnNumber;}\n", "public String getReturnnumber() {return returnnumber;}\n", "public void setReturnnumber(String returnnumber) {this.returnnumber = returnnumber;}\n"]}
{"name": "HumanEval_154_cycpattern_check", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    // >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    // (false)\n    // >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    // (true)\n    // >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    // (false)\n    // >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n    // >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    public static boolean cycpatternCheck(String a, String b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_154_cycpattern_check.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_154_cycpattern_check", "test": "    }\n    public static void main(String[] args) {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n", "description": "You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word", "codematcher_results": ["public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static String buildHtml(String data, boolean isNightModel) {String backgroundColor;String fontColor;if (isNightModel) {backgroundColor = \"#49505A\";fontColor = \"#ADB4BE\";} else {backgroundColor = \"#FFFFFF\";fontColor = \"#353C46\";}String dat1 = \"<!DOCTYPE html>\" + \"<html lang=\\\"en\\\">\" + \"<head>\" + \" <meta charset=\\\"UTF-8\\\">\" + \" <title>Title</title>\" + \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\\\">\" + \"<style type=\\\"text/css\\\">\" + \"body\" + \"{\" + \"background: \" + backgroundColor + \" no-repeat fixed center\" + \"color: \" + fontColor + \"}\" + \"</style>\" + \"</head>\" + \"<body>\" + \"<div id=\\\"app\\\" style=\\\"width:100%height:100%word-wrap: break-wordword-break:break-all\\\">\";String dat2 = \"</div>\" + \"\" + \"</body>\" + \"</html>\";return dat1 + data + dat2;}\n", "private PriorityQueue<RFTerm> createQueue(String fieldName, Map<String, Flt> words, boolean contentStreamQuery) throws IOException {int numDocs = ir.numDocs();FreqQ res = new FreqQ(words.size());for (String word : words.keySet()) {if (word.trim().length() == 0) {continue;}float tf = words.get(word).x;if (minTermFreq > 0 && tf < minTermFreq) {continue;}int docFreq = ir.docFreq(new Term(fieldName, word));if (minDocFreq > 0 && docFreq < minDocFreq) {continue;}if (docFreq > maxDocFreq) {continue;}float idf = similarity.idf(docFreq, numDocs);final float fieldBoost = contentStreamQuery ? this.getStreamFieldBoost(fieldName) : this.getFieldBoost(fieldName);final RFTerm RFTerm;if (isPayloadField(fieldName)) {RFTerm = new RFTerm(// the wordword, // the field namefieldName, // tftf, // idfidf, // freq in all docsdocFreq, isLogTf(), fieldBoost, // this is the payload score if a payload field. Code could better reflect this admittedlytf, this.boost, true);} else {RFTerm = new RFTerm(// the wordword, // the field namefieldName, // tftf, // idfidf, // freq in all docsdocFreq, this.isLogTf(), fieldBoost, this.boost);}res.insertWithOverflow(RFTerm);}return res;}\n", "public String parseHtml4Edit(String widgeType, StringBuilder sb, ExcelTable table, ExcelTableTd td) throws Exception {double width = td.getWidthNum();double height = td.getHeightNum();String tagId = getTagId(table, WIDGE_NAME);String textAlign = td.getTextAlign();String fontStyle = getFontStyle(td);if (isCur(widgeType)) {validate(widgeType);int length = 12;width = width - 2 - 2;Map<String, String> attrs = WidgeUtils.parseAttr(widgeType);String format = attrs.get(\"format\") != null ? attrs.get(\"format\") : \"\";String auth = attrs.get(\"auth\") != null ? attrs.get(\"auth\").toLowerCase() : \"\";if (\"\".equals(format)) {format = \"yyyy\u5e74MM\u6708dd\u65e5\";}sb.append(String.format(\"<div style='width: %spxheight: %spxborder: 1px solid #cccoverflow: hidden'>\" + \"<div id='%s' name='%s' widgeType='%s' isTextarea='true' contenteditable='false' showmenu='true' auth='%s' style='width: %spxheight: %spxdisplay: table-cell\" + \"text-align:%svertical-align: middlebackground-color:%sword-wrap: break-wordword-break: break-all%s' onclick=\\\"WdatePicker({dateFmt:'%s'})\\\" oninput='changeEvent(this)' onpropertychange='changeEvent(this)' onfocus='toolBarFocusEvent(this)' onblur='toolBarFocusEvent(this)' size='%s'></div></div>\", width, height, tagId, tagId, WIDGE_NAME, auth, width, height, textAlign, ExcelConstant.WIDGET_BACKGROUND_COLOR, fontStyle, format, length / 2));return WIDGE_NAME;}return \"\";}\n", "public String parseHtml4Edit(String widgeType, StringBuilder sb, ExcelTable table, ExcelTableTd td) throws Exception {double width = td.getWidthNum();double height = td.getHeightNum();String tagId = getTagId(table, WIDGE_NAME);String textAlign = td.getTextAlign();String fontStyle = getFontStyle(td);if (isCur(widgeType)) {validate(widgeType);Map<String, String> attrs = WidgeUtils.parseAttr(widgeType);int length = 0;width = width - 2 - 2;String exps = attrs.get(\"exps\").toLowerCase();String format = attrs.get(\"format\") != null ? attrs.get(\"format\").toLowerCase() : \"\";String prec = attrs.get(\"prec\") != null ? attrs.get(\"prec\") : \"\";String rigor = attrs.get(\"rigor\") != null ? attrs.get(\"rigor\") : \"\";display:inline-blockwhite-space:nowrap;sb.append(String.format(\"<div style='width: %spxheight: %spxborder: 1px solid #cccoverflow: hidden'>\" + \"<div id='%s' name='%s' widgeType='%s' isTextarea='true' contenteditable='false' showmenu='true' exps='%s' format='%s' prec='%s' rigor='%s' style='width: %spxheight: %spxdisplay: table-cell\" + \"text-align:%svertical-align: middleword-wrap: break-wordword-break: break-allbackground-color:%s%s'size='%s'></div></div>\", width, height, tagId, tagId, WIDGE_NAME, exps, format, prec, rigor, width, height, textAlign, ExcelConstant.WIDGET_BACKGROUND_COLOR, fontStyle, length / 2));return WIDGE_NAME;}return \"\";}\n", "public String parseHtml4View(String widgeType, StringBuilder sb, ExcelTable table, ExcelTableTd td) throws Exception {double width = td.getWidthNum();double height = td.getHeightNum();String tagId = getTagId(table, WIDGE_NAME);String textAlign = td.getTextAlign();String fontStyle = getFontStyle(td);if (isCur(widgeType)) {validate(widgeType);Map<String, String> attrs = WidgeUtils.parseAttr(widgeType);int length = 0;width = width - 2 - 2;String exps = attrs.get(\"exps\");String format = attrs.get(\"format\");String prec = attrs.get(\"prec\") != null ? attrs.get(\"prec\") : \"\";String rigor = attrs.get(\"rigor\") != null ? attrs.get(\"rigor\") : \"\";sb.append(String.format(\"<div style='width: %spxheight: %spxborder: 0px solid #cccoverflow: hidden'>\" + \"<div id='%s' name='%s' widgeType='%s' isTextarea='true' contenteditable='false' showmenu='true' exps='%s' format='%s' prec='%s' rigor='%s' style='width: %spxheight: %spxdisplay: table-cell\" + \"text-align:%svertical-align: middleword-wrap: break-wordword-break: break-all%s'size='%s'></div></div>\", width, height, tagId, tagId, WIDGE_NAME, exps, format, prec, rigor, width, height, textAlign, fontStyle, length / 2));return WIDGE_NAME;}return \"\";}\n", "public String parseHtml4View(String widgeType, StringBuilder sb, ExcelTable table, ExcelTableTd td) throws Exception {double width = td.getWidthNum();double height = td.getHeightNum();String tagId = getTagId(table, WIDGE_NAME);String textAlign = td.getTextAlign();String fontStyle = getFontStyle(td);if (isCur(widgeType)) {validate(widgeType);int length = 12;Map<String, String> attrs = WidgeUtils.parseAttr(widgeType);String auth = attrs.get(\"auth\") != null ? attrs.get(\"auth\") : \"\";width = width - 2 - 2;sb.append(String.format(\"<div style='width: %spxheight: %spxborder: 0px solid #cccoverflow: hidden'>\" + \"<div id='%s' name='%s' widgeType='%s' isTextarea='false' contenteditable='false' showmenu='true' auth='%s' style='width: %spxheight: %spxdisplay: table-cell\" + \"text-align:%svertical-align: middleword-wrap: break-wordword-break: break-all%s' size='%s'></div></div>\", width, height, tagId, tagId, WIDGE_NAME, auth, width, height, textAlign, fontStyle, length / 2));return WIDGE_NAME;}return \"\";}\n"]}
{"name": "HumanEval_57_monotonic", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return true is array list elements are monotonically increasing or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_57_monotonic.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_57_monotonic", "test": "    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n", "description": "Return true is array list elements are monotonically increasing or decreasing.", "codematcher_results": ["public static void main(String[] a) {final CountDownLatch firstLatch = new CountDownLatch(1);final CountDownLatch secondLatch = new CountDownLatch(1);final BuildFactory.Builder builder = new BuildFactory.Builder();CopyOnWriteArrayList<BuildFactory> elements = new CopyOnWriteArrayList<>();elements.add(builder.name(\"myth\").addr(\"local\").build());elements.add(builder.name(\"roll\").addr(\"remote\").build());ReentrantLock lock = new ReentrantLock();ElementList<BuildFactory> list = new ElementList<>(elements, lock, \"list1 > \");ElementList<BuildFactory> list2 = new ElementList<>(elements, lock, \"list2 > \");Thread thread1 = new Thread(() -> {System.out.println(\"\u8fdb\u5165 \u7ebf\u7a0b 1\");elements.add(builder.name(\"dyn 1\").addr(\"89\").build());list.prep();firstLatch.countDown();try {secondLatch.await();} catch (InterruptedException e) {System.out.println(\"first inter error\");}list.listElement(\"first \");});Thread thread2 = new Thread(() -> {System.out.println(\"\u8fdb\u5165 \u7ebf\u7a0b 2\");try {Thread.sleep(2000);firstLatch.await();elements.add(builder.name(\"dyn 2\").addr(\"00\").build());list2.prep();secondLatch.countDown();} catch (InterruptedException e) {System.out.println(\"second inter error\");}list2.listElement(\"second\");});thread1.start();thread2.start();}\n", "public static ListElement list(InlineElement... elements) {return new ListElement(Arrays.asList(elements));}\n", "public List() {start = new ListElement(\"Kopf\");}\n", "public List<RuleOutput> sort(List<RuleOutput> matchedResults) {if (matchedResults == null || matchedResults.isEmpty()) {return matchedResults;}Object listElement = ((InterpretedRuleOutput) matchedResults.get(0)).getResult();if (listElement instanceof Pair) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) interpretedRule.getResult());});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, decisionPairs.get(i)));}return (List) newList;} else if (listElement instanceof Context) {Context skeleton = (Context) listElement;List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, new Context()));}for (Object key : skeleton.keySet()) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) ((Context) interpretedRule.getResult()).get(key));});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());for (int i@ i = 0@ i < decisionPairs.size()++){((Context) newList.get(i).getResult()).put(key, decisionPairs.get(i));}}return (List) newList;} else {return matchedResults;}}\n", "public static GirlListModel parse(Element listElement, int type) {GirlListModel listModel = new GirlListModel(type);if (listElement != null) {Elements girlElements = listElement.children();for (Element girlElement : girlElements) {GirlModel girlModel = GirlModel.parse(girlElement, type);listModel.getList().add(girlModel);}}Logger.log(\"GirlListModel parse... \" + listModel.getList().size());return listModel;}\n", "public static PicListModel parse(Element listElement) throws Exception {PicListModel picListModel = new PicListModel();if (listElement != null) {for (Element picElement : listElement.children()) {PicModel picModel = PicModel.parse(picElement);picListModel.getList().add(picModel);}}return picListModel;}\n", "public void addDir(File target) {if (target == null) {return;}File setDir = target.getParentFile();if (target.isDirectory()) {setDir = target;}for (File listElement : searchTargetList) {if (setDir.getPath().equals(listElement.getPath())) {return;}}searchTargetList.add(setDir);searchTargetMap = null;mibValueCache = new MibValueCache();}\n", "public void delete(int n) {if (n < 1) {return;}ListElement nth = findIndex(n);if (nth == null) {return;}ListElement pre = findIndex(n - 1);pre.next = nth.next;}\n", "public void format(ListElement element) {String[] inlineElements = element.getEntries().stream().map(el -> {Formatter formatter = newInstance();el.format(formatter);return formatter.finalizeFormatting();}).toArray(String[]::new);formatList(state, inlineElements);}\n", "public void returnAListOfElementsByClassName() {List<WebElement> elements;elements = driver.findElements(By.className(\"normal\"));Set<String> foundTags = new HashSet<String>();for (WebElement e : elements) {foundTags.add(e.getTagName().toLowerCase());}assertTrue(\"expected p tag\", foundTags.contains(\"p\"));assertTrue(\"expected ul tag\", foundTags.contains(\"ul\"));assertTrue(\"expected li tag\", foundTags.contains(\"li\"));assertTrue(\"expected a tag\", foundTags.contains(\"a\"));assertFalse(\"did not expect div tag\", foundTags.contains(\"div\"));}\n"]}
{"name": "HumanEval_12_longest", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Out of array list of strings, return the longest one. Return the first one in case of multiple\n    // strings of the same length. Return null in case the input array list is empty.\n    // >>> longest((new ArrayList<String>(Arrays.asList())))\n    // Optional.empty()\n    // >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    // Optional.of(\"a\")\n    // >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"bb\", (String)\"ccc\"))))\n    // Optional.of(\"ccc\")\n    public static Optional<String> longest(ArrayList<String> strings) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_12_longest.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_12_longest", "test": "    }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n", "description": "Out of array list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return null in case the input array list is empty.", "codematcher_results": ["public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public void listToSqlStringReturnsEmptyStringIfPassedEmptyList() {String expected = \"\";String actual = SqlStringHelpers.listToSQLString(new ArrayList<>());assertThat(actual, is(expected));}\n", "public static ObjectArrayList<String> listOfWordsToWordsStringList(ObjectArrayList<IndexedWord> words) {ObjectArrayList<String> stWords = new ObjectArrayList<String>();for (int i@ i = 0@ i < words.size()++){stWords.add(words.get(i).word());}return stWords;}\n", "public static ObjectArrayList<String> listOfWordsToLemmasStringList(ObjectArrayList<IndexedWord> words) {ObjectArrayList<String> stWords = new ObjectArrayList<String>();for (int i@ i = 0@ i < words.size()++){stWords.add(words.get(i).lemma());}return stWords;}\n", "public ListAttributeStringListFilter(String attributeName, List<String> valueList, String label, String itemLabel) {super(label);setAttribute(new MockSingularAttribute<>(attributeName));keyPrefix = itemLabel;this.valueList = valueList;this.attributeName = attributeName;setOperands(Operands.getEnumOperands());setOperand(FilterOperand.All);}\n", "public static ObjectArrayList<String> listOfCoreMapWordsToLemmaStringList(List<CoreMap> cmList) {CoreLabel cl;ObjectArrayList<String> lemmaList = new ObjectArrayList<>();for (CoreMap cm : cmList) {cl = new CoreLabel(cm);lemmaList.add(cl.lemma().toLowerCase());}return lemmaList;}\n", "public void listToSqlStringWithPopulatedListReturnsCommaSeparatedStrings() {List<String> listOfStrings = ImmutableList.of(\"a\", \"b\", \"c\");String expected = \"'a', 'b', 'c'\";String actual = SqlStringHelpers.listToSQLString(listOfStrings);assertThat(actual, is(expected));}\n", "public void listToSqlStringWithSingleElementInListReturnsSingleQuotesNoCommas() {List<String> singleStringList = ImmutableList.of(\"a\");String expected = \"'a'\";String actual = SqlStringHelpers.listToSQLString(singleStringList);assertThat(actual, is(expected));}\n"]}
{"name": "HumanEval_52_below_threshold", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return true if all numbers in the array list l are below threshold t.\n    // >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l))\n    // (true)\n    // >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l))\n    // (false)\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_52_below_threshold.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l)) == (false));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (21l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (22l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (11l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (10l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_52_below_threshold", "test": "    }\n    public static void main(String[] args) {\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l)) == (false));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (21l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (22l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (11l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (10l)) == (false));\n    }\n\n}\n", "description": "Return true if all numbers in the array list l are below threshold t.", "codematcher_results": ["private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n", "private void add(Delete base, TransactionResult result) {if (result == null) {throw new InvalidUsageException(\"the record to be deleted must be existing \" + \"and read beforehand\");}Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.DELETED));values.add(Attribute.toPreparedAtValue(current));values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_75_is_multiply_prime", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long a) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_75_is_multiply_prime.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_75_is_multiply_prime", "test": "    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n", "description": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100. Example:", "codematcher_results": ["protected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.activity_example);Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);setSupportActionBar(toolbar);final FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);final TextView functionNumber = (TextView) findViewById(R.id.functions_number);final Spinner themeSpinner = (Spinner) findViewById(R.id.theme_spinner);ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.debugkit_themes, android.R.layout.simple_spinner_item);adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);themeSpinner.setAdapter(adapter);themeSpinner.setOnItemSelectedListener(this);mSeekbar = (SeekBar) findViewById(R.id.seekBar);mSeekbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {;public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {functionNumber.setText(Integer.toString(progress));};public void onStartTrackingTouch(SeekBar seekBar) {};public void onStopTrackingTouch(SeekBar seekBar) {}});functionNumber.setText(Integer.toString(mSeekbar.getProgress()));fab.setOnClickListener(new View.OnClickListener() {;public void onClick(View v) {final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);if (mSeekbar != null) {for (int i@ i = 0@ i < mSeekbar.getProgress()++){builder.addFunction(doSomeStuff());}}builder.setTextSize(mTextSize).setTheme(mTheme).build();}});final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);builder.addFunction(new DebugFunction(\"Do some stuff\") {;public String call() throws Exception {return \"This function has a title\";}}).addFunction(new DebugFunction.Clear(\"Clear\")).addFunction(new DebugFunction(\"Make ShPrf\") {;public String call() throws Exception {SharedPreferences.Editor editor = ExampleActivity.this.getSharedPreferences(PREFS_FILE_NAME, Context.MODE_PRIVATE).edit();editor.putString(\"UpdatedAt\", new Date(System.currentTimeMillis()).toString());editor.putBoolean(\"Key 1\", true);editor.putString(\"Key 2\", \"value\");editor.putString(\"Key 3\", \"value 2\");editor.apply();return \"Preferences file has been created.\";}}).addFunction(new DebugFunction.DumpSharedPreferences(\"Shared prefs\", PREFS_FILE_NAME));builder.setTextSize(mTextSize).displayAt(50, 200).setTheme(mTheme).build();}\n", "public String toString() {return \"FileMeasures [functionNumber=\" + functionNumber + \", contractNumber=\" + contractNumber + \", statementNumber=\" + statementNumber + \", contractComplexity=\" + contractComplexity + \", functionComplexity=\" + functionComplexity + \", fileComplexity=\" + fileComplexity + \", fileCognitiveComplexity=\" + fileCognitiveComplexity + \", linesOfCodeNumber=\" + linesOfCodeNumber + \", commentLinesNumber=\" + commentLinesNumber + \"]\";}\n", "public PlayerInputs(int functionNumber) {mInputs = new CopyOnWriteArrayList<Object>();mFunctionNumber = functionNumber;mFinishedNumber = new AtomicInteger();}\n", "public PlayerInputs(List<Object> list, int functionNumber) {if (list instanceof CopyOnWriteArrayList<?>) {mInputs = (CopyOnWriteArrayList<Object>) list;} else {mInputs = new CopyOnWriteArrayList<Object>(list);}mFunctionNumber = functionNumber;mFinishedNumber = new AtomicInteger();}\n", "public OrderStateMap(int stateId, String stateTitle, String stateDesc, String stateTime, String stateIcon, String functionNumber, String phoneNumType) {this.stateId = stateId;this.stateTitle = stateTitle;this.stateDesc = stateDesc;this.stateTime = stateTime;this.stateIcon = stateIcon;this.functionNumber = functionNumber;this.phoneNumType = phoneNumType;}\n", "private static void createFacetBase(ComponentFacet cf, int level, MtasDataCollector<?, ?> dataCollector, Map<Integer, Integer> positionsData, Map<MtasSpanQuery, Map<Integer, Integer>> spansNumberData, Map<String, SortedMap<String, int[]>> facetData, Integer[] docSet) throws IOException {for (MtasFunctionParserFunction function : cf.baseFunctionParserFunctions[level]) {if (function.needArgumentsNumber() > cf.spanQueries.length) {throw new IOException(\"function \" + function + \" expects (at least) \" + function.needArgumentsNumber() + \" queries\");}}Map<String, int[]> list = facetData.get(cf.baseFields[level]);if (dataCollector != null) {MtasDataCollector<?, ?> subDataCollector = null;dataCollector.initNewList(1);if (cf.baseFunctionList[level] != null) {SubComponentFunction[] tmpList;if (!cf.baseFunctionList[level].containsKey(dataCollector)) {tmpList = new SubComponentFunction[cf.baseFunctionParserFunctions[level].length];cf.baseFunctionList[level].put(dataCollector, tmpList);for (int i@ i = 0@ i < cf.baseFunctionParserFunctions[level].length++){try {tmpList[i] = new SubComponentFunction(DataCollector.COLLECTOR_TYPE_LIST, cf.baseFunctionKeys[level][i], cf.baseFunctionTypes[level][i], cf.baseFunctionParserFunctions[level][i], null, null, 0, Integer.MAX_VALUE, null, null);} catch (ParseException e) {throw new IOException(e.getMessage());}}} else {tmpList = cf.baseFunctionList[level].get(dataCollector);}for (SubComponentFunction function : tmpList) {function.dataCollector.initNewList(1);}}if (dataCollector.getCollectorType().equals(DataCollector.COLLECTOR_TYPE_LIST)) {dataCollector.setWithTotal();if (docSet.length > 0 && list.size() > 0) {HashMap<String, Integer[]> docLists = new HashMap<>();HashMap<String, String> groupedKeys = new HashMap<>();boolean documentsInFacets = false;for (Entry<String, int[]> entry : list.entrySet()) {if (!groupedKeys.containsKey(entry.getKey())) {groupedKeys.put(entry.getKey(), groupedKeyName(entry.getKey(), cf.baseRangeSizes[level], cf.baseRangeBases[level]));}Integer[] docList = intersectedDocList(entry.getValue(), docSet);if (docList != null && docList.length > 0) {documentsInFacets = true;}if (docLists.containsKey(groupedKeys.get(entry.getKey()))) {docLists.put(groupedKeys.get(entry.getKey()), mergeDocLists(docLists.get(groupedKeys.get(entry.getKey())), docList));} else {docLists.put(groupedKeys.get(entry.getKey()), docList);}}if (documentsInFacets) {Map<Integer, long[]> args = computeArguments(spansNumberData, cf.spanQueries, docSet);if (cf.baseDataTypes[level].equals(CodecUtil.DATA_TYPE_LONG)) {boolean applySumRule = false;if (cf.baseStatsTypes[level].equals(CodecUtil.STATS_BASIC) && cf.baseParsers[level].sumRule() && (cf.baseMinimumLongs[level] == null) && (cf.baseMaximumLongs[level] == null)) {applySumRule = true;if (cf.baseFunctionList[level].get(dataCollector) != null) {for (SubComponentFunction function : cf.baseFunctionList[level].get(dataCollector)) {if (!function.statsType.equals(CodecUtil.STATS_BASIC) || !function.parserFunction.sumRule() || function.parserFunction.needPositions()) {applySumRule = false;break;}}}}if (applySumRule) {for (String key : new LinkedHashSet<String>(groupedKeys.values())) {if (docLists.get(key).length > 0) {Integer[] subDocSet = docLists.get(key);int length = cf.baseParsers[level].needArgumentsNumber();long[] valueSum = new long[length];long valuePositions = 0;if (subDocSet.length > 0) {long[] tmpArgs;for (int docId : subDocSet){tmpArgs = args.get(docId);if (positionsData != null && positionsData.containsKey(docId) && positionsData.get(docId) != null) {valuePositions += positionsData.get(docId).longValue();}if (tmpArgs != null) {for (int i@ i = 0@ i < length++){valueSum[i] += tmpArgs[i];}}}long value;try {value = cf.baseParsers[level].getValueLong(valueSum, valuePositions);subDataCollector = dataCollector.add(key, value, subDocSet.length);} catch (IOException e) {log.debug(e);dataCollector.error(key, e.getMessage());subDataCollector = null;}if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {SubComponentFunction[] functionList = cf.baseFunctionList[level].get(dataCollector);for (SubComponentFunction function : functionList) {if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {try {long valueLong = function.parserFunction.getValueLong(valueSum, valuePositions);function.dataCollector.add(key, valueLong, subDocSet.length);} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {try {double valueDouble = function.parserFunction.getValueDouble(valueSum, valuePositions);function.dataCollector.add(key, valueDouble, subDocSet.length);} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}}}}if (subDataCollector != null) {createFacetBase(cf, (level + 1), subDataCollector, positionsData, spansNumberData, facetData, subDocSet);}}}}} else {for (String key : new LinkedHashSet<String>(groupedKeys.values())) {if (docLists.get(key).length > 0) {Integer[] subDocSet = docLists.get(key);if (subDocSet.length > 0 && cf.baseDataTypes[level].equals(CodecUtil.DATA_TYPE_LONG)) {long[][] functionValuesLong = null;double[][] functionValuesDouble = null;int[] functionNumber = null;SubComponentFunction[] functionList = null;if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {functionList = cf.baseFunctionList[level].get(dataCollector);functionValuesLong = new long[functionList.length][];functionValuesDouble = new double[functionList.length][];functionNumber = new int[functionList.length];for (int i@ i = 0@ i < functionList.length++){functionValuesLong[i] = new long[subDocSet.length];functionValuesDouble[i] = new double[subDocSet.length];}}int number = 0;Integer[] restrictedSubDocSet = new Integer[subDocSet.length];long[] values = new long[subDocSet.length];for (int docId : subDocSet){long[] tmpArgs = args.get(docId);int tmpPositions = (positionsData == null) ? 0 : (positionsData.get(docId) == null ? 0 : positionsData.get(docId));long value = cf.baseParsers[level].getValueLong(tmpArgs, tmpPositions);if ((cf.baseMinimumLongs[level] == null || value >= cf.baseMinimumLongs[level]) && (cf.baseMaximumLongs[level] == null || value <= cf.baseMaximumLongs[level])) {values[number] = value;restrictedSubDocSet[number] = docId;number++;if (functionList != null) {for (int i@ i = 0@ i < functionList.length++){SubComponentFunction function = functionList[i];if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {try {functionValuesLong[i][functionNumber[i]] = function.parserFunction.getValueLong(tmpArgs, tmpPositions);functionNumber[i]++;} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {try {functionValuesDouble[i][functionNumber[i]] = function.parserFunction.getValueDouble(tmpArgs, tmpPositions);functionNumber[i]++;} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}}}}}}if (number > 0) {subDataCollector = dataCollector.add(key, values, number);if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {for (int i@ i = 0@ i < functionList.length++){SubComponentFunction function = functionList[i];if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {function.dataCollector.add(key, functionValuesLong[i], functionNumber[i]);} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {function.dataCollector.add(key, functionValuesDouble[i], functionNumber[i]);}}}if (subDataCollector != null) {createFacetBase(cf, (level + 1), subDataCollector, positionsData, spansNumberData, facetData, Arrays.copyOfRange(restrictedSubDocSet, 0, number));}}}}}}} else {throw new IOException(\"unexpected dataType \" + cf.baseDataTypes[level]);}}}} else {throw new IOException(\"unexpected type \" + dataCollector.getCollectorType());}dataCollector.closeNewList();if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {SubComponentFunction[] tmpList = cf.baseFunctionList[level].get(dataCollector);for (SubComponentFunction function : tmpList) {function.dataCollector.closeNewList();}}}}\n", "public String getFunctionNumber() {return functionNumber;}\n", "public void setFunctionNumber(String functionNumber) {this.functionNumber = functionNumber;}\n", "public int getFunctionNumber() {return functionNumber;}\n", "public void setFunctionNumber(int functionNumber) {this.functionNumber = functionNumber;}\n"]}
{"name": "HumanEval_30_get_positive", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return only positive numbers in the array list.\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l, (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_30_get_positive.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_30_get_positive", "test": "    }\n    public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "description": "Return only positive numbers in the array list.", "codematcher_results": ["private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n", "private void add(Delete base, TransactionResult result) {if (result == null) {throw new InvalidUsageException(\"the record to be deleted must be existing \" + \"and read beforehand\");}Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.DELETED));values.add(Attribute.toPreparedAtValue(current));values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_33_sort_third", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes an array array list l and returns an array array list l' such that\n    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    // to the values of the corresponding indicies of l, but sorted.\n    // >>> sortThird((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    // >>> sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_33_sort_third.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l, (long)1l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_33_sort_third", "test": "    }\n    public static void main(String[] args) {\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l, (long)1l)))));\n    }\n\n}\n", "description": "This function takes an array array list l and returns an array array list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_6_parse_nested_parens", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_6_parse_nested_parens.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_6_parse_nested_parens", "test": "    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n", "description": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_45_triangle_area", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given length of a side and high return area for a triangle.\n    // >>> triangleArea((5l), (3l))\n    // (7.5f)\n    public static float triangleArea(long a, long h) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_45_triangle_area.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_45_triangle_area", "test": "    }\n    public static void main(String[] args) {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n", "description": "Given length of a side and high return area for a triangle.", "codematcher_results": ["public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public // This function returns the value of the Areadouble returnArea() {double p = returnPerimeter() / 2;return Math.pow((p) * (p - sideOne) * (p - sideTwo) * (p - sideThree), .5);}\n", "public // This function returns the value of the Areadouble returnArea() {return Math.PI * radius * radius;}\n", "public // This function returns the value of the Areadouble returnArea() {return length * width;}\n", "public // This function returns the value of the Areadouble returnArea() {return side * side;}\n"]}
{"name": "HumanEval_97_multiply", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    public static long multiply(long a, long b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_97_multiply.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_97_multiply", "test": "    }\n    public static void main(String[] args) {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n", "description": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_4_mean_absolute_deviation", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given array list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\n    // (1.0f)\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_4_mean_absolute_deviation.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))) == (1.2f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_4_mean_absolute_deviation", "test": "    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))) == (1.2f));\n    }\n\n}\n", "description": "For a given array list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |", "codematcher_results": ["public static void main(String[] a) {final CountDownLatch firstLatch = new CountDownLatch(1);final CountDownLatch secondLatch = new CountDownLatch(1);final BuildFactory.Builder builder = new BuildFactory.Builder();CopyOnWriteArrayList<BuildFactory> elements = new CopyOnWriteArrayList<>();elements.add(builder.name(\"myth\").addr(\"local\").build());elements.add(builder.name(\"roll\").addr(\"remote\").build());ReentrantLock lock = new ReentrantLock();ElementList<BuildFactory> list = new ElementList<>(elements, lock, \"list1 > \");ElementList<BuildFactory> list2 = new ElementList<>(elements, lock, \"list2 > \");Thread thread1 = new Thread(() -> {System.out.println(\"\u8fdb\u5165 \u7ebf\u7a0b 1\");elements.add(builder.name(\"dyn 1\").addr(\"89\").build());list.prep();firstLatch.countDown();try {secondLatch.await();} catch (InterruptedException e) {System.out.println(\"first inter error\");}list.listElement(\"first \");});Thread thread2 = new Thread(() -> {System.out.println(\"\u8fdb\u5165 \u7ebf\u7a0b 2\");try {Thread.sleep(2000);firstLatch.await();elements.add(builder.name(\"dyn 2\").addr(\"00\").build());list2.prep();secondLatch.countDown();} catch (InterruptedException e) {System.out.println(\"second inter error\");}list2.listElement(\"second\");});thread1.start();thread2.start();}\n", "public static ListElement list(InlineElement... elements) {return new ListElement(Arrays.asList(elements));}\n", "public List() {start = new ListElement(\"Kopf\");}\n", "public List<RuleOutput> sort(List<RuleOutput> matchedResults) {if (matchedResults == null || matchedResults.isEmpty()) {return matchedResults;}Object listElement = ((InterpretedRuleOutput) matchedResults.get(0)).getResult();if (listElement instanceof Pair) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) interpretedRule.getResult());});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, decisionPairs.get(i)));}return (List) newList;} else if (listElement instanceof Context) {Context skeleton = (Context) listElement;List<InterpretedRuleOutput> newList = new ArrayList<>();for (int i@ i = 0@ i < matchedResults.size()++){newList.add(new InterpretedRuleOutput(true, new Context()));}for (Object key : skeleton.keySet()) {List<com.gs.dmn.runtime.Pair<Object, Integer>> decisionPairs = new ArrayList<>();matchedResults.forEach(matchedResult -> {InterpretedRuleOutput interpretedRule = (InterpretedRuleOutput) matchedResult;decisionPairs.add((Pair) ((Context) interpretedRule.getResult()).get(key));});decisionPairs.sort(new com.gs.dmn.runtime.PairComparator());for (int i@ i = 0@ i < decisionPairs.size()++){((Context) newList.get(i).getResult()).put(key, decisionPairs.get(i));}}return (List) newList;} else {return matchedResults;}}\n", "public static GirlListModel parse(Element listElement, int type) {GirlListModel listModel = new GirlListModel(type);if (listElement != null) {Elements girlElements = listElement.children();for (Element girlElement : girlElements) {GirlModel girlModel = GirlModel.parse(girlElement, type);listModel.getList().add(girlModel);}}Logger.log(\"GirlListModel parse... \" + listModel.getList().size());return listModel;}\n", "public static PicListModel parse(Element listElement) throws Exception {PicListModel picListModel = new PicListModel();if (listElement != null) {for (Element picElement : listElement.children()) {PicModel picModel = PicModel.parse(picElement);picListModel.getList().add(picModel);}}return picListModel;}\n", "public void addDir(File target) {if (target == null) {return;}File setDir = target.getParentFile();if (target.isDirectory()) {setDir = target;}for (File listElement : searchTargetList) {if (setDir.getPath().equals(listElement.getPath())) {return;}}searchTargetList.add(setDir);searchTargetMap = null;mibValueCache = new MibValueCache();}\n", "public void delete(int n) {if (n < 1) {return;}ListElement nth = findIndex(n);if (nth == null) {return;}ListElement pre = findIndex(n - 1);pre.next = nth.next;}\n", "public void format(ListElement element) {String[] inlineElements = element.getEntries().stream().map(el -> {Formatter formatter = newInstance();el.format(formatter);return formatter.finalizeFormatting();}).toArray(String[]::new);formatList(state, inlineElements);}\n", "public void listContainsNumberOfElements(String listName, int quantity) {List<SelenideElement> listOfElementsFromPage = akitaScenario.getCurrentPage().getElementsList(listName);assertTrue(listOfElementsFromPage.size() == quantity, String.format(\"\u0427\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0433\u043e: %s\", listOfElementsFromPage.size()));}\n"]}
{"name": "HumanEval_58_common", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique common elements for two array lists.\n    // >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))\n    // >>> common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_58_common.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_58_common", "test": "    }\n    public static void main(String[] args) {\n    assert(common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "description": "Return sorted unique common elements for two array lists.", "codematcher_results": ["ElementArrayList(ArrayList<Element> elements, ReentrantLock lock, String name) {this.elements = elements;this.lock = lock;this.name = name;}\n", "static List<Method> get(Class<?> type) {List<Method> list = null;if (type != null) {boolean inaccessible = !Modifier.isPublic(type.getModifiers());for (Method method : type.getMethods()) {if (method.getDeclaringClass().equals(type)) {if (inaccessible) {try {method = MethodFinder.findAccessibleMethod(method);if (!method.getDeclaringClass().isInterface()) {method = null;}} catch (NoSuchMethodException exception) {}}if (method != null) {if (list == null) {list = new ArrayList<>();}list.add(method);}}}}if (list != null) {list.sort(MethodOrder.instance);return Collections.unmodifiableList(list);}return Collections.emptyList();}\n", "private synchronized boolean add(ObjectName name, ClassLoader cl) {List<LoaderEntry> l = new ArrayList<LoaderEntry>(Arrays.asList(loaders));l.add(new LoaderEntry(name, cl));loaders = l.toArray(EMPTY_LOADER_ARRAY);return true;}\n", "private static List<MethodInfo> add(List<MethodInfo> list, Method method, Type type) {if (list == null) {list = new ArrayList<>();}list.add(new MethodInfo(method, type));return list;}\n", "public Key(Value... values) {checkNotNull(values);this.values = new ArrayList<>(values.length);Arrays.stream(values).forEach(v -> this.values.add(v));}\n", "public Tag(String tagName, String tagViewId, String displayName, String user) {this.tagName = tagName;this.tagViewId = tagViewId;this.displayName = displayName;if (user != null) {this.users = new ArrayList<String>();this.users.add(user);}}\n", "public void add(Object obj) {if (objrefs == null)objrefs = new ArrayList();objrefs.add(obj);}\n", "public Key(List<Value> values) {checkNotNull(values);this.values = new ArrayList<>(values.size());values.forEach(v -> this.values.add(v));}\n", "public List<Result> all() {List<Result> results = new ArrayList<>();resultSet.forEach(r -> results.add(new ResultImpl(r, metadata)));return results;}\n", "private void add(Put base, TransactionResult result) {Put put = new Put(base.getPartitionKey(), getClusteringKey(base, result).orElse(null)).forNamespace(base.forNamespace().get()).forTable(base.forTable().get()).withConsistency(Consistency.LINEARIZABLE);List<Value> values = new ArrayList<>();values.add(Attribute.toIdValue(id));values.add(Attribute.toStateValue(TransactionState.PREPARED));values.add(Attribute.toPreparedAtValue(current));values.addAll(base.getValues().values());if (result != null) {values.addAll(createBeforeValues(base, result));int version = result.getVersion();values.add(Attribute.toVersionValue(version + 1));put.withCondition(new PutIf(new ConditionalExpression(VERSION, toVersionValue(version), Operator.EQ)));} else {values.add(Attribute.toVersionValue(1));put.withCondition(new PutIfNotExists());}put.withValues(values);mutations.add(put);}\n"]}
{"name": "HumanEval_156_int_to_mini_roman", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n    // (\"cdxxvi\")\n    public static String intToMiniRoman(long number) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_156_int_to_mini_roman.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_156_int_to_mini_roman", "test": "    }\n    public static void main(String[] args) {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n", "description": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000 Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_67_fruit_distribution", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this task, you will be given a string that represents a number of apples and oranges \n    // that are distributed in a basket of fruit this basket contains \n    // apples, oranges, and mango fruits. Given the string that represents the total number of \n    // the oranges and apples and an integer that represent the total number of the fruits \n    // in the basket return the number of the mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    // (19l)\n    public static long fruitDistribution(String s, long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_67_fruit_distribution.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_67_fruit_distribution", "test": "    }\n    public static void main(String[] args) {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n", "description": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket. for examble:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "public static Lunar solar2Lunar(final Solar solar) {Lunar lunar = new Lunar();int index = solar.solarYear - SOLAR_1_1[0];int data = (solar.solarYear << 9) | (solar.solarMonth << 5) | (solar.solarDay);int solar11 = 0;if (SOLAR_1_1[index] > data) {index--;}solar11 = SOLAR_1_1[index];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);long offset = solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) - solarToInt(y, m, d);int days = LUNAR_MONTH_DAYS[index];int leap = getBitInt(days, 4, 13);int lunarY = index + SOLAR_1_1[0];int lunarM = 1;int lunarD = 1;offset += 1;for (int i@ i = 0@ i < 13++){int dm = getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;if (offset > dm) {lunarM++;offset -= dm;} else {break;}}lunarD = (int) (offset);lunar.lunarYear = lunarY;lunar.lunarMonth = lunarM;lunar.isLeap = false;if (leap != 0 && lunarM > leap) {lunar.lunarMonth = lunarM - 1;if (lunarM == leap + 1) {lunar.isLeap = true;}}lunar.lunarDay = lunarD;return lunar;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n"]}
{"name": "HumanEval_112_reverse_delete", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Task\n    // We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    // then check if the result string is palindrome.\n    // A string is called palindrome if it reads the same backward as forward.\n    // You should return a pair containing the result string and true/false for the check.\n    // Example\n    // >>> reverseDelete((\"abcde\"), (\"ae\"))\n    // (Pair.with(\"bcd\", false))\n    // >>> reverseDelete((\"abcdef\"), (\"b\"))\n    // (Pair.with(\"acdef\", false))\n    // >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // (Pair.with(\"cdedc\", true))\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_112_reverse_delete.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals((Pair.with(\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals((Pair.with(\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals((Pair.with(\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals((Pair.with(\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals((Pair.with(\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals((Pair.with(\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals((Pair.with(\"\", true))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_112_reverse_delete", "test": "    }\n    public static void main(String[] args) {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals((Pair.with(\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals((Pair.with(\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals((Pair.with(\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals((Pair.with(\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals((Pair.with(\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals((Pair.with(\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals((Pair.with(\"\", true))));\n    }\n\n}\n", "description": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a pair containing the result string and true/false for the check. Example", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_13_greatest_common_divisor", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    public static long greatestCommonDivisor(long a, long b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_13_greatest_common_divisor.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_13_greatest_common_divisor", "test": "    }\n    public static void main(String[] args) {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n", "description": "Return a greatest common divisor of two integers a and b", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_116_sort_array", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this Kata, you have to sort an array array list of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l, (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_116_sort_array.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_116_sort_array", "test": "    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n", "description": "In this Kata, you have to sort an array array list of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "public void setOrientation(int orientation) {if (orientation != HORIZONTAL && orientation != VERTICAL) {throw new IllegalArgumentException(\"Invalid orientation. It should be either HORIZONTAL or VERTICAL\");}mOrientation = orientation;}\n", "protected void attachBaseContext(Context base) {super.attachBaseContext(base);}\n"]}
{"name": "HumanEval_28_concatenate", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Concatenate array list of strings into a single string\n    // >>> concatenate((new ArrayList<String>(Arrays.asList())))\n    // (\"\")\n    // >>> concatenate((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    // (\"abc\")\n    public static String concatenate(ArrayList<String> strings) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_28_concatenate.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(concatenate((new ArrayList<String>(Arrays.asList()))).equals((\"\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals((\"xyz\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\", (String)\"w\", (String)\"k\")))).equals((\"xyzwk\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_28_concatenate", "test": "    }\n    public static void main(String[] args) {\n    assert(concatenate((new ArrayList<String>(Arrays.asList()))).equals((\"\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals((\"xyz\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\", (String)\"w\", (String)\"k\")))).equals((\"xyzwk\")));\n    }\n\n}\n", "description": "Concatenate array list of strings into a single string", "codematcher_results": ["public Expression<Enum<?>> in(Enum<?>[] value) {String listString = \"\";Boolean firstString = true;for (Enum<?> v : value) {if (firstString) {listString = listString.concat(\"('\").concat(EnumPath.getValue(v)).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(EnumPath.getValue(v)).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<Enum<?>>(this, Operation.in, listString);}\n", "public Expression<String> in(String[] value) {String listString = \"\";Boolean firstString = true;for (String v : value) {if (firstString) {listString = listString.concat(\"('\").concat(v).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(v).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<String>(this, Operation.in, listString);}\n", "public void mget() {List<TestEntity> cd = sc.mGet(list);System.out.println(JSON.toJSONString(cd));cd = sc.mGetString(listString);System.out.println(JSON.toJSONString(cd));cd = sc.mGetNumber(listIntger);System.out.println(JSON.toJSONString(cd));}\n", "public static void main(String[] args) throws EncodingException {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";try {System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));} catch (EncodingException e) {e.printStackTrace();};}\n", "public static void main(String[] args) {String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "private void done(ArrayList<String> listString) {Intent mIntent = new Intent();setResult(Activity.RESULT_OK, mIntent);mIntent.putStringArrayListExtra(KEY_DATA_RESULT, listString);finish();}\n", "public static void main(String[] args) {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf3000000000000000000000000000000000000000000000000000000000000000500\" + \"0000000000000000000000000000000000000000000000000000000000008000000000000000000000000000\" + \"000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000\" + \"0000000000000000000000000000000000000000000000000000200000000000000000000000000000000000\" + \"00000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "public void test() {assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"listString\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawlist\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawListSub\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"stringList\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"arrayListString\")));}\n", "public static String listOfStringsToString(ObjectArrayList<String> stList, String separator) {StringBuffer sb = new StringBuffer();for (String st : stList) {sb.append(st);sb.append(separator);}return sb.toString().trim();}\n", "public void handle(MyPojo2 request) {log.info(\"a new message #2 type:{}\", request);MyPojo2 response = MyPojo2.builder().sender(pid()).name(request.getName()).age(request.getAge()).male(request.isMale()).languages(request.getLanguages()).position(request.getPosition()).set(request.getSet()).listString(request.getListString()).bools(request.getBools()).build();send(request.getSender(), response);}\n"]}
{"name": "HumanEval_149_sorted_list_sum", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts an array array list of strings as a parameter,\n    // deletes the strings that have odd lengths from it,\n    // and returns the resulted array list with a sorted order,\n    // The array list is always an array array list of strings and never an array array list of numbers,\n    // and it may contain duplicates.\n    // The order of the array list should be ascending by length of each word, and you\n    // should return the array list sorted by that rule.\n    // If two words have the same length, sort the array list alphabetically.\n    // The function should return an array array list of strings in sorted order.\n    // You may assume that all words will have the same length.\n    // For example:\n    // >>> listSort((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"aa\")))\n    // >>> listSort((new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"a\", (String)\"aaa\", (String)\"cd\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"cd\")))\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_149_sorted_list_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\")))).equals((new ArrayList<String>(Arrays.asList((String)\"aa\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"school\", (String)\"AI\", (String)\"asdf\", (String)\"b\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"asdf\", (String)\"school\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"b\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"dcba\", (String)\"abcd\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList((String)\"abcd\", (String)\"dcba\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\", (String)\"c\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aaaa\", (String)\"bbbb\", (String)\"dd\", (String)\"cc\")))).equals((new ArrayList<String>(Arrays.asList((String)\"cc\", (String)\"dd\", (String)\"aaaa\", (String)\"bbbb\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_149_sorted_list_sum", "test": "    }\n    public static void main(String[] args) {\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\")))).equals((new ArrayList<String>(Arrays.asList((String)\"aa\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"school\", (String)\"AI\", (String)\"asdf\", (String)\"b\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"asdf\", (String)\"school\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"b\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"dcba\", (String)\"abcd\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList((String)\"abcd\", (String)\"dcba\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\", (String)\"c\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aaaa\", (String)\"bbbb\", (String)\"dd\", (String)\"cc\")))).equals((new ArrayList<String>(Arrays.asList((String)\"cc\", (String)\"dd\", (String)\"aaaa\", (String)\"bbbb\")))));\n    }\n\n}\n", "description": "Write a function that accepts an array array list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted array list with a sorted order, The array list is always an array array list of strings and never an array array list of numbers, and it may contain duplicates. The order of the array list should be ascending by length of each word, and you should return the array list sorted by that rule. If two words have the same length, sort the array list alphabetically. The function should return an array array list of strings in sorted order. You may assume that all words will have the same length. For example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_7_filter_by_substring", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input array list of strings only for ones that contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_7_filter_by_substring.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"prune\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_7_filter_by_substring", "test": "    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"prune\")))));\n    }\n\n}\n", "description": "Filter an input array list of strings only for ones that contain given substring", "codematcher_results": ["public Expression<Enum<?>> in(Enum<?>[] value) {String listString = \"\";Boolean firstString = true;for (Enum<?> v : value) {if (firstString) {listString = listString.concat(\"('\").concat(EnumPath.getValue(v)).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(EnumPath.getValue(v)).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<Enum<?>>(this, Operation.in, listString);}\n", "public Expression<String> in(String[] value) {String listString = \"\";Boolean firstString = true;for (String v : value) {if (firstString) {listString = listString.concat(\"('\").concat(v).concat(\"'\");firstString = false;} else {listString = listString.concat(\", '\").concat(v).concat(\"'\");}}listString = listString.concat(\")\");return new Expression<String>(this, Operation.in, listString);}\n", "public void mget() {List<TestEntity> cd = sc.mGet(list);System.out.println(JSON.toJSONString(cd));cd = sc.mGetString(listString);System.out.println(JSON.toJSONString(cd));cd = sc.mGetNumber(listIntger);System.out.println(JSON.toJSONString(cd));}\n", "public static void main(String[] args) throws EncodingException {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";try {System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));} catch (EncodingException e) {e.printStackTrace();};}\n", "public static void main(String[] args) {String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf30000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "private void done(ArrayList<String> listString) {Intent mIntent = new Intent();setResult(Activity.RESULT_OK, mIntent);mIntent.putStringArrayListExtra(KEY_DATA_RESULT, listString);finish();}\n", "public static void main(String[] args) {;String method = \"test(string,int2,string)\";String params = \"asdf,3123,adf\";String arrayMethod1 = \"test(uint,uint256[3])\";String arrayMethod2 = \"test(uint,uint256[])\";String arrayMethod3 = \"test(uint,address[])\";String byteMethod1 = \"test(bytes32,bytes11)\";String tokenMethod = \"test(trcToken,uint256)\";String tokenParams = \"\\\"nmb\\\",111\";System.out.println(\"token:\" + parseMethod(tokenMethod, tokenParams));String method1 = \"test(uint256,string,string,uint256[])\";String expected1 = \"db103cf3000000000000000000000000000000000000000000000000000000000000000500\" + \"0000000000000000000000000000000000000000000000000000000000008000000000000000000000000000\" + \"000000000000000000000000000000000000ctring method2 = \"test(uint256,string,string,uint256[3])\";String expected2 = \"000000000000000000000000000000000000000000000000000000000000000100000000000\" + \"0000000000000000000000000000000000000000000000000000200000000000000000000000000000000000\" + \"00000000000000000000000000003\";String listString = \"1 ,\\\"B\\\",\\\"C\\\", [1, 2, 3]\";System.out.println(parseMethod(method1, listString));System.out.println(parseMethod(method2, listString));String bytesValue1 = \"\\\"0112313\\\",112313\";String bytesValue2 = \"123123123\";System.out.println(parseMethod(byteMethod1, bytesValue1));}\n", "public void test() {assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"listString\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawlist\")));assertTrue(qtype(RawListSub.class).isAssignableTo(qtype(\"rawListSub\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"stringList\")));assertFalse(qtype(RawListSub.class).isAssignableTo(qtype(\"arrayListString\")));}\n", "public void handle(MyPojo2 request) {log.info(\"a new message #2 type:{}\", request);MyPojo2 response = MyPojo2.builder().sender(pid()).name(request.getName()).age(request.getAge()).male(request.isMale()).languages(request.getLanguages()).position(request.getPosition()).set(request.getSet()).listString(request.getListString()).bools(request.getBools()).build();send(request.getSender(), response);}\n", "public void toJson() throws Exception {TestBean bean = new TestBean(\"A\");String beanString = binder.toJson(bean);System.out.println(\"Bean:\" + beanString);assertEquals(beanString, \"{\\\"name\\\":\\\"A\\\"}\");Map<String, Object> map = Maps.newLinkedHashMap();map.put(\"name\", \"A\");map.put(\"age\", 2);String mapString = binder.toJson(map);System.out.println(\"Map:\" + mapString);assertEquals(mapString, \"{\\\"name\\\":\\\"A\\\",\\\"age\\\":2}\");List<String> stringList = Lists.newArrayList(\"A\", \"B\", \"C\");String listString = binder.toJson(stringList);System.out.println(\"String List:\" + listString);assertEquals(listString, \"[\\\"A\\\",\\\"B\\\",\\\"C\\\"]\");List<TestBean> beanList = Lists.newArrayList(new TestBean(\"A\"), new TestBean(\"B\"));String beanListString = binder.toJson(beanList);System.out.println(\"Bean List:\" + beanListString);assertEquals(beanListString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");TestBean[] beanArray = new TestBean[] { new TestBean(\"A\"), new TestBean(\"B\") };String beanArrayString = binder.toJson(beanArray);System.out.println(\"Array List:\" + beanArrayString);assertEquals(beanArrayString, \"[{\\\"name\\\":\\\"A\\\"},{\\\"name\\\":\\\"B\\\"}]\");}\n"]}
{"name": "HumanEval_99_closest_integer", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long closestInteger(String value) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_99_closest_integer.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_99_closest_integer", "test": "    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n", "description": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero. Examples", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_64_vowels_count", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function vowels_count which takes a string representing\n    // a word as input and returns the number of vowels in the string.\n    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    public static long vowelsCount(String s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_64_vowels_count.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_64_vowels_count", "test": "    }\n    public static void main(String[] args) {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n", "description": "Write a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word. Example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_158_find_max", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts an array array list of strings.\n    // The array list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public static String findMax(ArrayList<String> words) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_158_find_max.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\")))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_158_find_max", "test": "    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\")))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n", "description": "Write a function that accepts an array array list of strings. The array list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_162_string_to_md5", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"Hello world\"))\n    // Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    public static Optional<String> stringToMd5(String text) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_162_string_to_md5.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_162_string_to_md5", "test": "    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n", "description": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return null.", "codematcher_results": ["protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {;File fileBufferedImage waterimg=null} //StringString message = \"\";String sort = \"\";FileOutputStream out = null;try {System.out.println(\"\u5f00\u59cb\u63a5\u53d7\u56fe\u7247\");DiskFileItemFactory factory = new DiskFileItemFactory();ServletFileUpload upload = new ServletFileUpload(factory);upload.setHeaderEncoding(\"UTF-8\");if (!ServletFileUpload.isMultipartContent(request)) {System.out.println(\"\u89e3\u6790\u51fa\u9519\");return;}List<FileItem> list = upload.parseRequest(request);for (FileItem item : list) {if (item.isFormField()) {String name = item.getFieldName();String value = item.getString(\"UTF-8\");sort = value;System.out.println(name + \"=\" + value);} else {String filename = item.getName();System.out.println(filename);System.out.println(sort);if (filename == null || filename.trim().equals(\"\")) {continue;};InputStream in = item.getInputStream();out = new FileOutputStream(new File(\"d:\\\\hahahha.txt\"));byte[] b = new byte[1024];while (in.read(b) != -1) {String msg = new String(new String(b));System.out.println(msg);out.write(b);};}in.close();item.delete();message = \"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01\";}}} catch (Exception e) {message = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff01\";e.printStackTrace();} finally {if (out != null) {out.close();}}}\n", "private Map<String, String> getMap(final List<StringString> sample) {HashMap<String, String> map = new HashMap<String, String>();for (int i@ i = 0@ i < sample.size()++){map.put(sample.get(i).key, sample.get(i).value);}return (Map) map;}\n", "public Circle(// sets k, u, v, w by StringString coeffString, // sets k, u, v, w by StringString radXString, // sets k, u, v, w by StringString radYString, // sets k, u, v, w by StringString radZString) {HomogenousPolynomial coeff = new HomogenousPolynomial(coeffString);HomogenousVector radCoeffs = new HomogenousVector(radXString, radYString, radZString);if (coeff.equalsZero())throw new IllegalArgumentException(\"coefficient must be nonzero\");if (coeff.degree() + 2 != radCoeffs.degree())throw new IllegalArgumentException(\"degree of radical coefficients must be two more than degree of coefficient\");this.coeff = coeff;this.radCoeffs = radCoeffs;}\n", "public void stringWhenToStringReturnsNull() {azzert.that(as.string(new Object() {;public String toString() {return null;}}), is(\"null\"));}\n", "public ArrayList<StringString> getData(String dataName) {return getList(getDataMap(dataName));}\n", "private ArrayList<StringString> getList(final Map<String, String> sample) {ArrayList<StringString> StringString_sample = new ArrayList<StringString>();for (Map.Entry<String, String> x : sample.entrySet()) {StringString v = new StringString();v.key = x.getKey();v.value = x.getValue();StringString_sample.add(v);}return StringString_sample;}\n", "public static Transform<String, String> transform(List<String> transforms, Map<String, Transform<String, String>> stringToStringTransforms, Map<String, Transform<Object, String>> objectToStringTransforms, Map<String, Transform<String, Object>> stringToObjectTransforms, Map<String, Transform<Object, Object>> objectToObjectTransforms) throws ConfigurationException {int state = STRING_STATE;Transform<String, String> stringIdentity = (s) -> s;Transform<String, String> stringString = stringIdentity;Transform<String, Object> stringObject = null;for (String t : transforms) {String op = parseOperationNameFromTransform(t);Map<String, String> parameters = parseParametersFrom(t);switch(state) {case STRING_STATE:if (stringToStringTransforms.containsKey(op)) {Transform<String, String> transform = stringToStringTransforms.get(op);stringString = stringString.andThen(transform);} else if (stringToObjectTransforms.containsKey(op)) {Transform<String, Object> transform = stringToObjectTransforms.get(t);stringObject = stringString.andThen(transform);state = OBJECT_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from string state\");}break;case OBJECT_STATE:if (objectToObjectTransforms.containsKey(op)) {Transform<Object, Object> transform = objectToObjectTransforms.get(op);stringObject = transform.compose(stringObject);} else if (objectToStringTransforms.containsKey(op)) {Transform<Object, String> transform = objectToStringTransforms.get(op);stringString = stringObject.andThen(transform);state = STRING_STATE;} else {throw new ConfigurationException(\"Broken transform: '\" + op + \"' cannot transition from obj state\");}break;}}return stringString;}\n", "' stringString readString(DataInputStream stream) throws IOException {String line = stream.readLine();if (line == null)return null;int len = Integer.parseInt(line);byte[] buffer = new byte[len];stream.readFully(buffer);return new String(buffer, StandardCharsets.ISO_8859_1);}\n", "HttpURLConnection conn = initHttp(url,if;String valueString = nullStringBuffer bufferRes =while ((valueString = read.readLine()) != null) {} in.close();} else { BufferedInputStream bis =String ds =String fullName =StringString suffix;att.setFileName(relName);} return att}public static String initParams(String url, Map<String, String> params) throws UnsupportedEncodingException {if (null == params || params.isEmpty()) {return url;}StringBuilder sb = new StringBuilder(url);if (url.indexOf(\"?\") == -1) {sb.append(\"?\");}sb.append(map2Url(params));return sb.toString();}\n", "public void testOptInt() {assertEquals(33, somenil.optint(33));throwsError(sometrue, \"optint\", int.class, new Integer(33));throwsError(somefalse, \"optint\", int.class, new Integer(33));assertEquals(0, zero.optint(33));assertEquals(sampleint, intint.optint(33));assertEquals((int) samplelong, longdouble.optint(33));assertEquals((int) sampledouble, doubledouble.optint(33));throwsError(somefunc, \"optint\", int.class, new Integer(33));throwsError(someclosure, \"optint\", int.class, new Integer(33));throwsError(stringstring, \"optint\", int.class, new Integer(33));assertEquals(sampleint, stringint.optint(33));assertEquals((int) samplelong, stringlong.optint(33));assertEquals((int) sampledouble, stringdouble.optint(33));throwsError(thread, \"optint\", int.class, new Integer(33));throwsError(table, \"optint\", int.class, new Integer(33));throwsError(userdataobj, \"optint\", int.class, new Integer(33));throwsError(userdatacls, \"optint\", int.class, new Integer(33));}\n"]}
{"name": "HumanEval_44_change_base", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\")\n    public static String changeBase(long x, long base) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_44_change_base.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_44_change_base", "test": "    }\n    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n", "description": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.", "codematcher_results": ["public String toString() {return \"ImageEntity{\" + \"col='\" + col + '\\'' + \", tag='\" + tag + '\\'' + \", tag3='\" + tag3 + '\\'' + \", sort='\" + sort + '\\'' + \", totalNum=\" + totalNum + \", startIndex=\" + startIndex + \", returnNumber=\" + returnNumber + \", imgs=\" + imgs + '}';}\n", "private void injectJS(WebView webView) {if (legacyMode) {injectJSOld(webView);return;}try {webView.loadUrl(\"javascript:\" + \"var linksLength = document.head.getElementsByTagName('link').length\" + \"for(var i=0i<linksLengthi++){document.head.getElementsByTagName('link')[0].remove()}\" + \"var isInGame = false\" + \"var isVerified = false\" + \"function isSmashing(returnNumber){if(isInGame){if(isVerified){return 'gv'+returnNumber}else{return 'g'+returnNumber}}return returnNumber}\" + \"function takeNextStep(gamePin,name,answer,returnVal,verify){if($('#inputSession').length==1){isVerified=falseisInGame=false$('#inputSession').val(gamePin)$('#inputSession').trigger('change')setTimeout(function(){$('#inputSession').submit()},10)}else if($('#username').length == 1){isInGame = true$('#username').val(name)$('#username').trigger('change')setTimeout(function(){$('#username').submit()},10)}else if($('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--0').length!=0){isVerified=falseif(verify==''){return 'v'+returnVal}else if($('.two-factor-auth__sub-heading.ng-binding').html() != 'Match the pattern on screen'){return 'i'+returnVal}else{for(var i=0i<4i++){$('.two-factor-auth-sequence__card.two-factor-auth-sequence__card--' + verify[i]).mousedown()}}} else if($('.answer').length!=0){isVerified=true$('.answer.answer'+answer).mousedown()}else{isVerified=true}return 'n'+returnVal}\");} catch (Exception e) {e.printStackTrace();}}\n", "void capturePoint(Vector3D beamOrigin, Vector3D beamDir, double distance, double intensity, double echo_width, int returnNumber, int pulseReturnNumber, int fullwaveIndex, String hitObjectId, int classification) {if (distance < detector.cfg_device_rangeMin_m) {return;}double precision = this.detector.cfg_device_accuracy_m / 2;double error = -precision + Math.random() * (precision * 2);error += boxMullerRandom(0.0, this.detector.cfg_device_accuracy_m / 2);distance += error;Vector3D pointPos = beamOrigin.add(beamDir.scalarMultiply(distance));Measurement m = new Measurement();m.position = pointPos;m.distance = distance;m.intensity = intensity;m.echo_width = echo_width;m.returnNumber = returnNumber;m.pulseReturnNumber = pulseReturnNumber;m.fullwaveIndex = fullwaveIndex;m.beamOrigin = beamOrigin;m.beamDirection = beamDir;m.hitObjectId = hitObjectId;m.classification = classification;detector.writeMeasurement(m);detector.mBuffer.add(m);}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");}if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");}String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG)Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));if ((nanpState == NP_NANP_LOCAL) || (nanpState == NP_NANP_AREA_LOCAL) || (nanpState == NP_NANP_NDD_AREA_LOCAL)) {return networkPortionNumber;} else if (nanpState == NP_NANP_NBPCD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK) {return networkPortionNumber.substring(1);} else {return networkPortionNumber;}} else if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == CDMA_HOME_NETWORK) {return networkPortionNumber;} else if (networkType == GSM_UMTS_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return PLUS_SIGN + networkPortionNumber.substring(iddLength);} else if (networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;return networkPortionNumber.substring(iddLength);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG)Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK) {returnNumber = networkPortionNumber.substring(1);}break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(1);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == GSM_UMTS_NETWORK || networkType == CDMA_ROAMING_NETWORK) {int iddLength = numberEntry.IDD != null ? numberEntry.IDD.length() : 0;returnNumber = NANP_IDD + networkPortionNumber.substring(iddLength);}break;case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!inExceptionListForNpCcAreaLocal(numberEntry) && networkPortionNumber.length() >= 11 && countryCode != NANP_CC) {returnNumber = NANP_IDD + networkPortionNumber;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == CDMA_HOME_NETWORK || networkType == CDMA_ROAMING_NETWORK)) {if (networkPortionNumber.startsWith(PLUS_SIGN + NANP_IDD)) {returnNumber = networkPortionNumber.substring(1);} else {returnNumber = NANP_IDD + networkPortionNumber.substring(1);}}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;}\n", "private static String formatNumber(Context context, String number, String activeMcc, int networkType) {if (number == null) {throw new IllegalArgumentException(\"number is null\");} else if (activeMcc == null || activeMcc.trim().length() == 0) {throw new IllegalArgumentException(\"activeMcc is null or empty!\");} else {String networkPortionNumber = PhoneNumberUtils.extractNetworkPortion(number);if (networkPortionNumber == null || networkPortionNumber.length() == 0) {throw new IllegalArgumentException(\"Number is invalid!\");}NumberEntry numberEntry = new NumberEntry(networkPortionNumber);ArrayList<String> allIDDs = getAllIDDs(context, activeMcc);int nanpState = checkNANP(numberEntry, allIDDs);if (DBG) {Rlog.d(TAG, \"NANP type: \" + getNumberPlanType(nanpState));}if (nanpState == NP_NANP_LOCAL || nanpState == NP_NANP_AREA_LOCAL || nanpState == NP_NANP_NDD_AREA_LOCAL) {return networkPortionNumber;}if (nanpState != NP_NANP_NBPCD_CC_AREA_LOCAL) {if (nanpState == NP_NANP_LOCALIDD_CC_AREA_LOCAL) {if (networkType == NP_NANP_LOCAL) {return networkPortionNumber;}if (networkType == 0) {return PLUS_SIGN + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);} else if (networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);}}int internationalState = checkInternationalNumberPlan(context, numberEntry, allIDDs, NANP_IDD);if (DBG) {Rlog.d(TAG, \"International type: \" + getNumberPlanType(internationalState));}String returnNumber = null;switch(internationalState) {case NP_NBPCD_HOMEIDD_CC_AREA_LOCAL:if (networkType == 0) {returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}break;case NP_HOMEIDD_CC_AREA_LOCAL:returnNumber = networkPortionNumber;break;case NP_NBPCD_CC_AREA_LOCAL:returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;case NP_LOCALIDD_CC_AREA_LOCAL:if (networkType == 0 || networkType == NP_NANP_AREA_LOCAL) {returnNumber = NANP_IDD + networkPortionNumber.substring(numberEntry.IDD != null ? numberEntry.IDD.length() : NP_NONE);break;}case NP_CC_AREA_LOCAL:int countryCode = numberEntry.countryCode;if (!(inExceptionListForNpCcAreaLocal(numberEntry) || networkPortionNumber.length() < NANP_LONG_LENGTH || countryCode == NP_NANP_LOCAL)) {returnNumber = NANP_IDD + networkPortionNumber;break;}default:if (networkPortionNumber.startsWith(PLUS_SIGN) && (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL)) {if (!networkPortionNumber.startsWith(\"+011\")) {returnNumber = NANP_IDD + networkPortionNumber.substring(NP_NANP_LOCAL);break;}returnNumber = networkPortionNumber.substring(NP_NANP_LOCAL);break;}}if (returnNumber == null) {returnNumber = networkPortionNumber;}return returnNumber;} else if (networkType == NP_NANP_LOCAL || networkType == NP_NANP_AREA_LOCAL) {return networkPortionNumber.substring(NP_NANP_LOCAL);} else {return networkPortionNumber;}}}\n", "private static String getLineNumber(Finding finding) {String returnNumber = null;if (finding.getEntryPointLineNumber() != -1) {returnNumber = finding.getEntryPointLineNumber().toString();} else if (finding.getDataFlowElements() != null && !finding.getDataFlowElements().isEmpty()) {returnNumber = String.valueOf(finding.getDataFlowElements().get(0).getLineNumber());}return returnNumber;}\n", "public static final List itemReturnQuery(String itemName, int categoryId, int selectedReceiverType, int receiverId, int returnedStatus, String transferNumber, String returnNumber, Date fromDate, Date toDate) throws Exception {Criteria c = getSession().createCriteria(ItemReturn.class);c.add(Restrictions.eq(\"dFlag\", 1));c.createAlias(\"transfer\", \"nik\");c.createAlias(\"transfer.item\", \"it\");if (!StringUtils.isEmpty(transferNumber)) {c.add(Restrictions.eq(\"nik.transferPanaNumber\", transferNumber));}if (!StringUtils.isEmpty(returnNumber)) {c.add(Restrictions.eq(\"returnNumber\", returnNumber));}if (selectedReceiverType > 0) {c.add(Restrictions.eq(\"nik.transferType\", selectedReceiverType));}if (returnedStatus >= 0) {c.add(Restrictions.eq(\"nik.status\", returnedStatus));}if (receiverId > 0) {if (selectedReceiverType == Transfer.PERSONNAL) {c.createAlias(\"transfer.person\", \"per\");c.add(Restrictions.eq(\"per.id\", receiverId));} else if (selectedReceiverType == Transfer.OFFICIAL) {c.createAlias(\"transfer.branchOffice\", \"bro\");c.add(Restrictions.eq(\"bro.id\", receiverId));}}if (!StringUtils.isEmpty(itemName)) {c.add(Restrictions.ilike(\"it.name\", \"%\" + itemName.toLowerCase() + \"%\", MatchMode.ANYWHERE));}c.createAlias(\"it.category\", \"cat\");c.add(Restrictions.eq(\"cat.categoryType\", Category.TYPE_RETURNABLE));if (categoryId > 0) {c.add(Restrictions.eq(\"cat.id\", categoryId));}if (!DateTimeUtils.isEmpty(fromDate)) {c.add(Restrictions.ge(\"addedDate\", fromDate));}if (!DateTimeUtils.isEmpty(toDate)) {c.add(Restrictions.le(\"addedDate\", toDate));}return c.list();}\n", "public void setReturnNumber(String returnNumber) {this.returnNumber = returnNumber;}\n", "public String getReturnnumber() {return returnnumber;}\n", "public void setReturnnumber(String returnnumber) {this.returnnumber = returnnumber;}\n"]}
{"name": "HumanEval_157_right_angle_triangle", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return true if the three\n    // sides form a right-angled triangle, false otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_157_right_angle_triangle.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_157_right_angle_triangle", "test": "    }\n    public static void main(String[] args) {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n", "description": "Given the lengths of the three sides of a triangle. Return true if the three sides form a right-angled triangle, false otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Example:", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_81_numerical_letter_grade", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you an array array list of GPAs for some students and you have to write \n    // a function that can output an array array list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    // >>> gradeEquation((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f))))\n    // (new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_81_numerical_letter_grade.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"D-\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_81_numerical_letter_grade", "test": "    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"D-\")))));\n    }\n\n}\n", "description": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you an array array list of GPAs for some students and you have to write a function that can output an array array list of letter grades using the following table: GPA       |    Letter grade 4.0                A+ > 3.7                A > 3.3                A- > 3.0                B+ > 2.7                B > 2.3                B- > 2.0                C+ > 1.7                C > 1.3                C- > 1.0                D+ > 0.7                D > 0.0                D- 0.0                E Example:", "codematcher_results": ["public static void main(String[] args) {byte source = 11;for (byte i = 7i >= 0i--) {Log.d(\"BitUtils\", getBitValue(source, i) + \"\");}Log.d(\"BitUtils\", setBitValue(source, 6, (byte) 1) + \"\");Log.d(\"BitUtils\", reverseBitValue(source, 6) + \"\");Log.d(\"BitUtils\", checkBitValue(source, 6) + \"\");for (byte i = 0i < 8i++) {if (checkBitValue(source, i)) {Log.d(\"BitUtils\", i + \"\");}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static Solar lunar2Solar(final Lunar lunar) {int days = LUNAR_MONTH_DAYS[lunar.lunarYear - LUNAR_MONTH_DAYS[0]];int leap = getBitInt(days, 4, 13);int offset = 0;int loopend = leap;if (!lunar.isLeap) {if (lunar.lunarMonth <= leap || leap == 0) {loopend = lunar.lunarMonth - 1;} else {loopend = lunar.lunarMonth;}}for (int i@ i = 0@ i < loopend++){offset += getBitInt(days, 1, 12 - i) == 1 ? 30 : 29;}offset += lunar.lunarDay;int solar11 = SOLAR_1_1[lunar.lunarYear - SOLAR_1_1[0]];int y = getBitInt(solar11, 12, 9);int m = getBitInt(solar11, 4, 5);int d = getBitInt(solar11, 5, 0);return solarFromInt(solarToInt(y, m, d) + offset - 1);}\n", "private static double transformLat(double lng, double lat) {double ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng));ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0;ret += (20.0 * Math.sin(lat * PI) + 40.0 * Math.sin(lat / 3.0 * PI)) * 2.0 / 3.0;ret += (160.0 * Math.sin(lat / 12.0 * PI) + 320 * Math.sin(lat * PI / 30.0)) * 2.0 / 3.0;return ret;}\n", "private static double transformLng(double lng, double lat) {double ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng));ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0;ret += (20.0 * Math.sin(lng * PI) + 40.0 * Math.sin(lng / 3.0 * PI)) * 2.0 / 3.0;ret += (150.0 * Math.sin(lng / 12.0 * PI) + 300.0 * Math.sin(lng / 30.0 * PI)) * 2.0 / 3.0;return ret;}\n", "protected void drawVertical(Canvas canvas, RecyclerView parent) {canvas.save();final int left;final int right;if (parent.getClipToPadding()) {left = parent.getPaddingLeft();right = parent.getWidth() - parent.getPaddingRight();canvas.clipRect(left, parent.getPaddingTop(), right, parent.getHeight() - parent.getPaddingBottom());} else {left = 0;right = parent.getWidth();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getDecoratedBoundsWithMargins(child, mBounds);final int bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));final int top = bottom - mDivider.getIntrinsicHeight();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n", "protected void drawHorizontal(Canvas canvas, RecyclerView parent) {canvas.save();final int top;final int bottom;if (parent.getClipToPadding()) {top = parent.getPaddingTop();bottom = parent.getHeight() - parent.getPaddingBottom();canvas.clipRect(parent.getPaddingLeft(), top, parent.getWidth() - parent.getPaddingRight(), bottom);} else {top = 0;bottom = parent.getHeight();}final int childCount = parent.getChildCount();for (int i@ i = 0@ i < childCount++){final View child = parent.getChildAt(i);parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);final int right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));final int left = right - mDivider.getIntrinsicWidth();mDivider.setBounds(left, top, right, bottom);mDivider.draw(canvas);}canvas.restore();}\n"]}
{"name": "HumanEval_5_intersperse", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'\n    // >>> intersperse((new ArrayList<Long>(Arrays.asList())), (4l))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> intersperse((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)4l, (long)3l)))\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_5_intersperse.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(intersperse((new ArrayList<Long>(Arrays.asList())), (7l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)2l))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)6l, (long)8l, (long)3l, (long)8l, (long)2l)))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l, (long)2l, (long)2l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_5_intersperse", "test": "    }\n    public static void main(String[] args) {\n    assert(intersperse((new ArrayList<Long>(Arrays.asList())), (7l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)2l))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)6l, (long)8l, (long)3l, (long)8l, (long)2l)))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l, (long)2l, (long)2l)))));\n    }\n\n}\n", "description": "Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'", "codematcher_results": ["public void go() {JpaElementSelect select = newSelect();entityManager.persist(select);entityManager.flush();final CriteriaBuilder cb = entityManager.getCriteriaBuilder();CriteriaQuery<Tuple> cq = cb.createTupleQuery();Root<JpaElementSelect> root = cq.from(JpaElementSelect.class);ListJoin<JpaElementSelect, OneForEntity> entityListJoin = root.join(JpaElementSelect_.entityList);root.fetch(JpaElementSelect_.entityList);entityManager.createQuery(cq.multiselect(root.get(\"name\"), // , root.get(\"elementList\")entityListJoin).distinct(true)).getResultList().forEach(tuple -> {System.out.println(tuple.get(0));});}\n", "public static <T> scala.collection.immutable.List<T> map(T... elementList) {Objects.requireNonNull(elementList);return Arrays.stream(elementList).collect(toScalaList());}\n", "public Pod(@Attribute(name = \"error\") final boolean error, @Attribute(name = \"primary\") final boolean primary, @Attribute(name = \"title\") final String title, @Attribute(name = \"scanner\") final String scanner, @Attribute(name = \"id\") final String id, @Attribute(name = \"position\") final long position, @Attribute(name = \"numsubpods\") final long numsubpods, @ElementList(inline = true, name = \"subpods\") final List<SubPod> subpods, @Element(name = \"states\") final States states, @Element(name = \"infos\") final Infos infos, @Element(name = \"definitions\", required = false) final Definitions definitions) {this.error = error;this.title = title;this.scanner = scanner;this.id = id;this.position = position;this.numsubpods = numsubpods;this.subpods = subpods;this.primary = primary;this.states = states;this.infos = infos;this.definitions = definitions;}\n", "public static void main(String[] a) {final CountDownLatch firstLatch = new CountDownLatch(1);final CountDownLatch secondLatch = new CountDownLatch(1);final BuildFactory.Builder builder = new BuildFactory.Builder();CopyOnWriteArrayList<BuildFactory> elements = new CopyOnWriteArrayList<>();elements.add(builder.name(\"myth\").addr(\"local\").build());elements.add(builder.name(\"roll\").addr(\"remote\").build());ReentrantLock lock = new ReentrantLock();ElementList<BuildFactory> list = new ElementList<>(elements, lock, \"list1 > \");ElementList<BuildFactory> list2 = new ElementList<>(elements, lock, \"list2 > \");Thread thread1 = new Thread(() -> {System.out.println(\"\u8fdb\u5165 \u7ebf\u7a0b 1\");elements.add(builder.name(\"dyn 1\").addr(\"89\").build());list.prep();firstLatch.countDown();try {secondLatch.await();} catch (InterruptedException e) {System.out.println(\"first inter error\");}list.listElement(\"first \");});Thread thread2 = new Thread(() -> {System.out.println(\"\u8fdb\u5165 \u7ebf\u7a0b 2\");try {Thread.sleep(2000);firstLatch.await();elements.add(builder.name(\"dyn 2\").addr(\"00\").build());list2.prep();secondLatch.countDown();} catch (InterruptedException e) {System.out.println(\"second inter error\");}list2.listElement(\"second\");});thread1.start();thread2.start();}\n", "public static void main(String[] s) {CopyOnWriteArrayList<Element> elements = new CopyOnWriteArrayList<>();ReentrantLock lock = new ReentrantLock();ElementList<Element> list = new ElementList<>(elements, lock, \"list > \");new Thread(() -> {list.addElement(new Element(\"1\"));list.addElement(new Element(\"2\"));list.addElement(new Element(\"3\"));list.addElement(new Element(\"4\"));list.prep();list.listElement(\"th1 : \");}).start();new Thread(() -> {list.addElement(new Element(\"5\"));list.prep();list.listElement(\"th2 : \");}).start();}\n", "public void sort(int column, boolean ascending) {Main.get().mainPanel.desktop.browser.fileBrowser.status.setFlagOrdering();int rows = Main.get().mainPanel.desktop.browser.fileBrowser.table.getDataTable().getRowCount();int columns = Main.get().mainPanel.desktop.browser.fileBrowser.table.getDataTable().getColumnCount();int selectedRow = Main.get().mainPanel.desktop.browser.fileBrowser.table.getSelectedRow();Map<Integer, Object> data = new HashMap<Integer, Object>(Main.get().mainPanel.desktop.browser.fileBrowser.table.data);List<String[]> elementList = new ArrayList<String[]>();List<GWTObjectToOrder> elementToOrder = new ArrayList<GWTObjectToOrder>();int correctedColumn = correctedColumnIndex(column);if (correctedColumn <= 17) {for (int i@ i = 0@ i < rows++){String[] rowI = new String[columns];GWTObjectToOrder rowToOrder = new GWTObjectToOrder();for (int x@ x = 0@ x < columns++){rowI[x] = Main.get().mainPanel.desktop.browser.fileBrowser.table.getDataTable().getHTML(i, x);}elementList.add(i, rowI);switch(correctedColumn) {case 0:case 1:case 2:case 3:case 6:rowToOrder.setObject(rowI[column].toLowerCase());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 4:if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTFolder) {rowToOrder.setObject(new Double(0));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTMail) {rowToOrder.setObject(new Double(((GWTMail) data.get(Integer.parseInt(rowI[colDataIndex]))).getSize()));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTDocument) {rowToOrder.setObject(new Double(((GWTDocument) data.get(Integer.parseInt(rowI[colDataIndex]))).getActualVersion().getSize()));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);}break;case 5:if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTFolder) {rowToOrder.setObject(((GWTFolder) data.get(Integer.parseInt(rowI[colDataIndex]))).getCreated());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTMail) {rowToOrder.setObject(((GWTMail) data.get(Integer.parseInt(rowI[colDataIndex]))).getReceivedDate());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTDocument) {rowToOrder.setObject(((GWTDocument) data.get(Integer.parseInt(rowI[colDataIndex]))).getLastModified());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);}break;case 7:if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTFolder || data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTMail) {rowToOrder.setObject(new Double(0));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTDocument) {String version = ((GWTDocument) data.get(Integer.parseInt(rowI[colDataIndex]))).getActualVersion().getName();String[] numberParts = version.split(\"\\\\.\");version = \"\";for (int x@ x = 0@ x < numberParts.length++){switch(numberParts[x].length()) {case 1:version = version + \"00\" + numberParts[x];break;case 2:version = version + \"0\" + numberParts[x];break;}}if (numberParts.length == 2) {version = version + \"000000\";}if (numberParts.length == 3) {version = version + \"000\";}rowToOrder.setObject(new Double(version));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);}break;case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTFolder) {rowToOrder.setObject(getExtraColumn((GWTFolder) data.get(Integer.parseInt(rowI[colDataIndex])), correctedColumn));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTMail) {rowToOrder.setObject(getExtraColumn((GWTMail) data.get(Integer.parseInt(rowI[colDataIndex])), correctedColumn));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);} else if (data.get(Integer.parseInt(rowI[colDataIndex])) instanceof GWTDocument) {rowToOrder.setObject(getExtraColumn((GWTDocument) data.get(Integer.parseInt(rowI[colDataIndex])), correctedColumn));rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);}break;}if (selectedRow == i) {selectedRowDataID = rowToOrder.getDataId();}}switch(correctedColumn) {case 0:case 1:case 2:case 3:case 6:Collections.sort(elementToOrder, ColumnComparatorText.getInstance());break;case 4:case 7:Collections.sort(elementToOrder, ColumnComparatorDouble.getInstance());break;case 5:Collections.sort(elementToOrder, ColumnComparatorDate.getInstance());break;case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:Collections.sort(elementToOrder, ColumnComparatorGWTFormElement.getInstance());break;}if (!ascending) {Collections.reverse(elementToOrder);}applySort(elementList, elementToOrder);}Main.get().mainPanel.desktop.browser.fileBrowser.status.unsetFlagOrdering();}\n", "public static void main(String[] args) {Id itemId = initItem(contextA);Id versionId = initVersion(contextA, itemId, null);Id elementID = initElement(contextA, itemId, versionId);GetElementList getElementList = new GetElementList();Collection<ElementInfo> elementList = getElementList.getElements(contextA, itemId, versionId, null);elementList.forEach(elementInfo -> printElement(elementInfo));System.exit(0);}\n", "public void save(String filename) throws IOException {log.debug(\"Saving to file \" + filename);try {BufferedWriter pw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename), //$NON-NLS-1$\"UTF8\"));pw.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");pw.newLine();pw.write(\"<properties>\");pw.newLine();pw.write(//$NON-NLS-1$, //$NON-NLS-2$\"<comment>Properties for \" + ProgramConstants.PROGRAM_NAME + \" v\" + ProgramConstants.PROGRAM_VERSION + //$NON-NLS-1$\"</comment>\");pw.newLine();Enumeration<Object> keys = keys();List<String> elementList = new ArrayList<String>();while (keys.hasMoreElements()) {elementList.add((String) keys.nextElement());}Collections.sort(elementList);for (int i@ i = 0@ i < elementList.size()++){String element = elementList.get(i);pw.write(//$NON-NLS-1$\"<entry key=\\\"\" + element + //$NON-NLS-1$\"\\\">\" + JFritzUtils.convertSpecialChars(JFritzUtils.deconvertSpecialChars(getProperty(element))) + //$NON-NLS-1$\"</entry>\");pw.newLine();}pw.write(\"</properties>\");pw.newLine();pw.close();} catch (UnsupportedEncodingException e) {log.error(\"UTF-8 not supported.\");} catch (FileNotFoundException e) {log.error(\"Could not write \" + filename + \"!\");} catch (IOException e) {log.error(\"IOException \" + filename);}}\n", "private void sort(int column, boolean ascending) {int rows = Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.getDataTable().getRowCount();int columns = Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.getDataTable().getColumnCount();int selectedRow = Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.getSelectedRow();Map<Integer, GWTQueryResult> data = new HashMap<Integer, GWTQueryResult>(Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.data);List<String[]> elementList = new ArrayList<String[]>();List<GWTObjectToOrder> elementToOrder = new ArrayList<GWTObjectToOrder>();int correctedColumn = correctedColumnIndex(column);if (correctedColumn <= 16) {for (int i@ i = 0@ i < rows++){String[] rowI = new String[columns];GWTObjectToOrder rowToOrder = new GWTObjectToOrder();for (int x@ x = 0@ x < columns++){rowI[x] = Main.get().mainPanel.search.searchBrowser.searchResult.searchCompactResult.table.getDataTable().getHTML(i, x);}elementList.add(i, rowI);switch(correctedColumn) {case 0:case 1:case 5:case 6:rowToOrder.setObject(rowI[column].toLowerCase());rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 2:if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument().getName().toLowerCase());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment().getName().toLowerCase());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder().getName().toLowerCase());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail().getSubject().toLowerCase());}rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 3:if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument() != null) {rowToOrder.setObject(new Double(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument().getActualVersion().getSize()));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment() != null) {rowToOrder.setObject(new Double(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment().getActualVersion().getSize()));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder() != null) {rowToOrder.setObject(new Double(0));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail() != null) {rowToOrder.setObject(new Double(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail().getSize()));}rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 4:if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument().getLastModified());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment().getLastModified());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder().getCreated());} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail() != null) {rowToOrder.setObject(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail().getReceivedDate());}rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument() != null) {rowToOrder.setObject(getExtraColumn(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getDocument(), correctedColumn));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment() != null) {rowToOrder.setObject(getExtraColumn(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getAttachment(), correctedColumn));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder() != null) {rowToOrder.setObject(getExtraColumn(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getFolder(), correctedColumn));} else if (((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail() != null) {rowToOrder.setObject(getExtraColumn(((GWTQueryResult) data.get(Integer.parseInt(rowI[colDataIndex]))).getMail(), correctedColumn));}rowToOrder.setDataId(\"\" + i);elementToOrder.add(rowToOrder);break;}if (selectedRow == i) {selectedRowDataID = rowToOrder.getDataId();}}switch(correctedColumn) {case 0:case 1:case 2:case 5:case 6:Collections.sort(elementToOrder, ColumnComparatorText.getInstance());break;case 3:Collections.sort(elementToOrder, ColumnComparatorDouble.getInstance());break;case 4:Collections.sort(elementToOrder, ColumnComparatorDate.getInstance());break;case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:Collections.sort(elementToOrder, ColumnComparatorGWTFormElement.getInstance());break;}if (!ascending) {Collections.reverse(elementToOrder);}applySort(elementList, elementToOrder);}}\n", "public static void main(String[] args) {int elementIndex = 1;Scanner inputElement = new Scanner(System.in);ArrayList elementlist = new ArrayList();boolean inputOver = false;System.out.printf(\"\u8bf7\u4efb\u610f\u8f93\u5165N\u884cN\u4e2a\u5b57\u7b26\u4e32\");System.out.printf(\"\u5f53\u8f93\u5165inputOver\u65f6\u7ed3\u675f\");do {System.out.printf(\"\u8f93\u5165\u7b2c\" + elementIndex + \"\u4e2a\u5b57\u7b26\u4e32\");System.out.printf(\">>\");String input = inputElement.nextLine();if (input.equals(\"inputOver\")) {inputOver = true;System.out.println(\"\u8f93\u5165\u5b8c\u6bd5\uff01\");} else {elementlist.add(input);elementIndex++;}} while (//\u7528do-while\u8bed\u53e5\u52a0\u4e0aif\u5224\u65ad\u6765\u63a7\u5236\u8f93\u5165N\u884c\u5939\u6742\u6570\u5b57\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32inputOver == false);elementIndex = elementIndex - 1;System.out.printf(\"\u6392\u5e8f\u524d:\");String[] newArray = new String[elementIndex];for (int k@ k = 0@ k < elementIndex@ k++) System.out.printf(\">> \" + elementlist.get() + \"\";for (int index@ index = 0@ index < elementIndex@ index++) newArray[@ index] = elementlist.get().toString(;for (int i@ i = 0@ i < elementIndex@ i++) newArray[@ i] = newArray[@ i].replaceAll(\"\\\\d+\", \"\");for (String element : newArray) System.out.printf(element + \"\");System.out.prntln(\"\u6392\u5e8f\u540e\";for (int listIndex@ listIndex = 0@ listIndex < newArray.length++){sortArrays(listIndex, newArray);}}\n"]}
{"name": "HumanEval_146_specialFilter", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list of numbers as input and returns \n    // the number of elements in the array array list that are greater than 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n    // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l))))\n    // (1l)\n    // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l))))\n    // (2l)\n    public static long specialFilter(ArrayList<Long> nums) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_146_specialFilter.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l, (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l, (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_146_specialFilter", "test": "    }\n    public static void main(String[] args) {\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l, (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l, (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    }\n\n}\n", "description": "Write a function that takes an array array list of numbers as input and returns the number of elements in the array array list that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9). For example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_60_sum_to_n", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> sumToN((30l))\n    // (465l)\n    // >>> sumToN((100l))\n    // (5050l)\n    // >>> sumToN((5l))\n    // (15l)\n    // >>> sumToN((10l))\n    // (55l)\n    // >>> sumToN((1l))\n    // (1l)\n    public static long sumToN(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_60_sum_to_n.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_60_sum_to_n", "test": "    }\n    public static void main(String[] args) {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n", "description": "sum_to_n is a function that sums numbers from 1 to n.", "codematcher_results": ["protected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.activity_example);Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);setSupportActionBar(toolbar);final FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);final TextView functionNumber = (TextView) findViewById(R.id.functions_number);final Spinner themeSpinner = (Spinner) findViewById(R.id.theme_spinner);ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.debugkit_themes, android.R.layout.simple_spinner_item);adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);themeSpinner.setAdapter(adapter);themeSpinner.setOnItemSelectedListener(this);mSeekbar = (SeekBar) findViewById(R.id.seekBar);mSeekbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {;public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {functionNumber.setText(Integer.toString(progress));};public void onStartTrackingTouch(SeekBar seekBar) {};public void onStopTrackingTouch(SeekBar seekBar) {}});functionNumber.setText(Integer.toString(mSeekbar.getProgress()));fab.setOnClickListener(new View.OnClickListener() {;public void onClick(View v) {final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);if (mSeekbar != null) {for (int i@ i = 0@ i < mSeekbar.getProgress()++){builder.addFunction(doSomeStuff());}}builder.setTextSize(mTextSize).setTheme(mTheme).build();}});final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);builder.addFunction(new DebugFunction(\"Do some stuff\") {;public String call() throws Exception {return \"This function has a title\";}}).addFunction(new DebugFunction.Clear(\"Clear\")).addFunction(new DebugFunction(\"Make ShPrf\") {;public String call() throws Exception {SharedPreferences.Editor editor = ExampleActivity.this.getSharedPreferences(PREFS_FILE_NAME, Context.MODE_PRIVATE).edit();editor.putString(\"UpdatedAt\", new Date(System.currentTimeMillis()).toString());editor.putBoolean(\"Key 1\", true);editor.putString(\"Key 2\", \"value\");editor.putString(\"Key 3\", \"value 2\");editor.apply();return \"Preferences file has been created.\";}}).addFunction(new DebugFunction.DumpSharedPreferences(\"Shared prefs\", PREFS_FILE_NAME));builder.setTextSize(mTextSize).displayAt(50, 200).setTheme(mTheme).build();}\n", "public String toString() {return \"FileMeasures [functionNumber=\" + functionNumber + \", contractNumber=\" + contractNumber + \", statementNumber=\" + statementNumber + \", contractComplexity=\" + contractComplexity + \", functionComplexity=\" + functionComplexity + \", fileComplexity=\" + fileComplexity + \", fileCognitiveComplexity=\" + fileCognitiveComplexity + \", linesOfCodeNumber=\" + linesOfCodeNumber + \", commentLinesNumber=\" + commentLinesNumber + \"]\";}\n", "public PlayerInputs(int functionNumber) {mInputs = new CopyOnWriteArrayList<Object>();mFunctionNumber = functionNumber;mFinishedNumber = new AtomicInteger();}\n", "public PlayerInputs(List<Object> list, int functionNumber) {if (list instanceof CopyOnWriteArrayList<?>) {mInputs = (CopyOnWriteArrayList<Object>) list;} else {mInputs = new CopyOnWriteArrayList<Object>(list);}mFunctionNumber = functionNumber;mFinishedNumber = new AtomicInteger();}\n", "public OrderStateMap(int stateId, String stateTitle, String stateDesc, String stateTime, String stateIcon, String functionNumber, String phoneNumType) {this.stateId = stateId;this.stateTitle = stateTitle;this.stateDesc = stateDesc;this.stateTime = stateTime;this.stateIcon = stateIcon;this.functionNumber = functionNumber;this.phoneNumType = phoneNumType;}\n", "private static void createFacetBase(ComponentFacet cf, int level, MtasDataCollector<?, ?> dataCollector, Map<Integer, Integer> positionsData, Map<MtasSpanQuery, Map<Integer, Integer>> spansNumberData, Map<String, SortedMap<String, int[]>> facetData, Integer[] docSet) throws IOException {for (MtasFunctionParserFunction function : cf.baseFunctionParserFunctions[level]) {if (function.needArgumentsNumber() > cf.spanQueries.length) {throw new IOException(\"function \" + function + \" expects (at least) \" + function.needArgumentsNumber() + \" queries\");}}Map<String, int[]> list = facetData.get(cf.baseFields[level]);if (dataCollector != null) {MtasDataCollector<?, ?> subDataCollector = null;dataCollector.initNewList(1);if (cf.baseFunctionList[level] != null) {SubComponentFunction[] tmpList;if (!cf.baseFunctionList[level].containsKey(dataCollector)) {tmpList = new SubComponentFunction[cf.baseFunctionParserFunctions[level].length];cf.baseFunctionList[level].put(dataCollector, tmpList);for (int i@ i = 0@ i < cf.baseFunctionParserFunctions[level].length++){try {tmpList[i] = new SubComponentFunction(DataCollector.COLLECTOR_TYPE_LIST, cf.baseFunctionKeys[level][i], cf.baseFunctionTypes[level][i], cf.baseFunctionParserFunctions[level][i], null, null, 0, Integer.MAX_VALUE, null, null);} catch (ParseException e) {throw new IOException(e.getMessage());}}} else {tmpList = cf.baseFunctionList[level].get(dataCollector);}for (SubComponentFunction function : tmpList) {function.dataCollector.initNewList(1);}}if (dataCollector.getCollectorType().equals(DataCollector.COLLECTOR_TYPE_LIST)) {dataCollector.setWithTotal();if (docSet.length > 0 && list.size() > 0) {HashMap<String, Integer[]> docLists = new HashMap<>();HashMap<String, String> groupedKeys = new HashMap<>();boolean documentsInFacets = false;for (Entry<String, int[]> entry : list.entrySet()) {if (!groupedKeys.containsKey(entry.getKey())) {groupedKeys.put(entry.getKey(), groupedKeyName(entry.getKey(), cf.baseRangeSizes[level], cf.baseRangeBases[level]));}Integer[] docList = intersectedDocList(entry.getValue(), docSet);if (docList != null && docList.length > 0) {documentsInFacets = true;}if (docLists.containsKey(groupedKeys.get(entry.getKey()))) {docLists.put(groupedKeys.get(entry.getKey()), mergeDocLists(docLists.get(groupedKeys.get(entry.getKey())), docList));} else {docLists.put(groupedKeys.get(entry.getKey()), docList);}}if (documentsInFacets) {Map<Integer, long[]> args = computeArguments(spansNumberData, cf.spanQueries, docSet);if (cf.baseDataTypes[level].equals(CodecUtil.DATA_TYPE_LONG)) {boolean applySumRule = false;if (cf.baseStatsTypes[level].equals(CodecUtil.STATS_BASIC) && cf.baseParsers[level].sumRule() && (cf.baseMinimumLongs[level] == null) && (cf.baseMaximumLongs[level] == null)) {applySumRule = true;if (cf.baseFunctionList[level].get(dataCollector) != null) {for (SubComponentFunction function : cf.baseFunctionList[level].get(dataCollector)) {if (!function.statsType.equals(CodecUtil.STATS_BASIC) || !function.parserFunction.sumRule() || function.parserFunction.needPositions()) {applySumRule = false;break;}}}}if (applySumRule) {for (String key : new LinkedHashSet<String>(groupedKeys.values())) {if (docLists.get(key).length > 0) {Integer[] subDocSet = docLists.get(key);int length = cf.baseParsers[level].needArgumentsNumber();long[] valueSum = new long[length];long valuePositions = 0;if (subDocSet.length > 0) {long[] tmpArgs;for (int docId : subDocSet){tmpArgs = args.get(docId);if (positionsData != null && positionsData.containsKey(docId) && positionsData.get(docId) != null) {valuePositions += positionsData.get(docId).longValue();}if (tmpArgs != null) {for (int i@ i = 0@ i < length++){valueSum[i] += tmpArgs[i];}}}long value;try {value = cf.baseParsers[level].getValueLong(valueSum, valuePositions);subDataCollector = dataCollector.add(key, value, subDocSet.length);} catch (IOException e) {log.debug(e);dataCollector.error(key, e.getMessage());subDataCollector = null;}if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {SubComponentFunction[] functionList = cf.baseFunctionList[level].get(dataCollector);for (SubComponentFunction function : functionList) {if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {try {long valueLong = function.parserFunction.getValueLong(valueSum, valuePositions);function.dataCollector.add(key, valueLong, subDocSet.length);} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {try {double valueDouble = function.parserFunction.getValueDouble(valueSum, valuePositions);function.dataCollector.add(key, valueDouble, subDocSet.length);} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}}}}if (subDataCollector != null) {createFacetBase(cf, (level + 1), subDataCollector, positionsData, spansNumberData, facetData, subDocSet);}}}}} else {for (String key : new LinkedHashSet<String>(groupedKeys.values())) {if (docLists.get(key).length > 0) {Integer[] subDocSet = docLists.get(key);if (subDocSet.length > 0 && cf.baseDataTypes[level].equals(CodecUtil.DATA_TYPE_LONG)) {long[][] functionValuesLong = null;double[][] functionValuesDouble = null;int[] functionNumber = null;SubComponentFunction[] functionList = null;if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {functionList = cf.baseFunctionList[level].get(dataCollector);functionValuesLong = new long[functionList.length][];functionValuesDouble = new double[functionList.length][];functionNumber = new int[functionList.length];for (int i@ i = 0@ i < functionList.length++){functionValuesLong[i] = new long[subDocSet.length];functionValuesDouble[i] = new double[subDocSet.length];}}int number = 0;Integer[] restrictedSubDocSet = new Integer[subDocSet.length];long[] values = new long[subDocSet.length];for (int docId : subDocSet){long[] tmpArgs = args.get(docId);int tmpPositions = (positionsData == null) ? 0 : (positionsData.get(docId) == null ? 0 : positionsData.get(docId));long value = cf.baseParsers[level].getValueLong(tmpArgs, tmpPositions);if ((cf.baseMinimumLongs[level] == null || value >= cf.baseMinimumLongs[level]) && (cf.baseMaximumLongs[level] == null || value <= cf.baseMaximumLongs[level])) {values[number] = value;restrictedSubDocSet[number] = docId;number++;if (functionList != null) {for (int i@ i = 0@ i < functionList.length++){SubComponentFunction function = functionList[i];if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {try {functionValuesLong[i][functionNumber[i]] = function.parserFunction.getValueLong(tmpArgs, tmpPositions);functionNumber[i]++;} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {try {functionValuesDouble[i][functionNumber[i]] = function.parserFunction.getValueDouble(tmpArgs, tmpPositions);functionNumber[i]++;} catch (IOException e) {log.debug(e);function.dataCollector.error(key, e.getMessage());}}}}}}if (number > 0) {subDataCollector = dataCollector.add(key, values, number);if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {for (int i@ i = 0@ i < functionList.length++){SubComponentFunction function = functionList[i];if (function.dataType.equals(CodecUtil.DATA_TYPE_LONG)) {function.dataCollector.add(key, functionValuesLong[i], functionNumber[i]);} else if (function.dataType.equals(CodecUtil.DATA_TYPE_DOUBLE)) {function.dataCollector.add(key, functionValuesDouble[i], functionNumber[i]);}}}if (subDataCollector != null) {createFacetBase(cf, (level + 1), subDataCollector, positionsData, spansNumberData, facetData, Arrays.copyOfRange(restrictedSubDocSet, 0, number));}}}}}}} else {throw new IOException(\"unexpected dataType \" + cf.baseDataTypes[level]);}}}} else {throw new IOException(\"unexpected type \" + dataCollector.getCollectorType());}dataCollector.closeNewList();if (cf.baseFunctionList[level] != null && cf.baseFunctionList[level].containsKey(dataCollector)) {SubComponentFunction[] tmpList = cf.baseFunctionList[level].get(dataCollector);for (SubComponentFunction function : tmpList) {function.dataCollector.closeNewList();}}}}\n", "public String getFunctionNumber() {return functionNumber;}\n", "public void setFunctionNumber(String functionNumber) {this.functionNumber = functionNumber;}\n", "public int getFunctionNumber() {return functionNumber;}\n", "public void setFunctionNumber(int functionNumber) {this.functionNumber = functionNumber;}\n"]}
{"name": "HumanEval_26_remove_duplicates", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From an array array list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l)))\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_26_remove_duplicates.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_26_remove_duplicates", "test": "    }\n    public static void main(String[] args) {\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));\n    }\n\n}\n", "description": "From an array array list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.", "codematcher_results": ["public ArrayListOfIntegers(ArrayList<Integer> items) {this.items = items;}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n", "public static List<File> unzipFile(final File zipFile, final File destDir) throws IOException {return unzipFileByKeyword(zipFile, destDir, null);}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getComments(final String zipFilePath) throws IOException {return getComments(getFileByPath(zipFilePath));}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "public static List<String> getFilesPath(final String zipFilePath) throws IOException {return getFilesPath(getFileByPath(zipFilePath));}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n", "public static List<File> unzipFileByKeyword(final String zipFilePath, final String destDirPath, final String keyword) throws IOException {return unzipFileByKeyword(getFileByPath(zipFilePath), getFileByPath(destDirPath), keyword);}\n"]}
{"name": "HumanEval_163_generate_integers", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two positive integers a and b, return the even digits between a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l), (8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    // >>> generateIntegers((8l), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    // >>> generateIntegers((10l), (14l))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_163_generate_integers.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(generateIntegers((2l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((10l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((132l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((17l), (89l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_163_generate_integers", "test": "    }\n    public static void main(String[] args) {\n    assert(generateIntegers((2l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((10l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((132l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((17l), (89l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n", "description": "Given two positive integers a and b, return the even digits between a and b, in ascending order. For example:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_9_rolling_max", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a given array list of integers, generate an array array list of rolling maximum element found until given moment\n    // in the sequence.\n    // >>> rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_9_rolling_max.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_9_rolling_max", "test": "    }\n    public static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n", "description": "From a given array list of integers, generate an array array list of rolling maximum element found until given moment in the sequence.", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_3_below_zero", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're given an array array list of deposit and withdrawal operations on a bank account that starts with\n    // zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    // at that point function should return true. Otherwise it should return false.\n    // >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (false)\n    // >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l))))\n    // (true)\n    public static boolean belowZero(ArrayList<Long> operations) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_3_below_zero.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(belowZero((new ArrayList<Long>(Arrays.asList()))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-3l, (long)1l, (long)2l, (long)-3l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l, (long)6l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-5l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_3_below_zero", "test": "    }\n    public static void main(String[] args) {\n    assert(belowZero((new ArrayList<Long>(Arrays.asList()))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-3l, (long)1l, (long)2l, (long)-3l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l, (long)6l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-5l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (true));\n    }\n\n}\n", "description": "You're given an array array list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return true. Otherwise it should return false.", "codematcher_results": ["public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_69_search", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a non-empty array list of positive integers. Return the greatest integer that is greater than \n    // zero, and has a frequency greater than or equal to the value of the integer itself. \n    // The frequency of an integer is the number of times it appears in the array list.\n    // If no such a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_69_search.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l, (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l, (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l, (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l, (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l, (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l, (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) == (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l, (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l, (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l, (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l, (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l, (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l, (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l, (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l, (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l, (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l, (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l, (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l, (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l, (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l, (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l, (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l, (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l, (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l, (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l, (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l)))) == (-1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_69_search", "test": "    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l, (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l, (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l, (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l, (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l, (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l, (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) == (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l, (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l, (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l, (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l, (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l, (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l, (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l, (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l, (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l, (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l, (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l, (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l, (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l, (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l, (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l, (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l, (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l, (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l, (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l, (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l)))) == (-1l));\n    }\n\n}\n", "description": "You are given a non-empty array list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the array list. If no such a value exist, return -1. Examples:", "codematcher_results": ["private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "public static boolean zipFile(final File srcFile, final File zipFile) throws IOException {return zipFile(srcFile, zipFile, null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), null);}\n", "public static boolean zipFile(final String srcFilePath, final String zipFilePath, final String comment) throws IOException {return zipFile(getFileByPath(srcFilePath), getFileByPath(zipFilePath), comment);}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile) throws IOException {return zipFiles(srcFiles, zipFile, null);}\n", "public static boolean zipFiles(final Collection<String> srcFiles, final String zipFilePath) throws IOException {return zipFiles(srcFiles, zipFilePath, null);}\n", "public static List<File> unzipFile(final String zipFilePath, final String destDirPath) throws IOException {return unzipFileByKeyword(zipFilePath, destDirPath, null);}\n"]}
{"name": "HumanEval_61_correct_bracketing", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean correctBracketing(String brackets) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_61_correct_bracketing.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_61_correct_bracketing", "test": "    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n", "description": "brackets is a string of \"(\" and \")\". return true if every opening bracket has a corresponding closing bracket.", "codematcher_results": ["public void isStringReturnsTrue() {assertThat(JSONStringValue.fromString(\"\").isString(), is(true));}\n", "public void isStringReturnsFalse() {assertThat(JSONArrayValue.fromList(EMPTY_LIST).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONBooleanValue.fromValue(true).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONNullValue.NULL.isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONNumberValue.fromLong(0L).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONObjectValue.fromMap(EMPTY_MAP).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(new JSONStubValue().isString(), is(false));}\n", "public void isEmpty_withNullString_returnsTrue() {assertThat(TString.isEmpty(null)).isTrue();}\n", "public void isEmpty_withEmptyString_returnsTrue() {assertThat(TString.isEmpty(\"\")).isTrue();}\n", "public void isEmpty_withNonEmptyString_returnsFalse() {assertThat(TString.isEmpty(\" \")).isFalse();}\n"]}
{"name": "HumanEval_37_sort_even", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes an array array list l and returns an array array list l' such that\n    // l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    // to the values of the even indicies of l, but sorted.\n    // >>> sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    // >>> sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)5l, (long)4l)))\n    public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_37_sort_even.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)5l, (long)0l, (long)9l, (long)1l, (long)123l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)-12l, (long)4l, (long)23l, (long)2l, (long)3l, (long)11l, (long)12l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-12l, (long)8l, (long)3l, (long)4l, (long)5l, (long)2l, (long)12l, (long)11l, (long)23l, (long)-10l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_37_sort_even", "test": "    }\n    public static void main(String[] args) {\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)5l, (long)0l, (long)9l, (long)1l, (long)123l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)-12l, (long)4l, (long)23l, (long)2l, (long)3l, (long)11l, (long)12l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-12l, (long)8l, (long)3l, (long)4l, (long)5l, (long)2l, (long)12l, (long)11l, (long)23l, (long)-10l)))));\n    }\n\n}\n", "description": "This function takes an array array list l and returns an array array list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.", "codematcher_results": ["public void setUp() {Map<NamespacedList, ActionType> namespaceChanges = new LinkedHashMap<>();List<NamespacedList> listList = new ArrayList<>();namespacedList1 = createNamespacedList(\"namespacedList1\", 2);namespacedList2 = createNamespacedList(\"namespacedList2\", 1);namespacedList3 = createNamespacedList(\"namespacedList3\", 3);namespaceChanges.put(namespacedList1, ActionType.ADD);namespaceChanges.put(namespacedList2, ActionType.UPDATE);namespaceChanges.put(namespacedList3, ActionType.DELETE);Namespaces namespaces = new Namespaces();namespaces.setNamespaces(listList);NamespaceChangesStatus namespaceChangesStatus = new NamespaceChangesStatus(namespaceChanges);when(namespacedListsService.getAllNamespacedLists()).thenReturn(namespaces);when(coreBackupNamespaceChangesDAO.get(SERVICE_NAME)).thenReturn(namespaceChangesStatus);}\n", "private void screen(Parameter parameter, List<List<BotRelation>> listList) {String sex = parameter.getSex();int age = parameter.getAge().get(0);switch(sex) {case WOMAN:iteratorDelete(listList, partClass.getMan());break;case MAN:iteratorDelete(listList, partClass.getWoman());break;}if (age < OLD) {iteratorDelete(listList, partClass.getOld());}if (age > CHILD) {iteratorDelete(listList, partClass.getChild());}}\n", "private List<PropertyItem> flatten(Map<String, Object> map, String prefix) {return map.entrySet().stream().flatMap(entry -> {String entryKey = entry.getKey();final String key = Optional.ofNullable(prefix).map(pre -> pre + '.' + entry.getKey()).orElse(entryKey);Object value = entry.getValue();if (value == null || value instanceof String || value instanceof Integer || value instanceof Boolean || value instanceof Character) {return Stream.of(new PropertyItem(key, value));} else if (value instanceof Map) {return ((List<PropertyItem>) flatten((Map) value, key)).stream();} else if (value instanceof List) {return (Stream<PropertyItem>) ((List) value).stream().flatMap(item -> {if (item instanceof Map) {return (Stream<PropertyItem>) flatten((Map) item, key).stream();} else if (item instanceof String || item instanceof Integer || item instanceof Boolean || item instanceof Character) {return Stream.of(new PropertyItem(key, item));}PropertyItem error = new PropertyItem(new IllegalArgumentException(item.getClass() + \" is not allowed under listlist can contain Map<K, V> only.\"));return Stream.of(error);});}PropertyItem error = new PropertyItem(new IllegalArgumentException(value.getClass().toString()));return Stream.of(error);}).collect(Collectors.toList());}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}for (int k@ k = j + 1@ k < n++){if (k > j + 1 && nums[k] == nums[k - 1]) {continue;}for (int m@ m = k + 1@ m < n++){if (m > k + 1 && nums[m] == nums[m - 1]) {continue;}if (nums[i] + nums[j] + nums[k] + nums[m] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[k]);list.add(nums[m]);listList.add(list);}}}}}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;Arrays.sort(nums);for (int i@ i = 0@ i < n - 3++){if (i > 0 && nums[i] == nums[i - 1]) {continue;}for (int j@ j = i + 1@ j < n - 2++){if (j > i + 1 && nums[j] == nums[j - 1]) {continue;}int left = j + 1;int right = n - 1;while (left < right) {if (nums[i] + nums[j] + nums[left] + nums[right] == target) {List<Integer> list = new ArrayList<>();list.add(nums[i]);list.add(nums[j]);list.add(nums[left]);list.add(nums[right]);listList.add(list);left++;right--;while (left < right && nums[left] == nums[left - 1]) {left++;}while (left < right && nums[right] == nums[right + 1]) {right--;}} else if (nums[i] + nums[j] + nums[left] + nums[right] < target) {left++;while (left < right && nums[left] == nums[left - 1]) {left++;}} else {right--;while (left < right && nums[right] == nums[right + 1]) {right--;}}}}}return listList;}\n", "public void process(ResponseBuilder rb) throws IOException {;MtasSolrStatus solrStatus = Objects.requireNonNull((MtasSolrStatus) rb.req.getContext().get(MtasSolrStatus.class), \"couldn't find status\");solrStatus.setStage(rb.stage);try {if (rb.req.getParams().getBool(PARAM_MTAS, false)) {try {ComponentFields mtasFields = getMtasFields(rb);if (mtasFields != null) {DocSet docSet = rb.getResults().docSet;DocList docList = rb.getResults().docList;if (mtasFields.doStats || mtasFields.doDocument || mtasFields.doKwic || mtasFields.doList || mtasFields.doGroup || mtasFields.doFacet || mtasFields.doCollection || mtasFields.doTermVector || mtasFields.doPrefix || mtasFields.doStatus || mtasFields.doVersion) {SolrIndexSearcher searcher = rb.req.getSearcher();ArrayList<Integer> docSetList = null;ArrayList<Integer> docListList = null;if (docSet != null) {docSetList = new ArrayList<>();Iterator<Integer> docSetIterator = docSet.iterator();while (docSetIterator.hasNext()) {docSetList.add(docSetIterator.next());}Collections.sort(docSetList);}if (docList != null) {docListList = new ArrayList<>();Iterator<Integer> docListIterator = docList.iterator();while (docListIterator.hasNext()) {docListList.add(docListIterator.next());}Collections.sort(docListList);}solrStatus.status().addSubs(mtasFields.list.keySet());for (String field : mtasFields.list.keySet()) {try {CodecUtil.collectField(field, searcher, searcher.getRawReader(), docListList, docSetList, mtasFields.list.get(field), solrStatus.status());} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {log.error(e);throw new IOException(e);}}for (ComponentCollection collection : mtasFields.collection) {CodecUtil.collectCollection(searcher.getRawReader(), docSetList, collection);}NamedList<Object> mtasResponse = new SimpleOrderedMap<>();if (mtasFields.doVersion) {SimpleOrderedMap<Object> versionResponse = searchVersion.create(mtasFields.version, false);mtasResponse.add(MtasSolrComponentVersion.NAME, versionResponse);}if (mtasFields.doStatus) {SimpleOrderedMap<Object> statusResponse = searchStatus.create(mtasFields.status, false);if (statusResponse != null) {mtasResponse.add(MtasSolrComponentStatus.NAME, searchStatus.create(mtasFields.status, false));}}if (mtasFields.doDocument) {ArrayList<NamedList<?>> mtasDocumentResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentDocument document : mtasFields.list.get(field).documentList) {mtasDocumentResponses.add(searchDocument.create(document, false));}}mtasResponse.add(MtasSolrComponentDocument.NAME, mtasDocumentResponses);}if (mtasFields.doKwic) {ArrayList<NamedList<?>> mtasKwicResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentKwic kwic : mtasFields.list.get(field).kwicList) {mtasKwicResponses.add(searchKwic.create(kwic, false));}}mtasResponse.add(MtasSolrComponentKwic.NAME, mtasKwicResponses);}if (mtasFields.doFacet) {ArrayList<NamedList<?>> mtasFacetResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentFacet facet : mtasFields.list.get(field).facetList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasFacetResponses.add(searchFacet.create(facet, true));} else {mtasFacetResponses.add(searchFacet.create(facet, false));}}}mtasResponse.add(MtasSolrComponentFacet.NAME, mtasFacetResponses);}if (mtasFields.doCollection) {ArrayList<NamedList<?>> mtasCollectionResponses = new ArrayList<>();for (ComponentCollection collection : mtasFields.collection) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasCollectionResponses.add(searchCollection.create(collection, true));} else {mtasCollectionResponses.add(searchCollection.create(collection, false));}}mtasResponse.add(MtasSolrComponentCollection.NAME, mtasCollectionResponses);}if (mtasFields.doList) {ArrayList<NamedList<?>> mtasListResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentList list : mtasFields.list.get(field).listList) {mtasListResponses.add(searchList.create(list, false));}}mtasResponse.add(MtasSolrComponentList.NAME, mtasListResponses);}if (mtasFields.doGroup) {ArrayList<NamedList<?>> mtasGroupResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentGroup group : mtasFields.list.get(field).groupList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasGroupResponses.add(searchGroup.create(group, true));} else {mtasGroupResponses.add(searchGroup.create(group, false));}}}mtasResponse.add(MtasSolrComponentGroup.NAME, mtasGroupResponses);}if (mtasFields.doTermVector) {ArrayList<NamedList<?>> mtasTermVectorResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentTermVector termVector : mtasFields.list.get(field).termVectorList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasTermVectorResponses.add(searchTermvector.create(termVector, true));} else {mtasTermVectorResponses.add(searchTermvector.create(termVector, false));}}}mtasResponse.add(MtasSolrComponentTermvector.NAME, mtasTermVectorResponses);}if (mtasFields.doPrefix) {ArrayList<NamedList<?>> mtasPrefixResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {if (mtasFields.list.get(field).prefix != null) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, true));} else {mtasPrefixResponses.add(searchPrefix.create(mtasFields.list.get(field).prefix, false));}}}mtasResponse.add(MtasSolrComponentPrefix.NAME, mtasPrefixResponses);}if (mtasFields.doStats) {NamedList<Object> mtasStatsResponse = new SimpleOrderedMap<>();if (mtasFields.doStatsPositions || mtasFields.doStatsTokens || mtasFields.doStatsSpans) {if (mtasFields.doStatsTokens) {ArrayList<Object> mtasStatsTokensResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentToken token : mtasFields.list.get(field).statsTokenList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsTokensResponses.add(searchStats.create(token, true));} else {mtasStatsTokensResponses.add(searchStats.create(token, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_TOKENS, mtasStatsTokensResponses);}if (mtasFields.doStatsPositions) {ArrayList<Object> mtasStatsPositionsResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentPosition position : mtasFields.list.get(field).statsPositionList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsPositionsResponses.add(searchStats.create(position, true));} else {mtasStatsPositionsResponses.add(searchStats.create(position, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_POSITIONS, mtasStatsPositionsResponses);}if (mtasFields.doStatsSpans) {ArrayList<Object> mtasStatsSpansResponses = new ArrayList<>();for (String field : mtasFields.list.keySet()) {for (ComponentSpan span : mtasFields.list.get(field).statsSpanList) {if (rb.req.getParams().getBool(ShardParams.IS_SHARD, false)) {mtasStatsSpansResponses.add(searchStats.create(span, true));} else {mtasStatsSpansResponses.add(searchStats.create(span, false));}}}mtasStatsResponse.add(MtasSolrComponentStats.NAME_SPANS, mtasStatsSpansResponses);}mtasResponse.add(MtasSolrComponentStats.NAME, mtasStatsResponse);}}if (mtasResponse.size() > 0) {rb.rsp.add(NAME, mtasResponse);}}}} catch (IOException e) {errorStatus(solrStatus, e);}}if (!solrStatus.error()) {if (solrStatus.status().numberSegmentsTotal == null) {solrStatus.status().numberSegmentsTotal = rb.req.getSearcher().getRawReader().leaves().size();solrStatus.status().numberSegmentsFinished = solrStatus.status().numberSegmentsTotal;}if (solrStatus.status().numberDocumentsTotal == null) {SolrIndexSearcher searcher;if ((searcher = rb.req.getSearcher()) != null) {solrStatus.status().numberDocumentsTotal = (long) searcher.numDocs();if (rb.getResults().docList != null) {solrStatus.status().numberDocumentsFinished = rb.getResults().docList.matches();solrStatus.status().numberDocumentsFound = rb.getResults().docList.matches();} else if (rb.getResults().docSet != null) {solrStatus.status().numberDocumentsFinished = (long) rb.getResults().docSet.size();solrStatus.status().numberDocumentsFound = (long) rb.getResults().docSet.size();}}}}} catch (ExitableDirectoryReader.ExitingReaderException e) {solrStatus.setError(e.getMessage());} finally {checkStatus(solrStatus);finishStatus(solrStatus);}}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {Set<List<Integer>> listSet = new HashSet<>();int n = nums.length;Arrays.sort(nums);HashMap<Integer, List<Integer[]>> hashMap = new HashMap<>();for (int i@ i = 0@ i < n - 1++){for (int j@ j = i + 1@ j < n++){int num = nums[i] + nums[j];Integer[] pair = { i, j };if (hashMap.containsKey(num)) {hashMap.get(num).add(pair);} else {List<Integer[]> list = new ArrayList<>();list.add(pair);hashMap.put(num, list);}}}for (int i@ i = 0@ i < n - 3++){for (int j@ j = i + 1@ j < n - 2++){int temp = target - nums[i] - nums[j];if (!hashMap.containsKey(temp)) {continue;}List<Integer[]> list = hashMap.get(temp);for (Integer[] integers : list) {if (integers[0] > j) {List<Integer> retList = new ArrayList<>();retList.add(nums[i]);retList.add(nums[j]);retList.add(nums[integers[0]]);retList.add(nums[integers[1]]);listSet.add(retList);}}}}List<List<Integer>> listList = new ArrayList<>();for (List<Integer> list : listSet) {listList.add(list);}return listList;}\n", "public List<List<Integer>> fourSum(int[] nums, int target) {List<List<Integer>> listList = new ArrayList<>();int n = nums.length;HashMap<Integer, Integer> hashMap = new HashMap<>();for (int i@ i = 0@ i < n++){if (hashMap.containsKey(nums[i])) {hashMap.put(nums[i], hashMap.get(nums[i]) + 1);} else {hashMap.put(nums[i], 1);}}if (target % 4 == 0 && hashMap.containsKey(target / 4) && hashMap.get(target / 4) >= 4) {addToListList(target / 4, target / 4, target / 4, target / 4, listList);}ArrayList<Integer> arrayList = new ArrayList<>();for (Integer integer : hashMap.keySet()) {arrayList.add(integer);}Collections.sort(arrayList);for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 3 + arrayList.get(j) == target && hashMap.get(arrayList.get(i)) >= 3) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(i), arrayList.get(j), listList);}if (arrayList.get(i) + arrayList.get(j) * 3 == target && hashMap.get(arrayList.get(j)) >= 3) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) * 2 == target && hashMap.get(arrayList.get(i)) >= 2 && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(j), listList);}}}for (int i@ i = 0@ i < arrayList.size()++){for (int j@ j = i + 1@ j < arrayList.size()++){for (int k@ k = j + 1@ k < arrayList.size()++){if (arrayList.get(i) * 2 + arrayList.get(j) + arrayList.get(k) == target && hashMap.get(arrayList.get(i)) >= 2) {addToListList(arrayList.get(i), arrayList.get(i), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) * 2 + arrayList.get(k) == target && hashMap.get(arrayList.get(j)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(j), arrayList.get(k), listList);}if (arrayList.get(i) + arrayList.get(j) + arrayList.get(k) * 2 == target && hashMap.get(arrayList.get(k)) >= 2) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), arrayList.get(k), listList);}int num = target - arrayList.get(i) - arrayList.get(j) - arrayList.get(k);if (num > arrayList.get(k) && hashMap.containsKey(num)) {addToListList(arrayList.get(i), arrayList.get(j), arrayList.get(k), num, listList);}}}}return listList;}\n", "public List<List<Integer>> permute(int[] nums) {listList = new ArrayList<>();permute(nums, new ArrayList<>());return listList;}\n", "public List<List<Integer>> combine(int n, int k) {listList = new ArrayList<>();int[] array = new int[n];for (int i@ i = 0@ i < array.length++){array[i] = i + 1;}combine(new ArrayList<>(), array, k);return listList;}\n"]}
{"name": "HumanEval_54_same_chars", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static boolean sameChars(String s0, String s1) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_54_same_chars.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_54_same_chars", "test": "    }\n    public static void main(String[] args) {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n", "description": "Check if two words have the same characters.", "codematcher_results": ["private static boolean isSpace(final String s) {if (s == null)return true;for (int i@ i = 0, len = s.length()@ i < len++){if (!Character.isWhitespace(s.charAt(i))) {return false;}}return true;}\n", "public static boolean zipFile(final File srcFile, final File zipFile, final String comment) throws IOException {if (srcFile == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));return zipFile(srcFile, \"\", zos, comment);} finally {if (zos != null) {zos.close();}}}\n", "private static boolean zipFile(final File srcFile, String rootPath, final ZipOutputStream zos, final String comment) throws IOException {rootPath = rootPath + (isSpace(rootPath) ? \"\" : File.separator) + srcFile.getName();if (srcFile.isDirectory()) {File[] fileList = srcFile.listFiles();if (fileList == null || fileList.length <= 0) {ZipEntry entry = new ZipEntry(rootPath + '/');entry.setComment(comment);zos.putNextEntry(entry);zos.closeEntry();} else {for (File file : fileList) {if (!zipFile(file, rootPath, zos, comment))return false;}}} else {InputStream is = null;try {is = new BufferedInputStream(new FileInputStream(srcFile));ZipEntry entry = new ZipEntry(rootPath);entry.setComment(comment);zos.putNextEntry(entry);byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = is.read(buffer, 0, BUFFER_LEN)) != -1) {zos.write(buffer, 0, len);}zos.closeEntry();} finally {if (is != null) {is.close();}}}return true;}\n", "public static boolean zipFiles(final Collection<File> srcFiles, final File zipFile, final String comment) throws IOException {if (srcFiles == null || zipFile == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFile));for (File srcFile : srcFiles) {if (!zipFile(srcFile, \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static boolean zipFiles(final Collection<String> srcFilePaths, final String zipFilePath, final String comment) throws IOException {if (srcFilePaths == null || zipFilePath == null)return false;ZipOutputStream zos = null;try {zos = new ZipOutputStream(new FileOutputStream(zipFilePath));for (String srcFile : srcFilePaths) {if (!zipFile(getFileByPath(srcFile), \"\", zos, comment))return false;}return true;} finally {if (zos != null) {zos.finish();zos.close();}}}\n", "public static List<String> getComments(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> comments = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());comments.add(entry.getComment());}zip.close();return comments;}\n", "public static List<String> getFilesPath(final File zipFile) throws IOException {if (zipFile == null)return null;List<String> paths = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();while (entries.hasMoreElements()) {String entryName = ((ZipEntry) entries.nextElement()).getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");paths.add(entryName);} else {paths.add(entryName);}}zip.close();return paths;}\n", "private static boolean unzipChildFile(final File destDir, final List<File> files, final ZipFile zip, final ZipEntry entry, final String name) throws IOException {File file = new File(destDir, name);files.add(file);if (entry.isDirectory()) {return createOrExistsDir(file);} else {if (!createOrExistsFile(file))return false;InputStream in = null;OutputStream out = null;try {in = new BufferedInputStream(zip.getInputStream(entry));out = new BufferedOutputStream(new FileOutputStream(file));byte[] buffer = new byte[BUFFER_LEN];int len;while ((len = in.read(buffer)) != -1) {out.write(buffer, 0, len);}} finally {if (in != null) {in.close();}if (out != null) {out.close();}}}return true;}\n", "private static boolean createOrExistsFile(final File file) {if (file == null)return false;if (file.exists())return file.isFile();if (!createOrExistsDir(file.getParentFile()))return false;try {return file.createNewFile();} catch (IOException e) {e.printStackTrace();return false;}}\n", "public static List<File> unzipFileByKeyword(final File zipFile, final File destDir, final String keyword) throws IOException {if (zipFile == null || destDir == null)return null;List<File> files = new ArrayList<>();ZipFile zip = new ZipFile(zipFile);Enumeration<?> entries = zip.entries();try {if (isSpace(keyword)) {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.err.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}} else {while (entries.hasMoreElements()) {ZipEntry entry = ((ZipEntry) entries.nextElement());String entryName = entry.getName();if (entryName.contains(\"../\")) {System.out.println(\"entryName: \" + entryName + \" is dangerous!\");continue;}if (entryName.contains(keyword)) {if (!unzipChildFile(destDir, files, zip, entry, entryName))return files;}}}} finally {zip.close();}return files;}\n"]}
{"name": "HumanEval_56_correct_bracketing", "language": "java", "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean correctBracketing(String brackets) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_56_correct_bracketing.py", "prompt_terminology": "reworded", "tests": "    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"], "task_id": "HumanEval_56_correct_bracketing", "test": "    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n", "description": "brackets is a string of \"<\" and \">\". return true if every opening bracket has a corresponding closing bracket.", "codematcher_results": ["public void isStringReturnsTrue() {assertThat(JSONStringValue.fromString(\"\").isString(), is(true));}\n", "public void isStringReturnsFalse() {assertThat(JSONArrayValue.fromList(EMPTY_LIST).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONBooleanValue.fromValue(true).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONNullValue.NULL.isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONNumberValue.fromLong(0L).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(JSONObjectValue.fromMap(EMPTY_MAP).isString(), is(false));}\n", "public void isStringReturnsFalse() {assertThat(new JSONStubValue().isString(), is(false));}\n", "public void isEmpty_withNullString_returnsTrue() {assertThat(TString.isEmpty(null)).isTrue();}\n", "public void isEmpty_withEmptyString_returnsTrue() {assertThat(TString.isEmpty(\"\")).isTrue();}\n", "public void isEmpty_withNonEmptyString_returnsFalse() {assertThat(TString.isEmpty(\" \")).isFalse();}\n"]}
